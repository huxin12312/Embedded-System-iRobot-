
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a4  00800100  000021b2  00002246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  008002a4  008002a4  000023ea  2**0
                  ALLOC
  3 .stab         00003a8c  00000000  00000000  000023ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dbb  00000000  00000000  00005e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00006c33  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002d0  00000000  00000000  00006c62  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000038e4  00000000  00000000  00006f32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000fe4  00000000  00000000  0000a816  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001753  00000000  00000000  0000b7fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000074c  00000000  00000000  0000cf50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000bac  00000000  00000000  0000d69c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002042  00000000  00000000  0000e248  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000240  00000000  00000000  0001028a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
       4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      24:	0c 94 16 09 	jmp	0x122c	; 0x122c <__vector_9>
      28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      2c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__vector_11>
      30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      38:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_14>
      3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      48:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      68:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      6c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      70:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      7c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      80:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      84:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      8c:	07 63       	ori	r16, 0x37	; 55
      8e:	42 36       	cpi	r20, 0x62	; 98
      90:	b7 9b       	sbis	0x16, 7	; 22
      92:	d8 a7       	std	Y+40, r29	; 0x28
      94:	1a 39       	cpi	r17, 0x9A	; 154
      96:	68 56       	subi	r22, 0x68	; 104
      98:	18 ae       	std	Y+56, r1	; 0x38
      9a:	ba ab       	std	Y+50, r27	; 0x32
      9c:	55 8c       	ldd	r5, Z+29	; 0x1d
      9e:	1d 3c       	cpi	r17, 0xCD	; 205
      a0:	b7 cc       	rjmp	.-1682   	; 0xfffffa10 <__eeprom_end+0xff7efa10>
      a2:	57 63       	ori	r21, 0x37	; 55
      a4:	bd 6d       	ori	r27, 0xDD	; 221
      a6:	ed fd       	.word	0xfded	; ????
      a8:	75 3e       	cpi	r23, 0xE5	; 229
      aa:	f6 17       	cp	r31, r22
      ac:	72 31       	cpi	r23, 0x12	; 18
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	08 00       	.word	0x0008	; ????
      b6:	00 00       	nop
      b8:	be 92       	st	-X, r11
      ba:	24 49       	sbci	r18, 0x94	; 148
      bc:	12 3e       	cpi	r17, 0xE2	; 226
      be:	ab aa       	std	Y+51, r10	; 0x33
      c0:	aa 2a       	or	r10, r26
      c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
      c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
      c6:	4c 3e       	cpi	r20, 0xEC	; 236
      c8:	00 00       	nop
      ca:	00 80       	ld	r0, Z
      cc:	be ab       	std	Y+54, r27	; 0x36
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	aa 3e       	cpi	r26, 0xEA	; 234
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	bf 00       	.word	0x00bf	; ????
      d8:	00 00       	nop
      da:	80 3f       	cpi	r24, 0xF0	; 240
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	00 08       	sbc	r0, r0
      e2:	41 78       	andi	r20, 0x81	; 129
      e4:	d3 bb       	out	0x13, r29	; 19
      e6:	43 87       	std	Z+11, r20	; 0x0b
      e8:	d1 13       	cpse	r29, r17
      ea:	3d 19       	sub	r19, r13
      ec:	0e 3c       	cpi	r16, 0xCE	; 206
      ee:	c3 bd       	out	0x23, r28	; 35
      f0:	42 82       	std	Z+2, r4	; 0x02
      f2:	ad 2b       	or	r26, r29
      f4:	3e 68       	ori	r19, 0x8E	; 142
      f6:	ec 82       	std	Y+4, r14	; 0x04
      f8:	76 be       	out	0x36, r7	; 54
      fa:	d9 8f       	std	Y+25, r29	; 0x19
      fc:	e1 a9       	ldd	r30, Z+49	; 0x31
      fe:	3e 4c       	sbci	r19, 0xCE	; 206
     100:	80 ef       	ldi	r24, 0xF0	; 240
     102:	ff be       	out	0x3f, r15	; 63
     104:	01 c4       	rjmp	.+2050   	; 0x908 <main+0x5f6>
     106:	ff 7f       	andi	r31, 0xFF	; 255
     108:	3f 00       	.word	0x003f	; ????
     10a:	00 00       	nop
	...

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d0 e1       	ldi	r29, 0x10	; 16
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	12 e0       	ldi	r17, 0x02	; 2
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	e2 eb       	ldi	r30, 0xB2	; 178
     122:	f1 e2       	ldi	r31, 0x21	; 33
     124:	00 e0       	ldi	r16, 0x00	; 0
     126:	0b bf       	out	0x3b, r16	; 59
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x14>
     12a:	07 90       	elpm	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	a4 3a       	cpi	r26, 0xA4	; 164
     130:	b1 07       	cpc	r27, r17
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0x10>

00000134 <__do_clear_bss>:
     134:	22 e0       	ldi	r18, 0x02	; 2
     136:	a4 ea       	ldi	r26, 0xA4	; 164
     138:	b2 e0       	ldi	r27, 0x02	; 2
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	a2 3b       	cpi	r26, 0xB2	; 178
     140:	b2 07       	cpc	r27, r18
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
     144:	0e 94 89 01 	call	0x312	; 0x312 <main>
     148:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <_exit>

0000014c <__bad_interrupt>:
     14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <__vector_14>:
char s6[] = "retrival zone detect";
char s8[] = "Retrival pillar detect";


ISR (TIMER1_OVF_vect)
{
     150:	1f 92       	push	r1
     152:	0f 92       	push	r0
     154:	0f b6       	in	r0, 0x3f	; 63
     156:	0f 92       	push	r0
     158:	11 24       	eor	r1, r1
     15a:	8f 93       	push	r24
     15c:	9f 93       	push	r25
	overflows2 ++;
     15e:	80 91 a6 02 	lds	r24, 0x02A6
     162:	90 91 a7 02 	lds	r25, 0x02A7
     166:	01 96       	adiw	r24, 0x01	; 1
     168:	90 93 a7 02 	sts	0x02A7, r25
     16c:	80 93 a6 02 	sts	0x02A6, r24
}
     170:	9f 91       	pop	r25
     172:	8f 91       	pop	r24
     174:	0f 90       	pop	r0
     176:	0f be       	out	0x3f, r0	; 63
     178:	0f 90       	pop	r0
     17a:	1f 90       	pop	r1
     17c:	18 95       	reti

0000017e <__vector_11>:

ISR (TIMER1_CAPT_vect)
{
     17e:	1f 92       	push	r1
     180:	0f 92       	push	r0
     182:	0f b6       	in	r0, 0x3f	; 63
     184:	0f 92       	push	r0
     186:	11 24       	eor	r1, r1
     188:	8f 93       	push	r24
     18a:	9f 93       	push	r25
	if((TCCR1B & 0x40) == 0x40)
     18c:	0e b4       	in	r0, 0x2e	; 46
     18e:	06 fe       	sbrs	r0, 6
     190:	06 c0       	rjmp	.+12     	; 0x19e <__vector_11+0x20>
	{
		Raising_edge = ICR1;
     192:	86 b5       	in	r24, 0x26	; 38
     194:	97 b5       	in	r25, 0x27	; 39
     196:	90 93 ab 02 	sts	0x02AB, r25
     19a:	80 93 aa 02 	sts	0x02AA, r24
	}
	if((TCCR1B & 0x40) == 0x00)
     19e:	0e b4       	in	r0, 0x2e	; 46
     1a0:	06 fc       	sbrc	r0, 6
     1a2:	0c c0       	rjmp	.+24     	; 0x1bc <__vector_11+0x3e>
	{
		Falling_edge = ICR1;
     1a4:	86 b5       	in	r24, 0x26	; 38
     1a6:	97 b5       	in	r25, 0x27	; 39
     1a8:	90 93 a9 02 	sts	0x02A9, r25
     1ac:	80 93 a8 02 	sts	0x02A8, r24
		update_flag = 1;
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	90 93 a5 02 	sts	0x02A5, r25
     1b8:	80 93 a4 02 	sts	0x02A4, r24
	}
	TCCR1B ^= 0x40;
     1bc:	9e b5       	in	r25, 0x2e	; 46
     1be:	80 e4       	ldi	r24, 0x40	; 64
     1c0:	89 27       	eor	r24, r25
     1c2:	8e bd       	out	0x2e, r24	; 46
}
     1c4:	9f 91       	pop	r25
     1c6:	8f 91       	pop	r24
     1c8:	0f 90       	pop	r0
     1ca:	0f be       	out	0x3f, r0	; 63
     1cc:	0f 90       	pop	r0
     1ce:	1f 90       	pop	r1
     1d0:	18 95       	reti

000001d2 <serial_puts>:
void serial_puts(char* str);

unsigned interval = 43000;

void serial_puts(char* str)
{
     1d2:	ef 92       	push	r14
     1d4:	ff 92       	push	r15
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
     1da:	cf 93       	push	r28
     1dc:	df 93       	push	r29
     1de:	d8 2f       	mov	r29, r24
     1e0:	c9 2f       	mov	r28, r25
	USART_Transmit('\n');
     1e2:	8a e0       	ldi	r24, 0x0A	; 10
     1e4:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
	USART_Transmit('\r');
     1e8:	8d e0       	ldi	r24, 0x0D	; 13
     1ea:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
	int size = strlen(str);
     1ee:	ed 2f       	mov	r30, r29
     1f0:	fc 2f       	mov	r31, r28
     1f2:	df 01       	movw	r26, r30
     1f4:	0d 90       	ld	r0, X+
     1f6:	00 20       	and	r0, r0
     1f8:	e9 f7       	brne	.-6      	; 0x1f4 <serial_puts+0x22>
     1fa:	11 97       	sbiw	r26, 0x01	; 1
     1fc:	7d 01       	movw	r14, r26
     1fe:	ee 1a       	sub	r14, r30
     200:	ff 0a       	sbc	r15, r31
	for(int i = 0; i < size; i++)
     202:	1e 14       	cp	r1, r14
     204:	1f 04       	cpc	r1, r15
     206:	6c f4       	brge	.+26     	; 0x222 <serial_puts+0x50>
     208:	0d 2f       	mov	r16, r29
     20a:	1c 2f       	mov	r17, r28
     20c:	c0 e0       	ldi	r28, 0x00	; 0
     20e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		USART_Transmit(str[i]);
     210:	f8 01       	movw	r30, r16
     212:	81 91       	ld	r24, Z+
     214:	8f 01       	movw	r16, r30
     216:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
void serial_puts(char* str)
{
	USART_Transmit('\n');
	USART_Transmit('\r');
	int size = strlen(str);
	for(int i = 0; i < size; i++)
     21a:	21 96       	adiw	r28, 0x01	; 1
     21c:	ec 16       	cp	r14, r28
     21e:	fd 06       	cpc	r15, r29
     220:	b9 f7       	brne	.-18     	; 0x210 <serial_puts+0x3e>
	{
		USART_Transmit(str[i]);
	}
}
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	1f 91       	pop	r17
     228:	0f 91       	pop	r16
     22a:	ff 90       	pop	r15
     22c:	ef 90       	pop	r14
     22e:	08 95       	ret

00000230 <timer_init>:
*	used to initialize the timer
**/
void timer_init(void)
{
	//TCCR1A  set all COM as zero,  set WGM all for 0 to use input capture
	TCCR1A = 0b00000000;
     230:	1f bc       	out	0x2f, r1	; 47
	//TCCR1B  set 7(ICNC1) for Noise canceller,  set 4 and 3 as zero for WGM, prescalar 8 bit 2 1 0 (010);
	TCCR1B = 0b10000010;
     232:	82 e8       	ldi	r24, 0x82	; 130
     234:	8e bd       	out	0x2e, r24	; 46
	//TIMSK   ubterrupt Enable bit 5, Overflow Interrupt enable bit 2
	TIMSK = 0b00100100;
     236:	84 e2       	ldi	r24, 0x24	; 36
     238:	87 bf       	out	0x37, r24	; 55
     23a:	08 95       	ret

0000023c <timer3_init>:
/**
*	used to initialize the timer3
*/
void timer3_init(void)
{
	OCR3A = interval-1;	// number of cycles in the interval
     23c:	80 91 06 01 	lds	r24, 0x0106
     240:	90 91 07 01 	lds	r25, 0x0107
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	90 93 87 00 	sts	0x0087, r25
     24a:	80 93 86 00 	sts	0x0086, r24
	OCR3B = 2500-1;				// if you want to move servo to the middle
     24e:	83 ec       	ldi	r24, 0xC3	; 195
     250:	99 e0       	ldi	r25, 0x09	; 9
     252:	90 93 85 00 	sts	0x0085, r25
     256:	80 93 84 00 	sts	0x0084, r24
	TCCR3A = 0b10101011;		// set COM and WGM (bits 3 and 2)
     25a:	8b ea       	ldi	r24, 0xAB	; 171
     25c:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = 0b00011010;		// set WGM (bits 1 and 0) and CS
     260:	8a e1       	ldi	r24, 0x1A	; 26
     262:	80 93 8a 00 	sts	0x008A, r24
	TCCR3C = 0;
     266:	10 92 8c 00 	sts	0x008C, r1
	
	DDRE |= _BV(4);				// set Port E pin 4 (OC3B) as output
     26a:	14 9a       	sbi	0x02, 4	; 2
     26c:	08 95       	ret

0000026e <move_servo>:
**/
void move_servo(unsigned degree)
{
	unsigned pulse_width;		// pulse width in cycles
	
	pulse_width = 1000 + 3500/180*degree;
     26e:	23 e1       	ldi	r18, 0x13	; 19
     270:	ac 01       	movw	r20, r24
     272:	24 9f       	mul	r18, r20
     274:	c0 01       	movw	r24, r0
     276:	25 9f       	mul	r18, r21
     278:	90 0d       	add	r25, r0
     27a:	11 24       	eor	r1, r1
	
	OCR3B = pulse_width-1;		// set pulse width
     27c:	89 51       	subi	r24, 0x19	; 25
     27e:	9c 4f       	sbci	r25, 0xFC	; 252
     280:	90 93 85 00 	sts	0x0085, r25
     284:	80 93 84 00 	sts	0x0084, r24
     288:	08 95       	ret

0000028a <ADC_read>:
*	@param channel set channel ADC.
*	@return the result of ADC
**/
unsigned ADC_read(char channel)
{
	ADMUX |= (channel & 0x2F);
     28a:	97 b1       	in	r25, 0x07	; 7
     28c:	8f 72       	andi	r24, 0x2F	; 47
     28e:	98 2b       	or	r25, r24
     290:	97 b9       	out	0x07, r25	; 7
	ADCSRA |= _BV(ADSC);
     292:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & _BV(ADSC))
     294:	36 99       	sbic	0x06, 6	; 6
     296:	fe cf       	rjmp	.-4      	; 0x294 <ADC_read+0xa>
{}
	return ADC;
     298:	24 b1       	in	r18, 0x04	; 4
     29a:	35 b1       	in	r19, 0x05	; 5
}
     29c:	82 2f       	mov	r24, r18
     29e:	93 2f       	mov	r25, r19
     2a0:	08 95       	ret

000002a2 <ADC_init>:
/**
* used to initialize the ADC.
**/
void ADC_init(void)
{
	ADMUX = _BV(REFS1) | _BV(REFS0) | _BV(MUX1);
     2a2:	82 ec       	ldi	r24, 0xC2	; 194
     2a4:	87 b9       	out	0x07, r24	; 7
	ADCSRA = _BV(ADEN) | (7<<ADPS0);
     2a6:	87 e8       	ldi	r24, 0x87	; 135
     2a8:	86 b9       	out	0x06, r24	; 6
     2aa:	08 95       	ret

000002ac <load_songs>:

/**
*	Used to play the sound in the retrieval zone.
**/
void load_songs(void) 
 {
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
     2b4:	c4 57       	subi	r28, 0x74	; 116
     2b6:	d1 09       	sbc	r29, r1
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	de bf       	out	0x3e, r29	; 62
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	cd bf       	out	0x3d, r28	; 61
	    unsigned char NumberofNotes = 58;
	    unsigned char Notesofsongs[58]    = {120, 1, 120, 2, 120, 3, 120, 1, 2, 3, 120,  1, 127, 1, 2, 3, 78, 1, 79, 2, 70, 3, 120, 3, 132, 2, 128, 1, 70, 1, 2, 3, 127, 1, 127, 2, 77, 3, 78, 4, 75, 5, 75, 6, 75, 7, 73, 5, 6, 7, 77, 1, 120, 1, 70, 2, 75, 2, 75, 3, 77, 3,77};
     2c2:	8a e3       	ldi	r24, 0x3A	; 58
     2c4:	e4 e3       	ldi	r30, 0x34	; 52
     2c6:	f1 e0       	ldi	r31, 0x01	; 1
     2c8:	de 01       	movw	r26, r28
     2ca:	11 96       	adiw	r26, 0x01	; 1
     2cc:	01 90       	ld	r0, Z+
     2ce:	0d 92       	st	X+, r0
     2d0:	8a 95       	dec	r24
     2d2:	e1 f7       	brne	.-8      	; 0x2cc <load_songs+0x20>
	    unsigned char Durationofsongs[58] = {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7};
     2d4:	8a e3       	ldi	r24, 0x3A	; 58
     2d6:	ee e6       	ldi	r30, 0x6E	; 110
     2d8:	f1 e0       	ldi	r31, 0x01	; 1
     2da:	de 01       	movw	r26, r28
     2dc:	db 96       	adiw	r26, 0x3b	; 59
     2de:	01 90       	ld	r0, Z+
     2e0:	0d 92       	st	X+, r0
     2e2:	8a 95       	dec	r24
     2e4:	e1 f7       	brne	.-8      	; 0x2de <load_songs+0x32>
	    oi_load_song(songings, NumberofNotes, Notesofsongs, Durationofsongs);
     2e6:	9e 01       	movw	r18, r28
     2e8:	25 5c       	subi	r18, 0xC5	; 197
     2ea:	3f 4f       	sbci	r19, 0xFF	; 255
     2ec:	ae 01       	movw	r20, r28
     2ee:	4f 5f       	subi	r20, 0xFF	; 255
     2f0:	5f 4f       	sbci	r21, 0xFF	; 255
     2f2:	6a e3       	ldi	r22, 0x3A	; 58
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 7b 07 	call	0xef6	; 0xef6 <oi_load_song>
 }
     2fe:	cc 58       	subi	r28, 0x8C	; 140
     300:	df 4f       	sbci	r29, 0xFF	; 255
     302:	0f b6       	in	r0, 0x3f	; 63
     304:	f8 94       	cli
     306:	de bf       	out	0x3e, r29	; 62
     308:	0f be       	out	0x3f, r0	; 63
     30a:	cd bf       	out	0x3d, r28	; 61
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	08 95       	ret

00000312 <main>:
/**
*	Used to control the robot.
*	Receive and transmit data, measure the distance from object and navigate to the retrieval zone.
**/
int main(void)
{
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	c7 5c       	subi	r28, 0xC7	; 199
     31c:	d1 40       	sbci	r29, 0x01	; 1
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	f8 94       	cli
     322:	de bf       	out	0x3e, r29	; 62
     324:	0f be       	out	0x3f, r0	; 63
     326:	cd bf       	out	0x3d, r28	; 61
	lcd_init();
     328:	0e 94 0d 05 	call	0xa1a	; 0xa1a <lcd_init>
	timer3_init();
     32c:	0e 94 1e 01 	call	0x23c	; 0x23c <timer3_init>
	timer_init();
     330:	0e 94 18 01 	call	0x230	; 0x230 <timer_init>
	ADC_init();
     334:	0e 94 51 01 	call	0x2a2	; 0x2a2 <ADC_init>
	USART_Init();
     338:	0e 94 ca 08 	call	0x1194	; 0x1194 <USART_Init>
	oi_t *sensor_data = oi_alloc();
     33c:	0e 94 62 07 	call	0xec4	; 0xec4 <oi_alloc>
     340:	ca 53       	subi	r28, 0x3A	; 58
     342:	de 4f       	sbci	r29, 0xFE	; 254
     344:	99 83       	std	Y+1, r25	; 0x01
     346:	88 83       	st	Y, r24
     348:	c6 5c       	subi	r28, 0xC6	; 198
     34a:	d1 40       	sbci	r29, 0x01	; 1
	oi_init(sensor_data);//should turn the iRobot Create's power LED yellow
     34c:	0e 94 96 08 	call	0x112c	; 0x112c <oi_init>
  
	lcd_init();
     350:	0e 94 0d 05 	call	0xa1a	; 0xa1a <lcd_init>
	serial_puts("Start");
     354:	88 ea       	ldi	r24, 0xA8	; 168
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <serial_puts>
	int x2 = 0;
	int x3 = 0;
	int x4 = 0;
	unsigned angle = 0;
	unsigned char IR = 0;
	volatile int i=0;
     35c:	1a 82       	std	Y+2, r1	; 0x02
     35e:	19 82       	std	Y+1, r1	; 0x01
	volatile int x = 0;
     360:	1c 82       	std	Y+4, r1	; 0x04
     362:	1b 82       	std	Y+3, r1	; 0x03
		if (command == '1')
		{
			found = 0;
			angle = 0;
			int t;
			int TempAngle[6] = {0, 0,0,0,0,0};
     364:	2e 01       	movw	r4, r28
     366:	2b e5       	ldi	r18, 0x5B	; 91
     368:	42 1a       	sub	r4, r18
     36a:	2e ef       	ldi	r18, 0xFE	; 254
     36c:	52 0a       	sbc	r5, r18
			int TempIR[6] = {0, 0,0,0,0,0};
     36e:	ce 01       	movw	r24, r28
     370:	87 56       	subi	r24, 0x67	; 103
     372:	9e 4f       	sbci	r25, 0xFE	; 254
     374:	cd 54       	subi	r28, 0x4D	; 77
     376:	de 4f       	sbci	r29, 0xFE	; 254
     378:	99 83       	std	Y+1, r25	; 0x01
     37a:	88 83       	st	Y, r24
     37c:	c3 5b       	subi	r28, 0xB3	; 179
     37e:	d1 40       	sbci	r29, 0x01	; 1
			int pos[6] = {0, 0,0,0,0,0};
			int AddIR[6] = {0, 0, 0,0,0,0};
     380:	fe 01       	movw	r30, r28
     382:	e3 57       	subi	r30, 0x73	; 115
     384:	fe 4f       	sbci	r31, 0xFE	; 254
     386:	cb 54       	subi	r28, 0x4B	; 75
     388:	de 4f       	sbci	r29, 0xFE	; 254
     38a:	f9 83       	std	Y+1, r31	; 0x01
     38c:	e8 83       	st	Y, r30
     38e:	c5 5b       	subi	r28, 0xB5	; 181
     390:	d1 40       	sbci	r29, 0x01	; 1
			int count[6] = {0, 0, 0,0,0,0};
     392:	9e 01       	movw	r18, r28
     394:	2f 57       	subi	r18, 0x7F	; 127
     396:	3e 4f       	sbci	r19, 0xFE	; 254
     398:	c9 54       	subi	r28, 0x49	; 73
     39a:	de 4f       	sbci	r29, 0xFE	; 254
     39c:	39 83       	std	Y+1, r19	; 0x01
     39e:	28 83       	st	Y, r18
     3a0:	c7 5b       	subi	r28, 0xB7	; 183
     3a2:	d1 40       	sbci	r29, 0x01	; 1
				wait_ms(20);				
				
				IR = 0;
				IR = 42800*pow(ADC_read(2),-1.23);
				
				sprintf(display6, "Angle: %5d		IR: %5d",angle,IR);
     3a4:	1e 01       	movw	r2, r28
     3a6:	33 ee       	ldi	r19, 0xE3	; 227
     3a8:	23 1a       	sub	r2, r19
     3aa:	3e ef       	ldi	r19, 0xFE	; 254
     3ac:	33 0a       	sbc	r3, r19
							for (int i = 0;i<strlen(s8);i++)
							{
								USART_Transmit(s8[i]);
							}
							
							sprintf(display5, "object position: %5d",pos[found]);
     3ae:	ce 01       	movw	r24, r28
     3b0:	87 54       	subi	r24, 0x47	; 71
     3b2:	9f 4f       	sbci	r25, 0xFF	; 255
     3b4:	c7 54       	subi	r28, 0x47	; 71
     3b6:	de 4f       	sbci	r29, 0xFE	; 254
     3b8:	99 83       	std	Y+1, r25	; 0x01
     3ba:	88 83       	st	Y, r24
     3bc:	c9 5b       	subi	r28, 0xB9	; 185
     3be:	d1 40       	sbci	r29, 0x01	; 1
				wait_ms(20);				
				
				IR = 0;
				IR = 42800*pow(ADC_read(2),-1.23);
				
				sprintf(display6, "Angle: %5d		IR: %5d",angle,IR);
     3c0:	c1 54       	subi	r28, 0x41	; 65
     3c2:	de 4f       	sbci	r29, 0xFE	; 254
     3c4:	28 82       	st	Y, r2
     3c6:	cf 5b       	subi	r28, 0xBF	; 191
     3c8:	d1 40       	sbci	r29, 0x01	; 1
     3ca:	c0 54       	subi	r28, 0x40	; 64
     3cc:	de 4f       	sbci	r29, 0xFE	; 254
     3ce:	38 82       	st	Y, r3
     3d0:	c0 5c       	subi	r28, 0xC0	; 192
     3d2:	d1 40       	sbci	r29, 0x01	; 1
							for (int i = 0;i<strlen(s8);i++)
							{
								USART_Transmit(s8[i]);
							}
							
							sprintf(display5, "object position: %5d",pos[found]);
     3d4:	cc 53       	subi	r28, 0x3C	; 60
     3d6:	de 4f       	sbci	r29, 0xFE	; 254
     3d8:	88 83       	st	Y, r24
     3da:	c4 5c       	subi	r28, 0xC4	; 196
     3dc:	d1 40       	sbci	r29, 0x01	; 1
     3de:	cb 53       	subi	r28, 0x3B	; 59
     3e0:	de 4f       	sbci	r29, 0xFE	; 254
     3e2:	98 83       	st	Y, r25
     3e4:	c5 5c       	subi	r28, 0xC5	; 197
     3e6:	d1 40       	sbci	r29, 0x01	; 1
			oi_update(sensor_data);
			x1 = sensor_data->cliff_left_signal;
			x2 = sensor_data->cliff_right_signal;
			x3 = sensor_data->cliff_frontleft_signal;
			x4 = sensor_data->cliff_frontright_signal; 
			sprintf (display1, "left        = %d",x1);
     3e8:	fe 01       	movw	r30, r28
     3ea:	e7 59       	subi	r30, 0x97	; 151
     3ec:	ff 4f       	sbci	r31, 0xFF	; 255
     3ee:	c5 54       	subi	r28, 0x45	; 69
     3f0:	de 4f       	sbci	r29, 0xFE	; 254
     3f2:	f9 83       	std	Y+1, r31	; 0x01
     3f4:	e8 83       	st	Y, r30
     3f6:	cb 5b       	subi	r28, 0xBB	; 187
     3f8:	d1 40       	sbci	r29, 0x01	; 1
	char display5[100];
	char display6[100];	
			
	while (1)
	{
		command = USART_Recieve();
     3fa:	0e 94 d6 08 	call	0x11ac	; 0x11ac <USART_Recieve>
     3fe:	cd 53       	subi	r28, 0x3D	; 61
     400:	de 4f       	sbci	r29, 0xFE	; 254
     402:	88 83       	st	Y, r24
     404:	c3 5c       	subi	r28, 0xC3	; 195
     406:	d1 40       	sbci	r29, 0x01	; 1
		USART_Transmit(command);
     408:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
		//USART_Transmit(13);
		//USART_Transmit(10);
		
		if (command == '1')
     40c:	cd 53       	subi	r28, 0x3D	; 61
     40e:	de 4f       	sbci	r29, 0xFE	; 254
     410:	f8 81       	ld	r31, Y
     412:	c3 5c       	subi	r28, 0xC3	; 195
     414:	d1 40       	sbci	r29, 0x01	; 1
     416:	f1 33       	cpi	r31, 0x31	; 49
     418:	09 f0       	breq	.+2      	; 0x41c <main+0x10a>
     41a:	7e c1       	rjmp	.+764    	; 0x718 <main+0x406>
		{
			found = 0;
			angle = 0;
			int t;
			int TempAngle[6] = {0, 0,0,0,0,0};
     41c:	8c e0       	ldi	r24, 0x0C	; 12
     41e:	f2 01       	movw	r30, r4
     420:	28 2f       	mov	r18, r24
     422:	11 92       	st	Z+, r1
     424:	2a 95       	dec	r18
     426:	e9 f7       	brne	.-6      	; 0x422 <main+0x110>
			int TempIR[6] = {0, 0,0,0,0,0};
     428:	cd 54       	subi	r28, 0x4D	; 77
     42a:	de 4f       	sbci	r29, 0xFE	; 254
     42c:	e8 81       	ld	r30, Y
     42e:	f9 81       	ldd	r31, Y+1	; 0x01
     430:	c3 5b       	subi	r28, 0xB3	; 179
     432:	d1 40       	sbci	r29, 0x01	; 1
     434:	28 2f       	mov	r18, r24
     436:	11 92       	st	Z+, r1
     438:	2a 95       	dec	r18
     43a:	e9 f7       	brne	.-6      	; 0x436 <main+0x124>
			int pos[6] = {0, 0,0,0,0,0};
			int AddIR[6] = {0, 0, 0,0,0,0};
     43c:	cb 54       	subi	r28, 0x4B	; 75
     43e:	de 4f       	sbci	r29, 0xFE	; 254
     440:	e8 81       	ld	r30, Y
     442:	f9 81       	ldd	r31, Y+1	; 0x01
     444:	c5 5b       	subi	r28, 0xB5	; 181
     446:	d1 40       	sbci	r29, 0x01	; 1
     448:	28 2f       	mov	r18, r24
     44a:	11 92       	st	Z+, r1
     44c:	2a 95       	dec	r18
     44e:	e9 f7       	brne	.-6      	; 0x44a <main+0x138>
			int count[6] = {0, 0, 0,0,0,0};
     450:	c9 54       	subi	r28, 0x49	; 73
     452:	de 4f       	sbci	r29, 0xFE	; 254
     454:	e8 81       	ld	r30, Y
     456:	f9 81       	ldd	r31, Y+1	; 0x01
     458:	c7 5b       	subi	r28, 0xB7	; 183
     45a:	d1 40       	sbci	r29, 0x01	; 1
     45c:	11 92       	st	Z+, r1
     45e:	8a 95       	dec	r24
     460:	e9 f7       	brne	.-6      	; 0x45c <main+0x14a>
			for (angle = 0;angle < 181;angle++)
     462:	61 2c       	mov	r6, r1
     464:	71 2c       	mov	r7, r1
		//USART_Transmit(13);
		//USART_Transmit(10);
		
		if (command == '1')
		{
			found = 0;
     466:	81 2c       	mov	r8, r1
     468:	91 2c       	mov	r9, r1
				wait_ms(20);				
				
				IR = 0;
				IR = 42800*pow(ADC_read(2),-1.23);
				
				sprintf(display6, "Angle: %5d		IR: %5d",angle,IR);
     46a:	0f 2e       	mov	r0, r31
     46c:	fe ea       	ldi	r31, 0xAE	; 174
     46e:	af 2e       	mov	r10, r31
     470:	f1 e0       	ldi	r31, 0x01	; 1
     472:	bf 2e       	mov	r11, r31
     474:	f0 2d       	mov	r31, r0
							}
							
							sprintf(display5, "object position: %5d",pos[found]);
							serial_puts(display5);
						}
						sprintf(display, "object position: %5d		IR: %5d		object size: %5d",pos[found],TempIR[found],TempAngle[found]);
     476:	9e 01       	movw	r18, r28
     478:	2b 5f       	subi	r18, 0xFB	; 251
     47a:	3f 4f       	sbci	r19, 0xFF	; 255
     47c:	cf 54       	subi	r28, 0x4F	; 79
     47e:	de 4f       	sbci	r29, 0xFE	; 254
     480:	39 83       	std	Y+1, r19	; 0x01
     482:	28 83       	st	Y, r18
     484:	c1 5b       	subi	r28, 0xB1	; 177
     486:	d1 40       	sbci	r29, 0x01	; 1
			int pos[6] = {0, 0,0,0,0,0};
			int AddIR[6] = {0, 0, 0,0,0,0};
			int count[6] = {0, 0, 0,0,0,0};
			for (angle = 0;angle < 181;angle++)
			{	
				move_servo(angle);
     488:	c3 01       	movw	r24, r6
     48a:	0e 94 37 01 	call	0x26e	; 0x26e <move_servo>
				wait_ms(20);				
     48e:	84 e1       	ldi	r24, 0x14	; 20
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 fe 08 	call	0x11fc	; 0x11fc <wait_ms>
				
				IR = 0;
				IR = 42800*pow(ADC_read(2),-1.23);
     496:	82 e0       	ldi	r24, 0x02	; 2
     498:	0e 94 45 01 	call	0x28a	; 0x28a <ADC_read>
     49c:	bc 01       	movw	r22, r24
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__floatunsisf>
     4a6:	24 ea       	ldi	r18, 0xA4	; 164
     4a8:	30 e7       	ldi	r19, 0x70	; 112
     4aa:	4d e9       	ldi	r20, 0x9D	; 157
     4ac:	5f eb       	ldi	r21, 0xBF	; 191
     4ae:	0e 94 22 0a 	call	0x1444	; 0x1444 <pow>
     4b2:	20 e0       	ldi	r18, 0x00	; 0
     4b4:	30 e3       	ldi	r19, 0x30	; 48
     4b6:	47 e2       	ldi	r20, 0x27	; 39
     4b8:	57 e4       	ldi	r21, 0x47	; 71
     4ba:	0e 94 bf 09 	call	0x137e	; 0x137e <__mulsf3>
     4be:	0e 94 2d 09 	call	0x125a	; 0x125a <__fixunssfsi>
     4c2:	f6 2e       	mov	r15, r22
				
				sprintf(display6, "Angle: %5d		IR: %5d",angle,IR);
     4c4:	06 2f       	mov	r16, r22
     4c6:	10 e0       	ldi	r17, 0x00	; 0
     4c8:	1f 92       	push	r1
     4ca:	6f 93       	push	r22
     4cc:	7f 92       	push	r7
     4ce:	6f 92       	push	r6
     4d0:	bf 92       	push	r11
     4d2:	af 92       	push	r10
     4d4:	3f 92       	push	r3
     4d6:	2f 92       	push	r2
     4d8:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <sprintf>
				serial_puts(display6);
     4dc:	c1 54       	subi	r28, 0x41	; 65
     4de:	de 4f       	sbci	r29, 0xFE	; 254
     4e0:	88 81       	ld	r24, Y
     4e2:	cf 5b       	subi	r28, 0xBF	; 191
     4e4:	d1 40       	sbci	r29, 0x01	; 1
     4e6:	c0 54       	subi	r28, 0x40	; 64
     4e8:	de 4f       	sbci	r29, 0xFE	; 254
     4ea:	98 81       	ld	r25, Y
     4ec:	c0 5c       	subi	r28, 0xC0	; 192
     4ee:	d1 40       	sbci	r29, 0x01	; 1
     4f0:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <serial_puts>

				if (IR < 80)
     4f4:	0f b6       	in	r0, 0x3f	; 63
     4f6:	f8 94       	cli
     4f8:	de bf       	out	0x3e, r29	; 62
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	cd bf       	out	0x3d, r28	; 61
     4fe:	9f e4       	ldi	r25, 0x4F	; 79
     500:	9f 15       	cp	r25, r15
     502:	70 f1       	brcs	.+92     	; 0x560 <main+0x24e>
				{
				   TempAngle[found]++;
     504:	94 01       	movw	r18, r8
     506:	22 0f       	add	r18, r18
     508:	33 1f       	adc	r19, r19
     50a:	f2 01       	movw	r30, r4
     50c:	e2 0f       	add	r30, r18
     50e:	f3 1f       	adc	r31, r19
     510:	80 81       	ld	r24, Z
     512:	91 81       	ldd	r25, Z+1	; 0x01
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	91 83       	std	Z+1, r25	; 0x01
     518:	80 83       	st	Z, r24
				   count[found]++;
     51a:	e1 e8       	ldi	r30, 0x81	; 129
     51c:	f1 e0       	ldi	r31, 0x01	; 1
     51e:	ec 0f       	add	r30, r28
     520:	fd 1f       	adc	r31, r29
     522:	e2 0f       	add	r30, r18
     524:	f3 1f       	adc	r31, r19
     526:	60 81       	ld	r22, Z
     528:	71 81       	ldd	r23, Z+1	; 0x01
     52a:	6f 5f       	subi	r22, 0xFF	; 255
     52c:	7f 4f       	sbci	r23, 0xFF	; 255
     52e:	71 83       	std	Z+1, r23	; 0x01
     530:	60 83       	st	Z, r22
				   AddIR[found]+=IR;
     532:	ed e8       	ldi	r30, 0x8D	; 141
     534:	f1 e0       	ldi	r31, 0x01	; 1
     536:	ec 0f       	add	r30, r28
     538:	fd 1f       	adc	r31, r29
     53a:	e2 0f       	add	r30, r18
     53c:	f3 1f       	adc	r31, r19
     53e:	80 81       	ld	r24, Z
     540:	91 81       	ldd	r25, Z+1	; 0x01
     542:	80 0f       	add	r24, r16
     544:	91 1f       	adc	r25, r17
     546:	91 83       	std	Z+1, r25	; 0x01
     548:	80 83       	st	Z, r24
				   TempIR[found]=AddIR[found]/count[found];
     54a:	e9 e9       	ldi	r30, 0x99	; 153
     54c:	f1 e0       	ldi	r31, 0x01	; 1
     54e:	ec 0f       	add	r30, r28
     550:	fd 1f       	adc	r31, r29
     552:	e2 0f       	add	r30, r18
     554:	f3 1f       	adc	r31, r19
     556:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__divmodhi4>
     55a:	71 83       	std	Z+1, r23	; 0x01
     55c:	60 83       	st	Z, r22
     55e:	cd c0       	rjmp	.+410    	; 0x6fa <main+0x3e8>
				}
				
				else
				{
					if(TempAngle[found] < 5)
     560:	f4 01       	movw	r30, r8
     562:	ee 0f       	add	r30, r30
     564:	ff 1f       	adc	r31, r31
     566:	e4 0d       	add	r30, r4
     568:	f5 1d       	adc	r31, r5
     56a:	c0 80       	ld	r12, Z
     56c:	d1 80       	ldd	r13, Z+1	; 0x01
     56e:	e5 e0       	ldi	r30, 0x05	; 5
     570:	ce 16       	cp	r12, r30
     572:	d1 04       	cpc	r13, r1
     574:	44 f4       	brge	.+16     	; 0x586 <main+0x274>
					{
						TempAngle[found] = 0;
     576:	f4 01       	movw	r30, r8
     578:	ee 0f       	add	r30, r30
     57a:	ff 1f       	adc	r31, r31
     57c:	e4 0d       	add	r30, r4
     57e:	f5 1d       	adc	r31, r5
     580:	11 82       	std	Z+1, r1	; 0x01
     582:	10 82       	st	Z, r1
     584:	ba c0       	rjmp	.+372    	; 0x6fa <main+0x3e8>
					}
					
					else
					{
						pos[found] = angle- TempAngle[found]/2;
     586:	c6 01       	movw	r24, r12
     588:	dd 20       	and	r13, r13
     58a:	0c f4       	brge	.+2      	; 0x58e <main+0x27c>
     58c:	01 96       	adiw	r24, 0x01	; 1
     58e:	95 95       	asr	r25
     590:	87 95       	ror	r24
     592:	93 01       	movw	r18, r6
     594:	28 1b       	sub	r18, r24
     596:	39 0b       	sbc	r19, r25
     598:	cf 53       	subi	r28, 0x3F	; 63
     59a:	de 4f       	sbci	r29, 0xFE	; 254
     59c:	39 83       	std	Y+1, r19	; 0x01
     59e:	28 83       	st	Y, r18
     5a0:	c1 5c       	subi	r28, 0xC1	; 193
     5a2:	d1 40       	sbci	r29, 0x01	; 1
						if (TempIR[found]*TempAngle[found]< 460)
     5a4:	f4 01       	movw	r30, r8
     5a6:	ee 0f       	add	r30, r30
     5a8:	ff 1f       	adc	r31, r31
     5aa:	89 e9       	ldi	r24, 0x99	; 153
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	8c 0f       	add	r24, r28
     5b0:	9d 1f       	adc	r25, r29
     5b2:	e8 0f       	add	r30, r24
     5b4:	f9 1f       	adc	r31, r25
     5b6:	20 81       	ld	r18, Z
     5b8:	31 81       	ldd	r19, Z+1	; 0x01
     5ba:	c3 54       	subi	r28, 0x43	; 67
     5bc:	de 4f       	sbci	r29, 0xFE	; 254
     5be:	39 83       	std	Y+1, r19	; 0x01
     5c0:	28 83       	st	Y, r18
     5c2:	cd 5b       	subi	r28, 0xBD	; 189
     5c4:	d1 40       	sbci	r29, 0x01	; 1
     5c6:	c2 9e       	mul	r12, r18
     5c8:	c0 01       	movw	r24, r0
     5ca:	c3 9e       	mul	r12, r19
     5cc:	90 0d       	add	r25, r0
     5ce:	d2 9e       	mul	r13, r18
     5d0:	90 0d       	add	r25, r0
     5d2:	11 24       	eor	r1, r1
     5d4:	8c 3c       	cpi	r24, 0xCC	; 204
     5d6:	91 40       	sbci	r25, 0x01	; 1
     5d8:	0c f0       	brlt	.+2      	; 0x5dc <main+0x2ca>
     5da:	51 c0       	rjmp	.+162    	; 0x67e <main+0x36c>
						{
							USART_Transmit(13);
     5dc:	8d e0       	ldi	r24, 0x0D	; 13
     5de:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
							USART_Transmit(10);
     5e2:	8a e0       	ldi	r24, 0x0A	; 10
     5e4:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
     5e8:	0f 2e       	mov	r0, r31
     5ea:	f8 e0       	ldi	r31, 0x08	; 8
     5ec:	ef 2e       	mov	r14, r31
     5ee:	f1 e0       	ldi	r31, 0x01	; 1
     5f0:	ff 2e       	mov	r15, r31
     5f2:	f0 2d       	mov	r31, r0
							for (int i = 0;i<strlen(s8);i++)
     5f4:	00 e0       	ldi	r16, 0x00	; 0
     5f6:	10 e0       	ldi	r17, 0x00	; 0
     5f8:	07 c0       	rjmp	.+14     	; 0x608 <main+0x2f6>
							{
								USART_Transmit(s8[i]);
     5fa:	f7 01       	movw	r30, r14
     5fc:	81 91       	ld	r24, Z+
     5fe:	7f 01       	movw	r14, r30
     600:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
						pos[found] = angle- TempAngle[found]/2;
						if (TempIR[found]*TempAngle[found]< 460)
						{
							USART_Transmit(13);
							USART_Transmit(10);
							for (int i = 0;i<strlen(s8);i++)
     604:	0f 5f       	subi	r16, 0xFF	; 255
     606:	1f 4f       	sbci	r17, 0xFF	; 255
     608:	e8 e0       	ldi	r30, 0x08	; 8
     60a:	f1 e0       	ldi	r31, 0x01	; 1
     60c:	01 90       	ld	r0, Z+
     60e:	00 20       	and	r0, r0
     610:	e9 f7       	brne	.-6      	; 0x60c <main+0x2fa>
     612:	31 97       	sbiw	r30, 0x01	; 1
     614:	e8 50       	subi	r30, 0x08	; 8
     616:	f1 40       	sbci	r31, 0x01	; 1
     618:	0e 17       	cp	r16, r30
     61a:	1f 07       	cpc	r17, r31
     61c:	70 f3       	brcs	.-36     	; 0x5fa <main+0x2e8>
							{
								USART_Transmit(s8[i]);
							}
							
							sprintf(display5, "object position: %5d",pos[found]);
     61e:	ce 53       	subi	r28, 0x3E	; 62
     620:	de 4f       	sbci	r29, 0xFE	; 254
     622:	f8 81       	ld	r31, Y
     624:	c2 5c       	subi	r28, 0xC2	; 194
     626:	d1 40       	sbci	r29, 0x01	; 1
     628:	ff 93       	push	r31
     62a:	cf 53       	subi	r28, 0x3F	; 63
     62c:	de 4f       	sbci	r29, 0xFE	; 254
     62e:	28 81       	ld	r18, Y
     630:	c1 5c       	subi	r28, 0xC1	; 193
     632:	d1 40       	sbci	r29, 0x01	; 1
     634:	2f 93       	push	r18
     636:	82 ec       	ldi	r24, 0xC2	; 194
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	9f 93       	push	r25
     63c:	8f 93       	push	r24
     63e:	c6 54       	subi	r28, 0x46	; 70
     640:	de 4f       	sbci	r29, 0xFE	; 254
     642:	f8 81       	ld	r31, Y
     644:	ca 5b       	subi	r28, 0xBA	; 186
     646:	d1 40       	sbci	r29, 0x01	; 1
     648:	ff 93       	push	r31
     64a:	c7 54       	subi	r28, 0x47	; 71
     64c:	de 4f       	sbci	r29, 0xFE	; 254
     64e:	28 81       	ld	r18, Y
     650:	c9 5b       	subi	r28, 0xB9	; 185
     652:	d1 40       	sbci	r29, 0x01	; 1
     654:	2f 93       	push	r18
     656:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <sprintf>
							serial_puts(display5);
     65a:	cc 53       	subi	r28, 0x3C	; 60
     65c:	de 4f       	sbci	r29, 0xFE	; 254
     65e:	88 81       	ld	r24, Y
     660:	c4 5c       	subi	r28, 0xC4	; 196
     662:	d1 40       	sbci	r29, 0x01	; 1
     664:	cb 53       	subi	r28, 0x3B	; 59
     666:	de 4f       	sbci	r29, 0xFE	; 254
     668:	98 81       	ld	r25, Y
     66a:	c5 5c       	subi	r28, 0xC5	; 197
     66c:	d1 40       	sbci	r29, 0x01	; 1
     66e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <serial_puts>
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
						}
						sprintf(display, "object position: %5d		IR: %5d		object size: %5d",pos[found],TempIR[found],TempAngle[found]);
     67e:	df 92       	push	r13
     680:	cf 92       	push	r12
     682:	c2 54       	subi	r28, 0x42	; 66
     684:	de 4f       	sbci	r29, 0xFE	; 254
     686:	38 81       	ld	r19, Y
     688:	ce 5b       	subi	r28, 0xBE	; 190
     68a:	d1 40       	sbci	r29, 0x01	; 1
     68c:	3f 93       	push	r19
     68e:	c3 54       	subi	r28, 0x43	; 67
     690:	de 4f       	sbci	r29, 0xFE	; 254
     692:	88 81       	ld	r24, Y
     694:	cd 5b       	subi	r28, 0xBD	; 189
     696:	d1 40       	sbci	r29, 0x01	; 1
     698:	8f 93       	push	r24
     69a:	ce 53       	subi	r28, 0x3E	; 62
     69c:	de 4f       	sbci	r29, 0xFE	; 254
     69e:	98 81       	ld	r25, Y
     6a0:	c2 5c       	subi	r28, 0xC2	; 194
     6a2:	d1 40       	sbci	r29, 0x01	; 1
     6a4:	9f 93       	push	r25
     6a6:	cf 53       	subi	r28, 0x3F	; 63
     6a8:	de 4f       	sbci	r29, 0xFE	; 254
     6aa:	e8 81       	ld	r30, Y
     6ac:	c1 5c       	subi	r28, 0xC1	; 193
     6ae:	d1 40       	sbci	r29, 0x01	; 1
     6b0:	ef 93       	push	r30
     6b2:	27 ed       	ldi	r18, 0xD7	; 215
     6b4:	31 e0       	ldi	r19, 0x01	; 1
     6b6:	3f 93       	push	r19
     6b8:	2f 93       	push	r18
     6ba:	ce 54       	subi	r28, 0x4E	; 78
     6bc:	de 4f       	sbci	r29, 0xFE	; 254
     6be:	98 81       	ld	r25, Y
     6c0:	c2 5b       	subi	r28, 0xB2	; 178
     6c2:	d1 40       	sbci	r29, 0x01	; 1
     6c4:	9f 93       	push	r25
     6c6:	cf 54       	subi	r28, 0x4F	; 79
     6c8:	de 4f       	sbci	r29, 0xFE	; 254
     6ca:	e8 81       	ld	r30, Y
     6cc:	c1 5b       	subi	r28, 0xB1	; 177
     6ce:	d1 40       	sbci	r29, 0x01	; 1
     6d0:	ef 93       	push	r30
     6d2:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <sprintf>
						serial_puts(display);
     6d6:	ce 01       	movw	r24, r28
     6d8:	05 96       	adiw	r24, 0x05	; 5
     6da:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <serial_puts>
						USART_Transmit(13);
     6de:	8d e0       	ldi	r24, 0x0D	; 13
     6e0:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
						USART_Transmit(10);
     6e4:	8a e0       	ldi	r24, 0x0A	; 10
     6e6:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
						found++;
     6ea:	ff ef       	ldi	r31, 0xFF	; 255
     6ec:	8f 1a       	sub	r8, r31
     6ee:	9f 0a       	sbc	r9, r31
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	f8 94       	cli
     6f4:	de bf       	out	0x3e, r29	; 62
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	cd bf       	out	0x3d, r28	; 61
			int TempAngle[6] = {0, 0,0,0,0,0};
			int TempIR[6] = {0, 0,0,0,0,0};
			int pos[6] = {0, 0,0,0,0,0};
			int AddIR[6] = {0, 0, 0,0,0,0};
			int count[6] = {0, 0, 0,0,0,0};
			for (angle = 0;angle < 181;angle++)
     6fa:	3f ef       	ldi	r19, 0xFF	; 255
     6fc:	63 1a       	sub	r6, r19
     6fe:	73 0a       	sbc	r7, r19
     700:	85 eb       	ldi	r24, 0xB5	; 181
     702:	68 16       	cp	r6, r24
     704:	71 04       	cpc	r7, r1
     706:	09 f0       	breq	.+2      	; 0x70a <main+0x3f8>
     708:	bf ce       	rjmp	.-642    	; 0x488 <main+0x176>
						USART_Transmit(10);
						found++;
					}	
			     }
			}
			OCR3B = 1000-1;				//return to 0 degree	
     70a:	87 ee       	ldi	r24, 0xE7	; 231
     70c:	93 e0       	ldi	r25, 0x03	; 3
     70e:	90 93 85 00 	sts	0x0085, r25
     712:	80 93 84 00 	sts	0x0084, r24
     716:	24 c0       	rjmp	.+72     	; 0x760 <main+0x44e>
		}				

		 if (command == 'w')
     718:	cd 53       	subi	r28, 0x3D	; 61
     71a:	de 4f       	sbci	r29, 0xFE	; 254
     71c:	98 81       	ld	r25, Y
     71e:	c3 5c       	subi	r28, 0xC3	; 195
     720:	d1 40       	sbci	r29, 0x01	; 1
     722:	97 37       	cpi	r25, 0x77	; 119
     724:	59 f4       	brne	.+22     	; 0x73c <main+0x42a>
		 {
			 move_forward(sensor_data,20);
     726:	64 e1       	ldi	r22, 0x14	; 20
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	ca 53       	subi	r28, 0x3A	; 58
     72c:	de 4f       	sbci	r29, 0xFE	; 254
     72e:	88 81       	ld	r24, Y
     730:	99 81       	ldd	r25, Y+1	; 0x01
     732:	c6 5c       	subi	r28, 0xC6	; 198
     734:	d1 40       	sbci	r29, 0x01	; 1
     736:	0e 94 80 05 	call	0xb00	; 0xb00 <move_forward>
     73a:	24 c0       	rjmp	.+72     	; 0x784 <main+0x472>
		 }
		 if (command == 's')
     73c:	cd 53       	subi	r28, 0x3D	; 61
     73e:	de 4f       	sbci	r29, 0xFE	; 254
     740:	e8 81       	ld	r30, Y
     742:	c3 5c       	subi	r28, 0xC3	; 195
     744:	d1 40       	sbci	r29, 0x01	; 1
     746:	e3 37       	cpi	r30, 0x73	; 115
     748:	59 f4       	brne	.+22     	; 0x760 <main+0x44e>
		 {
			 move_backforward(sensor_data,20);
     74a:	64 e1       	ldi	r22, 0x14	; 20
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	ca 53       	subi	r28, 0x3A	; 58
     750:	de 4f       	sbci	r29, 0xFE	; 254
     752:	88 81       	ld	r24, Y
     754:	99 81       	ldd	r25, Y+1	; 0x01
     756:	c6 5c       	subi	r28, 0xC6	; 198
     758:	d1 40       	sbci	r29, 0x01	; 1
     75a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <move_backforward>
     75e:	24 c0       	rjmp	.+72     	; 0x7a8 <main+0x496>
		 }
		 if (command == 'a')
     760:	cd 53       	subi	r28, 0x3D	; 61
     762:	de 4f       	sbci	r29, 0xFE	; 254
     764:	f8 81       	ld	r31, Y
     766:	c3 5c       	subi	r28, 0xC3	; 195
     768:	d1 40       	sbci	r29, 0x01	; 1
     76a:	f1 36       	cpi	r31, 0x61	; 97
     76c:	59 f4       	brne	.+22     	; 0x784 <main+0x472>
		 {
			turn_clockwise(sensor_data,82);
     76e:	62 e5       	ldi	r22, 0x52	; 82
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	ca 53       	subi	r28, 0x3A	; 58
     774:	de 4f       	sbci	r29, 0xFE	; 254
     776:	88 81       	ld	r24, Y
     778:	99 81       	ldd	r25, Y+1	; 0x01
     77a:	c6 5c       	subi	r28, 0xC6	; 198
     77c:	d1 40       	sbci	r29, 0x01	; 1
     77e:	0e 94 0b 07 	call	0xe16	; 0xe16 <turn_clockwise>
     782:	24 c0       	rjmp	.+72     	; 0x7cc <main+0x4ba>
		 }
		 if (command == 'd')
     784:	cd 53       	subi	r28, 0x3D	; 61
     786:	de 4f       	sbci	r29, 0xFE	; 254
     788:	28 81       	ld	r18, Y
     78a:	c3 5c       	subi	r28, 0xC3	; 195
     78c:	d1 40       	sbci	r29, 0x01	; 1
     78e:	24 36       	cpi	r18, 0x64	; 100
     790:	59 f4       	brne	.+22     	; 0x7a8 <main+0x496>
		 {
			turn_counterclockwise(sensor_data,82);
     792:	62 e5       	ldi	r22, 0x52	; 82
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	ca 53       	subi	r28, 0x3A	; 58
     798:	de 4f       	sbci	r29, 0xFE	; 254
     79a:	88 81       	ld	r24, Y
     79c:	99 81       	ldd	r25, Y+1	; 0x01
     79e:	c6 5c       	subi	r28, 0xC6	; 198
     7a0:	d1 40       	sbci	r29, 0x01	; 1
     7a2:	0e 94 36 07 	call	0xe6c	; 0xe6c <turn_counterclockwise>
     7a6:	24 c0       	rjmp	.+72     	; 0x7f0 <main+0x4de>
		 }
		 if (command == 'q')
     7a8:	cd 53       	subi	r28, 0x3D	; 61
     7aa:	de 4f       	sbci	r29, 0xFE	; 254
     7ac:	38 81       	ld	r19, Y
     7ae:	c3 5c       	subi	r28, 0xC3	; 195
     7b0:	d1 40       	sbci	r29, 0x01	; 1
     7b2:	31 37       	cpi	r19, 0x71	; 113
     7b4:	59 f4       	brne	.+22     	; 0x7cc <main+0x4ba>
		 {
			 turn_clockwise(sensor_data,38);
     7b6:	66 e2       	ldi	r22, 0x26	; 38
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	ca 53       	subi	r28, 0x3A	; 58
     7bc:	de 4f       	sbci	r29, 0xFE	; 254
     7be:	88 81       	ld	r24, Y
     7c0:	99 81       	ldd	r25, Y+1	; 0x01
     7c2:	c6 5c       	subi	r28, 0xC6	; 198
     7c4:	d1 40       	sbci	r29, 0x01	; 1
     7c6:	0e 94 0b 07 	call	0xe16	; 0xe16 <turn_clockwise>
     7ca:	24 c0       	rjmp	.+72     	; 0x814 <main+0x502>
		 }
		 if (command == 'e')
     7cc:	cd 53       	subi	r28, 0x3D	; 61
     7ce:	de 4f       	sbci	r29, 0xFE	; 254
     7d0:	88 81       	ld	r24, Y
     7d2:	c3 5c       	subi	r28, 0xC3	; 195
     7d4:	d1 40       	sbci	r29, 0x01	; 1
     7d6:	85 36       	cpi	r24, 0x65	; 101
     7d8:	59 f4       	brne	.+22     	; 0x7f0 <main+0x4de>
		 {
			 turn_counterclockwise(sensor_data, 38);
     7da:	66 e2       	ldi	r22, 0x26	; 38
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	ca 53       	subi	r28, 0x3A	; 58
     7e0:	de 4f       	sbci	r29, 0xFE	; 254
     7e2:	88 81       	ld	r24, Y
     7e4:	99 81       	ldd	r25, Y+1	; 0x01
     7e6:	c6 5c       	subi	r28, 0xC6	; 198
     7e8:	d1 40       	sbci	r29, 0x01	; 1
     7ea:	0e 94 36 07 	call	0xe6c	; 0xe6c <turn_counterclockwise>
     7ee:	24 c0       	rjmp	.+72     	; 0x838 <main+0x526>
		 }
		 if (command == '8')
     7f0:	cd 53       	subi	r28, 0x3D	; 61
     7f2:	de 4f       	sbci	r29, 0xFE	; 254
     7f4:	98 81       	ld	r25, Y
     7f6:	c3 5c       	subi	r28, 0xC3	; 195
     7f8:	d1 40       	sbci	r29, 0x01	; 1
     7fa:	98 33       	cpi	r25, 0x38	; 56
     7fc:	59 f4       	brne	.+22     	; 0x814 <main+0x502>
		 {
			 move_forward(sensor_data,5);
     7fe:	65 e0       	ldi	r22, 0x05	; 5
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	ca 53       	subi	r28, 0x3A	; 58
     804:	de 4f       	sbci	r29, 0xFE	; 254
     806:	88 81       	ld	r24, Y
     808:	99 81       	ldd	r25, Y+1	; 0x01
     80a:	c6 5c       	subi	r28, 0xC6	; 198
     80c:	d1 40       	sbci	r29, 0x01	; 1
     80e:	0e 94 80 05 	call	0xb00	; 0xb00 <move_forward>
     812:	24 c0       	rjmp	.+72     	; 0x85c <main+0x54a>
		 }
		 if (command == '5')
     814:	cd 53       	subi	r28, 0x3D	; 61
     816:	de 4f       	sbci	r29, 0xFE	; 254
     818:	e8 81       	ld	r30, Y
     81a:	c3 5c       	subi	r28, 0xC3	; 195
     81c:	d1 40       	sbci	r29, 0x01	; 1
     81e:	e5 33       	cpi	r30, 0x35	; 53
     820:	59 f4       	brne	.+22     	; 0x838 <main+0x526>
		 {
			 move_backforward(sensor_data,5);
     822:	65 e0       	ldi	r22, 0x05	; 5
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	ca 53       	subi	r28, 0x3A	; 58
     828:	de 4f       	sbci	r29, 0xFE	; 254
     82a:	88 81       	ld	r24, Y
     82c:	99 81       	ldd	r25, Y+1	; 0x01
     82e:	c6 5c       	subi	r28, 0xC6	; 198
     830:	d1 40       	sbci	r29, 0x01	; 1
     832:	0e 94 4f 05 	call	0xa9e	; 0xa9e <move_backforward>
     836:	e1 cd       	rjmp	.-1086   	; 0x3fa <main+0xe8>
		 }
		 if (command == 'p')
     838:	cd 53       	subi	r28, 0x3D	; 61
     83a:	de 4f       	sbci	r29, 0xFE	; 254
     83c:	f8 81       	ld	r31, Y
     83e:	c3 5c       	subi	r28, 0xC3	; 195
     840:	d1 40       	sbci	r29, 0x01	; 1
     842:	f0 37       	cpi	r31, 0x70	; 112
     844:	59 f4       	brne	.+22     	; 0x85c <main+0x54a>
		 {
			 oi_t* sensor = oi_alloc();
     846:	0e 94 62 07 	call	0xec4	; 0xec4 <oi_alloc>
			 oi_init(sensor);
     84a:	0e 94 96 08 	call	0x112c	; 0x112c <oi_init>
			 
			 load_songs();
     84e:	0e 94 56 01 	call	0x2ac	; 0x2ac <load_songs>
			 oi_play_song(songings);
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0e 94 71 07 	call	0xee2	; 0xee2 <oi_play_song>
     85a:	cf cd       	rjmp	.-1122   	; 0x3fa <main+0xe8>
		 }
		 if(command == 'k')
     85c:	cd 53       	subi	r28, 0x3D	; 61
     85e:	de 4f       	sbci	r29, 0xFE	; 254
     860:	28 81       	ld	r18, Y
     862:	c3 5c       	subi	r28, 0xC3	; 195
     864:	d1 40       	sbci	r29, 0x01	; 1
     866:	2b 36       	cpi	r18, 0x6B	; 107
     868:	09 f0       	breq	.+2      	; 0x86c <main+0x55a>
     86a:	c7 cd       	rjmp	.-1138   	; 0x3fa <main+0xe8>
		 {
			oi_update(sensor_data);
     86c:	ca 53       	subi	r28, 0x3A	; 58
     86e:	de 4f       	sbci	r29, 0xFE	; 254
     870:	88 81       	ld	r24, Y
     872:	99 81       	ldd	r25, Y+1	; 0x01
     874:	c6 5c       	subi	r28, 0xC6	; 198
     876:	d1 40       	sbci	r29, 0x01	; 1
     878:	0e 94 f7 07 	call	0xfee	; 0xfee <oi_update>
			x1 = sensor_data->cliff_left_signal;
     87c:	ca 53       	subi	r28, 0x3A	; 58
     87e:	de 4f       	sbci	r29, 0xFE	; 254
     880:	e8 81       	ld	r30, Y
     882:	f9 81       	ldd	r31, Y+1	; 0x01
     884:	c6 5c       	subi	r28, 0xC6	; 198
     886:	d1 40       	sbci	r29, 0x01	; 1
     888:	a4 8c       	ldd	r10, Z+28	; 0x1c
     88a:	b5 8c       	ldd	r11, Z+29	; 0x1d
			x2 = sensor_data->cliff_right_signal;
     88c:	82 a0       	ldd	r8, Z+34	; 0x22
     88e:	93 a0       	ldd	r9, Z+35	; 0x23
			x3 = sensor_data->cliff_frontleft_signal;
     890:	66 8c       	ldd	r6, Z+30	; 0x1e
     892:	77 8c       	ldd	r7, Z+31	; 0x1f
			x4 = sensor_data->cliff_frontright_signal; 
     894:	20 a1       	ldd	r18, Z+32	; 0x20
     896:	31 a1       	ldd	r19, Z+33	; 0x21
     898:	c3 54       	subi	r28, 0x43	; 67
     89a:	de 4f       	sbci	r29, 0xFE	; 254
     89c:	39 83       	std	Y+1, r19	; 0x01
     89e:	28 83       	st	Y, r18
     8a0:	cd 5b       	subi	r28, 0xBD	; 189
     8a2:	d1 40       	sbci	r29, 0x01	; 1
			sprintf (display1, "left        = %d",x1);
     8a4:	bf 92       	push	r11
     8a6:	af 92       	push	r10
     8a8:	87 e0       	ldi	r24, 0x07	; 7
     8aa:	92 e0       	ldi	r25, 0x02	; 2
     8ac:	9f 93       	push	r25
     8ae:	8f 93       	push	r24
     8b0:	c4 54       	subi	r28, 0x44	; 68
     8b2:	de 4f       	sbci	r29, 0xFE	; 254
     8b4:	38 81       	ld	r19, Y
     8b6:	cc 5b       	subi	r28, 0xBC	; 188
     8b8:	d1 40       	sbci	r29, 0x01	; 1
     8ba:	3f 93       	push	r19
     8bc:	c5 54       	subi	r28, 0x45	; 69
     8be:	de 4f       	sbci	r29, 0xFE	; 254
     8c0:	88 81       	ld	r24, Y
     8c2:	cb 5b       	subi	r28, 0xBB	; 187
     8c4:	d1 40       	sbci	r29, 0x01	; 1
     8c6:	8f 93       	push	r24
     8c8:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <sprintf>
			sprintf (display2, "right       = %d",x2);
     8cc:	9f 92       	push	r9
     8ce:	8f 92       	push	r8
     8d0:	88 e1       	ldi	r24, 0x18	; 24
     8d2:	92 e0       	ldi	r25, 0x02	; 2
     8d4:	9f 93       	push	r25
     8d6:	8f 93       	push	r24
     8d8:	8e 01       	movw	r16, r28
     8da:	03 58       	subi	r16, 0x83	; 131
     8dc:	1f 4f       	sbci	r17, 0xFF	; 255
     8de:	1f 93       	push	r17
     8e0:	0f 93       	push	r16
     8e2:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <sprintf>
			sprintf (display3, "front left  = %d",x3);
     8e6:	7f 92       	push	r7
     8e8:	6f 92       	push	r6
     8ea:	89 e2       	ldi	r24, 0x29	; 41
     8ec:	92 e0       	ldi	r25, 0x02	; 2
     8ee:	9f 93       	push	r25
     8f0:	8f 93       	push	r24
     8f2:	6e 01       	movw	r12, r28
     8f4:	91 e9       	ldi	r25, 0x91	; 145
     8f6:	c9 0e       	add	r12, r25
     8f8:	d1 1c       	adc	r13, r1
     8fa:	df 92       	push	r13
     8fc:	cf 92       	push	r12
     8fe:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <sprintf>
			sprintf (display4, "front right = %d",x4);
     902:	c2 54       	subi	r28, 0x42	; 66
     904:	de 4f       	sbci	r29, 0xFE	; 254
     906:	e8 81       	ld	r30, Y
     908:	ce 5b       	subi	r28, 0xBE	; 190
     90a:	d1 40       	sbci	r29, 0x01	; 1
     90c:	ef 93       	push	r30
     90e:	c3 54       	subi	r28, 0x43	; 67
     910:	de 4f       	sbci	r29, 0xFE	; 254
     912:	f8 81       	ld	r31, Y
     914:	cd 5b       	subi	r28, 0xBD	; 189
     916:	d1 40       	sbci	r29, 0x01	; 1
     918:	ff 93       	push	r31
     91a:	8a e3       	ldi	r24, 0x3A	; 58
     91c:	92 e0       	ldi	r25, 0x02	; 2
     91e:	9f 93       	push	r25
     920:	8f 93       	push	r24
     922:	7e 01       	movw	r14, r28
     924:	25 ea       	ldi	r18, 0xA5	; 165
     926:	e2 0e       	add	r14, r18
     928:	f1 1c       	adc	r15, r1
     92a:	ff 92       	push	r15
     92c:	ef 92       	push	r14
     92e:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <sprintf>
			USART_Transmit(13);
     932:	8d e0       	ldi	r24, 0x0D	; 13
     934:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
			USART_Transmit(10);
     938:	8a e0       	ldi	r24, 0x0A	; 10
     93a:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
	        serial_puts(display1);
     93e:	ce 01       	movw	r24, r28
     940:	87 59       	subi	r24, 0x97	; 151
     942:	9f 4f       	sbci	r25, 0xFF	; 255
     944:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <serial_puts>
	        serial_puts(display3);
     948:	c6 01       	movw	r24, r12
     94a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <serial_puts>
	        serial_puts(display4);			
     94e:	c7 01       	movw	r24, r14
     950:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <serial_puts>
			serial_puts(display2);
     954:	c8 01       	movw	r24, r16
     956:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <serial_puts>
			if (x1>500||x2>500||x3>500||x4>500)
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	f8 94       	cli
     95e:	de bf       	out	0x3e, r29	; 62
     960:	0f be       	out	0x3f, r0	; 63
     962:	cd bf       	out	0x3d, r28	; 61
     964:	95 ef       	ldi	r25, 0xF5	; 245
     966:	a9 16       	cp	r10, r25
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	b9 06       	cpc	r11, r25
     96c:	a4 f4       	brge	.+40     	; 0x996 <main+0x684>
     96e:	e5 ef       	ldi	r30, 0xF5	; 245
     970:	8e 16       	cp	r8, r30
     972:	e1 e0       	ldi	r30, 0x01	; 1
     974:	9e 06       	cpc	r9, r30
     976:	7c f4       	brge	.+30     	; 0x996 <main+0x684>
     978:	f5 ef       	ldi	r31, 0xF5	; 245
     97a:	6f 16       	cp	r6, r31
     97c:	f1 e0       	ldi	r31, 0x01	; 1
     97e:	7f 06       	cpc	r7, r31
     980:	54 f4       	brge	.+20     	; 0x996 <main+0x684>
     982:	c3 54       	subi	r28, 0x43	; 67
     984:	de 4f       	sbci	r29, 0xFE	; 254
     986:	28 81       	ld	r18, Y
     988:	39 81       	ldd	r19, Y+1	; 0x01
     98a:	cd 5b       	subi	r28, 0xBD	; 189
     98c:	d1 40       	sbci	r29, 0x01	; 1
     98e:	25 3f       	cpi	r18, 0xF5	; 245
     990:	31 40       	sbci	r19, 0x01	; 1
     992:	0c f4       	brge	.+2      	; 0x996 <main+0x684>
     994:	32 cd       	rjmp	.-1436   	; 0x3fa <main+0xe8>
			{
				USART_Transmit(13);
     996:	8d e0       	ldi	r24, 0x0D	; 13
     998:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
				USART_Transmit(10);
     99c:	8a e0       	ldi	r24, 0x0A	; 10
     99e:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
     9a2:	0f e1       	ldi	r16, 0x1F	; 31
     9a4:	11 e0       	ldi	r17, 0x01	; 1
				for (int i=0;i<strlen(s6);i++)
     9a6:	c1 2c       	mov	r12, r1
     9a8:	d1 2c       	mov	r13, r1
     9aa:	78 01       	movw	r14, r16
     9ac:	08 c0       	rjmp	.+16     	; 0x9be <main+0x6ac>
				{
					USART_Transmit(s6[i]);
     9ae:	f8 01       	movw	r30, r16
     9b0:	81 91       	ld	r24, Z+
     9b2:	8f 01       	movw	r16, r30
     9b4:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
			serial_puts(display2);
			if (x1>500||x2>500||x3>500||x4>500)
			{
				USART_Transmit(13);
				USART_Transmit(10);
				for (int i=0;i<strlen(s6);i++)
     9b8:	ff ef       	ldi	r31, 0xFF	; 255
     9ba:	cf 1a       	sub	r12, r31
     9bc:	df 0a       	sbc	r13, r31
     9be:	f7 01       	movw	r30, r14
     9c0:	01 90       	ld	r0, Z+
     9c2:	00 20       	and	r0, r0
     9c4:	e9 f7       	brne	.-6      	; 0x9c0 <main+0x6ae>
     9c6:	31 97       	sbiw	r30, 0x01	; 1
     9c8:	ef 51       	subi	r30, 0x1F	; 31
     9ca:	f1 40       	sbci	r31, 0x01	; 1
     9cc:	ce 16       	cp	r12, r30
     9ce:	df 06       	cpc	r13, r31
     9d0:	70 f3       	brcs	.-36     	; 0x9ae <main+0x69c>
     9d2:	13 cd       	rjmp	.-1498   	; 0x3fa <main+0xe8>

000009d4 <lcd_toggle_clear>:

/// Triggers loading of bits by LCD controller and clears bits after toggle
void lcd_toggle_clear(char delay) {
	const char enable=0x40; //PA6 is tied to Enable

	PORTA|=enable;
     9d4:	de 9a       	sbi	0x1b, 6	; 27
	wait_ms(delay);
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	0e 94 fe 08 	call	0x11fc	; 0x11fc <wait_ms>
	PORTA&=~enable;
     9dc:	de 98       	cbi	0x1b, 6	; 27
	PORTA&=0xF0;	
     9de:	8b b3       	in	r24, 0x1b	; 27
     9e0:	80 7f       	andi	r24, 0xF0	; 240
     9e2:	8b bb       	out	0x1b, r24	; 27
     9e4:	08 95       	ret

000009e6 <lcd_command>:
}


/// Submits command to LCD controller
void lcd_command(char data) {
     9e6:	cf 93       	push	r28
     9e8:	c8 2f       	mov	r28, r24
	const char rs=0x10;		//PA4 is tied to Register Select
	PORTA&=~rs;  //Setting register select low for command mode
     9ea:	dc 98       	cbi	0x1b, 4	; 27
	PORTA|=(data>>4);
     9ec:	8b b3       	in	r24, 0x1b	; 27
     9ee:	9c 2f       	mov	r25, r28
     9f0:	92 95       	swap	r25
     9f2:	9f 70       	andi	r25, 0x0F	; 15
     9f4:	89 2b       	or	r24, r25
     9f6:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(2);
     9f8:	82 e0       	ldi	r24, 0x02	; 2
     9fa:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <lcd_toggle_clear>
	PORTA|=(data & 0x0F);
     9fe:	8b b3       	in	r24, 0x1b	; 27
     a00:	cf 70       	andi	r28, 0x0F	; 15
     a02:	c8 2b       	or	r28, r24
     a04:	cb bb       	out	0x1b, r28	; 27
	lcd_toggle_clear(2);
     a06:	82 e0       	ldi	r24, 0x02	; 2
     a08:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <lcd_toggle_clear>
	PORTA|=rs;	//Setting register select high for character mode
     a0c:	dc 9a       	sbi	0x1b, 4	; 27
}
     a0e:	cf 91       	pop	r28
     a10:	08 95       	ret

00000a12 <lcd_home_line1>:



/// Sets character position to first line first position
void lcd_home_line1(void) {
	lcd_command(HD_RETURN_HOME);
     a12:	82 e0       	ldi	r24, 0x02	; 2
     a14:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <lcd_command>
     a18:	08 95       	ret

00000a1a <lcd_init>:
void lcd_init(void) {
	const char enable=0x40; //PA6 is tied to Enable
	const char rs=0x10;		//PA4 is tied to Register Select
	//Assumes Port A is dedicated to the LCD
	//Seven Pins needed, but will assume all 8 are used
	DDRA=0xFF; //Setting Port A for OutPut
     a1a:	8f ef       	ldi	r24, 0xFF	; 255
     a1c:	8a bb       	out	0x1a, r24	; 26
	 //Preparing to put HD44780 into 4-bit Mod
	PORTA=0x03;
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	8b bb       	out	0x1b, r24	; 27

	PORTA|=enable;
     a22:	de 9a       	sbi	0x1b, 6	; 27
	wait_ms(1);
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 fe 08 	call	0x11fc	; 0x11fc <wait_ms>
	PORTA&=~enable;
     a2c:	de 98       	cbi	0x1b, 6	; 27
	wait_ms(5);
     a2e:	85 e0       	ldi	r24, 0x05	; 5
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 fe 08 	call	0x11fc	; 0x11fc <wait_ms>
	PORTA|=enable;
     a36:	de 9a       	sbi	0x1b, 6	; 27
	wait_ms(1);
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 fe 08 	call	0x11fc	; 0x11fc <wait_ms>
	PORTA&=~enable;
     a40:	de 98       	cbi	0x1b, 6	; 27
	PORTA|=enable;
     a42:	de 9a       	sbi	0x1b, 6	; 27
	wait_ms(1);
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 fe 08 	call	0x11fc	; 0x11fc <wait_ms>
	PORTA&=~enable;
     a4c:	de 98       	cbi	0x1b, 6	; 27

	PORTA=0x02;	//setting controller to 4 bit mode
     a4e:	82 e0       	ldi	r24, 0x02	; 2
     a50:	8b bb       	out	0x1b, r24	; 27
				//Need to set for 2 lines
	lcd_toggle_clear(1);
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <lcd_toggle_clear>

	PORTA|=0x00;  //setting disp on, cursor on, blink off
     a58:	8b b3       	in	r24, 0x1b	; 27
     a5a:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <lcd_toggle_clear>
	PORTA|=0x0E;
     a62:	8b b3       	in	r24, 0x1b	; 27
     a64:	8e 60       	ori	r24, 0x0E	; 14
     a66:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <lcd_toggle_clear>

	PORTA|=0x00; //increment cursor, no display shift
     a6e:	8b b3       	in	r24, 0x1b	; 27
     a70:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <lcd_toggle_clear>
	PORTA|=0x06;
     a78:	8b b3       	in	r24, 0x1b	; 27
     a7a:	86 60       	ori	r24, 0x06	; 6
     a7c:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <lcd_toggle_clear>
	
	PORTA|=0x00; //clear LCD
     a84:	8b b3       	in	r24, 0x1b	; 27
     a86:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <lcd_toggle_clear>
	PORTA|=0x01;
     a8e:	d8 9a       	sbi	0x1b, 0	; 27
	lcd_toggle_clear(1);
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <lcd_toggle_clear>

	PORTA|=rs;	//Setting Register select high to enable character mode
     a96:	dc 9a       	sbi	0x1b, 4	; 27
	lcd_home_line1();
     a98:	0e 94 09 05 	call	0xa12	; 0xa12 <lcd_home_line1>
     a9c:	08 95       	ret

00000a9e <move_backforward>:
*	@param sensor the robot to be moved
*   @param centimeters the distance robot moved.
**/

void move_backforward(oi_t *sensor, int centimeters)
{
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	8c 01       	movw	r16, r24
     aac:	eb 01       	movw	r28, r22
	int sum = 0;
	oi_set_wheels(-100,-100);
     aae:	6c e9       	ldi	r22, 0x9C	; 156
     ab0:	7f ef       	ldi	r23, 0xFF	; 255
     ab2:	8c e9       	ldi	r24, 0x9C	; 156
     ab4:	9f ef       	ldi	r25, 0xFF	; 255
     ab6:	0e 94 af 07 	call	0xf5e	; 0xf5e <oi_set_wheels>
	while(sum>-10*centimeters)
     aba:	26 ef       	ldi	r18, 0xF6	; 246
     abc:	ae 01       	movw	r20, r28
     abe:	24 03       	mulsu	r18, r20
     ac0:	70 01       	movw	r14, r0
     ac2:	25 9f       	mul	r18, r21
     ac4:	f0 0c       	add	r15, r0
     ac6:	11 24       	eor	r1, r1
     ac8:	ff 20       	and	r15, r15
     aca:	6c f4       	brge	.+26     	; 0xae6 <move_backforward+0x48>
*   @param centimeters the distance robot moved.
**/

void move_backforward(oi_t *sensor, int centimeters)
{
	int sum = 0;
     acc:	c0 e0       	ldi	r28, 0x00	; 0
     ace:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels(-100,-100);
	while(sum>-10*centimeters)
	{
		oi_update(sensor);
     ad0:	c8 01       	movw	r24, r16
     ad2:	0e 94 f7 07 	call	0xfee	; 0xfee <oi_update>
		sum+=sensor->distance;
     ad6:	f8 01       	movw	r30, r16
     ad8:	84 85       	ldd	r24, Z+12	; 0x0c
     ada:	95 85       	ldd	r25, Z+13	; 0x0d
     adc:	c8 0f       	add	r28, r24
     ade:	d9 1f       	adc	r29, r25

void move_backforward(oi_t *sensor, int centimeters)
{
	int sum = 0;
	oi_set_wheels(-100,-100);
	while(sum>-10*centimeters)
     ae0:	ec 16       	cp	r14, r28
     ae2:	fd 06       	cpc	r15, r29
     ae4:	ac f3       	brlt	.-22     	; 0xad0 <move_backforward+0x32>
	{
		oi_update(sensor);
		sum+=sensor->distance;
	}
	///stop after the movement
	oi_set_wheels(0,0);
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	0e 94 af 07 	call	0xf5e	; 0xf5e <oi_set_wheels>
}
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	1f 91       	pop	r17
     af8:	0f 91       	pop	r16
     afa:	ff 90       	pop	r15
     afc:	ef 90       	pop	r14
     afe:	08 95       	ret

00000b00 <move_forward>:
*   move forward the robot with the distance centimeters
*	@param sensor the robot to be moved
*   @param centimeters the distance robot moved.
**/
void move_forward(oi_t *sensor, int centimeters)
{
     b00:	cf 92       	push	r12
     b02:	df 92       	push	r13
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	c8 55       	subi	r28, 0x58	; 88
     b16:	d1 09       	sbc	r29, r1
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	de bf       	out	0x3e, r29	; 62
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	cd bf       	out	0x3d, r28	; 61
     b22:	8c 01       	movw	r16, r24
     b24:	e6 2e       	mov	r14, r22
     b26:	f7 2e       	mov	r15, r23
	char s1[] = "left object detect";
     b28:	83 e1       	ldi	r24, 0x13	; 19
     b2a:	eb e4       	ldi	r30, 0x4B	; 75
     b2c:	f2 e0       	ldi	r31, 0x02	; 2
     b2e:	de 01       	movw	r26, r28
     b30:	11 96       	adiw	r26, 0x01	; 1
     b32:	01 90       	ld	r0, Z+
     b34:	0d 92       	st	X+, r0
     b36:	8a 95       	dec	r24
     b38:	e1 f7       	brne	.-8      	; 0xb32 <move_forward+0x32>
	char s2[] = "right object detect";
     b3a:	84 e1       	ldi	r24, 0x14	; 20
     b3c:	ee e5       	ldi	r30, 0x5E	; 94
     b3e:	f2 e0       	ldi	r31, 0x02	; 2
     b40:	de 01       	movw	r26, r28
     b42:	54 96       	adiw	r26, 0x14	; 20
     b44:	01 90       	ld	r0, Z+
     b46:	0d 92       	st	X+, r0
     b48:	8a 95       	dec	r24
     b4a:	e1 f7       	brne	.-8      	; 0xb44 <move_forward+0x44>
	char s3[]= "left cliff detect";
     b4c:	82 e1       	ldi	r24, 0x12	; 18
     b4e:	e2 e7       	ldi	r30, 0x72	; 114
     b50:	f2 e0       	ldi	r31, 0x02	; 2
     b52:	de 01       	movw	r26, r28
     b54:	98 96       	adiw	r26, 0x28	; 40
     b56:	01 90       	ld	r0, Z+
     b58:	0d 92       	st	X+, r0
     b5a:	8a 95       	dec	r24
     b5c:	e1 f7       	brne	.-8      	; 0xb56 <move_forward+0x56>
	char s4[]= "wall detect";
     b5e:	8c e0       	ldi	r24, 0x0C	; 12
     b60:	e4 e8       	ldi	r30, 0x84	; 132
     b62:	f2 e0       	ldi	r31, 0x02	; 2
     b64:	de 01       	movw	r26, r28
     b66:	da 96       	adiw	r26, 0x3a	; 58
     b68:	01 90       	ld	r0, Z+
     b6a:	0d 92       	st	X+, r0
     b6c:	8a 95       	dec	r24
     b6e:	e1 f7       	brne	.-8      	; 0xb68 <move_forward+0x68>
	char s5[] = "retrivial zone detect";
	char s7[] = "right cliff detect";
     b70:	83 e1       	ldi	r24, 0x13	; 19
     b72:	e0 e9       	ldi	r30, 0x90	; 144
     b74:	f2 e0       	ldi	r31, 0x02	; 2
     b76:	de 01       	movw	r26, r28
     b78:	aa 5b       	subi	r26, 0xBA	; 186
     b7a:	bf 4f       	sbci	r27, 0xFF	; 255
     b7c:	01 90       	ld	r0, Z+
     b7e:	0d 92       	st	X+, r0
     b80:	8a 95       	dec	r24
     b82:	e1 f7       	brne	.-8      	; 0xb7c <move_forward+0x7c>

	int sum = 0;
	int i =0;

	oi_set_wheels(100,100);
     b84:	64 e6       	ldi	r22, 0x64	; 100
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	84 e6       	ldi	r24, 0x64	; 100
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 af 07 	call	0xf5e	; 0xf5e <oi_set_wheels>
	while(sum<10*centimeters)
     b90:	ce 2c       	mov	r12, r14
     b92:	df 2c       	mov	r13, r15
     b94:	cc 0c       	add	r12, r12
     b96:	dd 1c       	adc	r13, r13
     b98:	c6 01       	movw	r24, r12
     b9a:	88 0f       	add	r24, r24
     b9c:	99 1f       	adc	r25, r25
     b9e:	88 0f       	add	r24, r24
     ba0:	99 1f       	adc	r25, r25
     ba2:	c8 0e       	add	r12, r24
     ba4:	d9 1e       	adc	r13, r25
     ba6:	1c 14       	cp	r1, r12
     ba8:	1d 04       	cpc	r1, r13
     baa:	0c f0       	brlt	.+2      	; 0xbae <move_forward+0xae>
     bac:	1e c1       	rjmp	.+572    	; 0xdea <move_forward+0x2ea>
	{
		if (sensor->cliff_frontleft||sensor->cliff_left)
     bae:	f8 01       	movw	r30, r16
     bb0:	83 81       	ldd	r24, Z+3	; 0x03
     bb2:	81 11       	cpse	r24, r1
     bb4:	16 c0       	rjmp	.+44     	; 0xbe2 <move_forward+0xe2>
     bb6:	82 81       	ldd	r24, Z+2	; 0x02
     bb8:	81 11       	cpse	r24, r1
     bba:	13 c0       	rjmp	.+38     	; 0xbe2 <move_forward+0xe2>
				USART_Transmit(s3[i]);
			}
			i=0;
			break;
			}
		if (sensor->cliff_frontright||sensor->cliff_right)
     bbc:	84 81       	ldd	r24, Z+4	; 0x04
     bbe:	81 11       	cpse	r24, r1
     bc0:	45 c0       	rjmp	.+138    	; 0xc4c <move_forward+0x14c>
     bc2:	85 81       	ldd	r24, Z+5	; 0x05
     bc4:	81 11       	cpse	r24, r1
     bc6:	42 c0       	rjmp	.+132    	; 0xc4c <move_forward+0x14c>
			i=0;
			break;
		}
		
		
		if (sensor->bumper_left)
     bc8:	80 81       	ld	r24, Z
     bca:	81 fd       	sbrc	r24, 1
     bcc:	71 c0       	rjmp	.+226    	; 0xcb0 <move_forward+0x1b0>
	char s3[]= "left cliff detect";
	char s4[]= "wall detect";
	char s5[] = "retrivial zone detect";
	char s7[] = "right cliff detect";

	int sum = 0;
     bce:	e1 2c       	mov	r14, r1
     bd0:	f1 2c       	mov	r15, r1
     bd2:	9d c0       	rjmp	.+314    	; 0xd0e <move_forward+0x20e>
	int i =0;

	oi_set_wheels(100,100);
	while(sum<10*centimeters)
	{
		if (sensor->cliff_frontleft||sensor->cliff_left)
     bd4:	f8 01       	movw	r30, r16
     bd6:	83 81       	ldd	r24, Z+3	; 0x03
     bd8:	81 11       	cpse	r24, r1
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <move_forward+0xe2>
     bdc:	82 81       	ldd	r24, Z+2	; 0x02
     bde:	88 23       	and	r24, r24
     be0:	71 f1       	breq	.+92     	; 0xc3e <move_forward+0x13e>
		{
			USART_Transmit(13);
     be2:	8d e0       	ldi	r24, 0x0D	; 13
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
			USART_Transmit(10);
     bea:	8a e0       	ldi	r24, 0x0A	; 10
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
			oi_set_wheels(0,0);
     bf2:	60 e0       	ldi	r22, 0x00	; 0
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 af 07 	call	0xf5e	; 0xf5e <oi_set_wheels>
			/// move backward 3 centimeters when detect the cliff.
			move_backforward(sensor,3);
     bfe:	63 e0       	ldi	r22, 0x03	; 3
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	c8 01       	movw	r24, r16
     c04:	0e 94 4f 05 	call	0xa9e	; 0xa9e <move_backforward>
     c08:	6e 01       	movw	r12, r28
     c0a:	f8 e2       	ldi	r31, 0x28	; 40
     c0c:	cf 0e       	add	r12, r31
     c0e:	d1 1c       	adc	r13, r1
	char s4[]= "wall detect";
	char s5[] = "retrivial zone detect";
	char s7[] = "right cliff detect";

	int sum = 0;
	int i =0;
     c10:	00 e0       	ldi	r16, 0x00	; 0
     c12:	10 e0       	ldi	r17, 0x00	; 0
			USART_Transmit(13);
			USART_Transmit(10);
			oi_set_wheels(0,0);
			/// move backward 3 centimeters when detect the cliff.
			move_backforward(sensor,3);
			for (i;i<strlen(s3);i++)
     c14:	76 01       	movw	r14, r12
     c16:	08 c0       	rjmp	.+16     	; 0xc28 <move_forward+0x128>
			{
				USART_Transmit(s3[i]);
     c18:	f6 01       	movw	r30, r12
     c1a:	81 91       	ld	r24, Z+
     c1c:	6f 01       	movw	r12, r30
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
			USART_Transmit(13);
			USART_Transmit(10);
			oi_set_wheels(0,0);
			/// move backward 3 centimeters when detect the cliff.
			move_backforward(sensor,3);
			for (i;i<strlen(s3);i++)
     c24:	0f 5f       	subi	r16, 0xFF	; 255
     c26:	1f 4f       	sbci	r17, 0xFF	; 255
     c28:	f7 01       	movw	r30, r14
     c2a:	01 90       	ld	r0, Z+
     c2c:	00 20       	and	r0, r0
     c2e:	e9 f7       	brne	.-6      	; 0xc2a <move_forward+0x12a>
     c30:	31 97       	sbiw	r30, 0x01	; 1
     c32:	ee 19       	sub	r30, r14
     c34:	ff 09       	sbc	r31, r15
     c36:	0e 17       	cp	r16, r30
     c38:	1f 07       	cpc	r17, r31
     c3a:	70 f3       	brcs	.-36     	; 0xc18 <move_forward+0x118>
     c3c:	d6 c0       	rjmp	.+428    	; 0xdea <move_forward+0x2ea>
				USART_Transmit(s3[i]);
			}
			i=0;
			break;
			}
		if (sensor->cliff_frontright||sensor->cliff_right)
     c3e:	f8 01       	movw	r30, r16
     c40:	84 81       	ldd	r24, Z+4	; 0x04
     c42:	81 11       	cpse	r24, r1
     c44:	03 c0       	rjmp	.+6      	; 0xc4c <move_forward+0x14c>
     c46:	85 81       	ldd	r24, Z+5	; 0x05
     c48:	88 23       	and	r24, r24
     c4a:	71 f1       	breq	.+92     	; 0xca8 <move_forward+0x1a8>
		{
			USART_Transmit(13);
     c4c:	8d e0       	ldi	r24, 0x0D	; 13
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
			USART_Transmit(10);
     c54:	8a e0       	ldi	r24, 0x0A	; 10
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
			oi_set_wheels(0,0);
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 af 07 	call	0xf5e	; 0xf5e <oi_set_wheels>
			/// move backward 3 centimeters when detect the cliff.
			move_backforward(sensor,3);
     c68:	63 e0       	ldi	r22, 0x03	; 3
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	c8 01       	movw	r24, r16
     c6e:	0e 94 4f 05 	call	0xa9e	; 0xa9e <move_backforward>
     c72:	6e 01       	movw	r12, r28
     c74:	f6 e4       	ldi	r31, 0x46	; 70
     c76:	cf 0e       	add	r12, r31
     c78:	d1 1c       	adc	r13, r1
	char s4[]= "wall detect";
	char s5[] = "retrivial zone detect";
	char s7[] = "right cliff detect";

	int sum = 0;
	int i =0;
     c7a:	00 e0       	ldi	r16, 0x00	; 0
     c7c:	10 e0       	ldi	r17, 0x00	; 0
			USART_Transmit(13);
			USART_Transmit(10);
			oi_set_wheels(0,0);
			/// move backward 3 centimeters when detect the cliff.
			move_backforward(sensor,3);
			for (i;i<strlen(s7);i++)
     c7e:	76 01       	movw	r14, r12
     c80:	08 c0       	rjmp	.+16     	; 0xc92 <move_forward+0x192>
			{
				USART_Transmit(s7[i]);
     c82:	f6 01       	movw	r30, r12
     c84:	81 91       	ld	r24, Z+
     c86:	6f 01       	movw	r12, r30
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
			USART_Transmit(13);
			USART_Transmit(10);
			oi_set_wheels(0,0);
			/// move backward 3 centimeters when detect the cliff.
			move_backforward(sensor,3);
			for (i;i<strlen(s7);i++)
     c8e:	0f 5f       	subi	r16, 0xFF	; 255
     c90:	1f 4f       	sbci	r17, 0xFF	; 255
     c92:	f7 01       	movw	r30, r14
     c94:	01 90       	ld	r0, Z+
     c96:	00 20       	and	r0, r0
     c98:	e9 f7       	brne	.-6      	; 0xc94 <move_forward+0x194>
     c9a:	31 97       	sbiw	r30, 0x01	; 1
     c9c:	ee 19       	sub	r30, r14
     c9e:	ff 09       	sbc	r31, r15
     ca0:	0e 17       	cp	r16, r30
     ca2:	1f 07       	cpc	r17, r31
     ca4:	70 f3       	brcs	.-36     	; 0xc82 <move_forward+0x182>
     ca6:	a1 c0       	rjmp	.+322    	; 0xdea <move_forward+0x2ea>
			i=0;
			break;
		}
		
		
		if (sensor->bumper_left)
     ca8:	f8 01       	movw	r30, r16
     caa:	80 81       	ld	r24, Z
     cac:	81 ff       	sbrs	r24, 1
     cae:	2f c0       	rjmp	.+94     	; 0xd0e <move_forward+0x20e>
			{
				USART_Transmit(13);
     cb0:	8d e0       	ldi	r24, 0x0D	; 13
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
				USART_Transmit(10);
     cb8:	8a e0       	ldi	r24, 0x0A	; 10
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
				oi_set_wheels(0,0);
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	0e 94 af 07 	call	0xf5e	; 0xf5e <oi_set_wheels>
				/// move backward 3 centimeters when detect the small object.
				move_backforward(sensor,3);
     ccc:	63 e0       	ldi	r22, 0x03	; 3
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	c8 01       	movw	r24, r16
     cd2:	0e 94 4f 05 	call	0xa9e	; 0xa9e <move_backforward>
     cd6:	cc 24       	eor	r12, r12
     cd8:	c3 94       	inc	r12
     cda:	d1 2c       	mov	r13, r1
     cdc:	cc 0e       	add	r12, r28
     cde:	dd 1e       	adc	r13, r29
				for (i=0;i<strlen(s1);i++)
     ce0:	00 e0       	ldi	r16, 0x00	; 0
     ce2:	10 e0       	ldi	r17, 0x00	; 0
     ce4:	76 01       	movw	r14, r12
     ce6:	08 c0       	rjmp	.+16     	; 0xcf8 <move_forward+0x1f8>
				{
					USART_Transmit(s1[i]);
     ce8:	f6 01       	movw	r30, r12
     cea:	81 91       	ld	r24, Z+
     cec:	6f 01       	movw	r12, r30
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
				USART_Transmit(13);
				USART_Transmit(10);
				oi_set_wheels(0,0);
				/// move backward 3 centimeters when detect the small object.
				move_backforward(sensor,3);
				for (i=0;i<strlen(s1);i++)
     cf4:	0f 5f       	subi	r16, 0xFF	; 255
     cf6:	1f 4f       	sbci	r17, 0xFF	; 255
     cf8:	f7 01       	movw	r30, r14
     cfa:	01 90       	ld	r0, Z+
     cfc:	00 20       	and	r0, r0
     cfe:	e9 f7       	brne	.-6      	; 0xcfa <move_forward+0x1fa>
     d00:	31 97       	sbiw	r30, 0x01	; 1
     d02:	ee 19       	sub	r30, r14
     d04:	ff 09       	sbc	r31, r15
     d06:	0e 17       	cp	r16, r30
     d08:	1f 07       	cpc	r17, r31
     d0a:	70 f3       	brcs	.-36     	; 0xce8 <move_forward+0x1e8>
     d0c:	6e c0       	rjmp	.+220    	; 0xdea <move_forward+0x2ea>
				i=0;
				break;
			}
			
			
			if (sensor->bumper_right)
     d0e:	80 ff       	sbrs	r24, 0
     d10:	2e c0       	rjmp	.+92     	; 0xd6e <move_forward+0x26e>
			{
				USART_Transmit(13);
     d12:	8d e0       	ldi	r24, 0x0D	; 13
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
				USART_Transmit(10);
     d1a:	8a e0       	ldi	r24, 0x0A	; 10
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
				oi_set_wheels(0,0);
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	0e 94 af 07 	call	0xf5e	; 0xf5e <oi_set_wheels>
				/// move backward 3 centimeters when detect the small object.
				move_backforward(sensor,3);
     d2e:	63 e0       	ldi	r22, 0x03	; 3
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	c8 01       	movw	r24, r16
     d34:	0e 94 4f 05 	call	0xa9e	; 0xa9e <move_backforward>
     d38:	6e 01       	movw	r12, r28
     d3a:	f4 e1       	ldi	r31, 0x14	; 20
     d3c:	cf 0e       	add	r12, r31
     d3e:	d1 1c       	adc	r13, r1
				for (i=0;i<strlen(s2);i++)
     d40:	00 e0       	ldi	r16, 0x00	; 0
     d42:	10 e0       	ldi	r17, 0x00	; 0
     d44:	76 01       	movw	r14, r12
     d46:	08 c0       	rjmp	.+16     	; 0xd58 <move_forward+0x258>
				{
					USART_Transmit(s2[i]);
     d48:	f6 01       	movw	r30, r12
     d4a:	81 91       	ld	r24, Z+
     d4c:	6f 01       	movw	r12, r30
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
				USART_Transmit(13);
				USART_Transmit(10);
				oi_set_wheels(0,0);
				/// move backward 3 centimeters when detect the small object.
				move_backforward(sensor,3);
				for (i=0;i<strlen(s2);i++)
     d54:	0f 5f       	subi	r16, 0xFF	; 255
     d56:	1f 4f       	sbci	r17, 0xFF	; 255
     d58:	f7 01       	movw	r30, r14
     d5a:	01 90       	ld	r0, Z+
     d5c:	00 20       	and	r0, r0
     d5e:	e9 f7       	brne	.-6      	; 0xd5a <move_forward+0x25a>
     d60:	31 97       	sbiw	r30, 0x01	; 1
     d62:	ee 19       	sub	r30, r14
     d64:	ff 09       	sbc	r31, r15
     d66:	0e 17       	cp	r16, r30
     d68:	1f 07       	cpc	r17, r31
     d6a:	70 f3       	brcs	.-36     	; 0xd48 <move_forward+0x248>
     d6c:	3e c0       	rjmp	.+124    	; 0xdea <move_forward+0x2ea>
				i=0;
				break;
			}
			
			
			if (sensor->virtual_wall)
     d6e:	f8 01       	movw	r30, r16
     d70:	86 81       	ldd	r24, Z+6	; 0x06
     d72:	88 23       	and	r24, r24
     d74:	71 f1       	breq	.+92     	; 0xdd2 <move_forward+0x2d2>
			{
				USART_Transmit(13);
     d76:	8d e0       	ldi	r24, 0x0D	; 13
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
				USART_Transmit(10);
     d7e:	8a e0       	ldi	r24, 0x0A	; 10
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
				oi_set_wheels(0,0);
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 94 af 07 	call	0xf5e	; 0xf5e <oi_set_wheels>
				/// move backward 3 centimeters when detect the virtual wall.
				move_backforward(sensor,3);
     d92:	63 e0       	ldi	r22, 0x03	; 3
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	c8 01       	movw	r24, r16
     d98:	0e 94 4f 05 	call	0xa9e	; 0xa9e <move_backforward>
     d9c:	6e 01       	movw	r12, r28
     d9e:	fa e3       	ldi	r31, 0x3A	; 58
     da0:	cf 0e       	add	r12, r31
     da2:	d1 1c       	adc	r13, r1
				for (i=0;i<strlen(s4);i++)
     da4:	00 e0       	ldi	r16, 0x00	; 0
     da6:	10 e0       	ldi	r17, 0x00	; 0
     da8:	76 01       	movw	r14, r12
     daa:	08 c0       	rjmp	.+16     	; 0xdbc <move_forward+0x2bc>
				{
					USART_Transmit(s4[i]);
     dac:	f6 01       	movw	r30, r12
     dae:	81 91       	ld	r24, Z+
     db0:	6f 01       	movw	r12, r30
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 de 08 	call	0x11bc	; 0x11bc <USART_Transmit>
				USART_Transmit(13);
				USART_Transmit(10);
				oi_set_wheels(0,0);
				/// move backward 3 centimeters when detect the virtual wall.
				move_backforward(sensor,3);
				for (i=0;i<strlen(s4);i++)
     db8:	0f 5f       	subi	r16, 0xFF	; 255
     dba:	1f 4f       	sbci	r17, 0xFF	; 255
     dbc:	f7 01       	movw	r30, r14
     dbe:	01 90       	ld	r0, Z+
     dc0:	00 20       	and	r0, r0
     dc2:	e9 f7       	brne	.-6      	; 0xdbe <move_forward+0x2be>
     dc4:	31 97       	sbiw	r30, 0x01	; 1
     dc6:	ee 19       	sub	r30, r14
     dc8:	ff 09       	sbc	r31, r15
     dca:	0e 17       	cp	r16, r30
     dcc:	1f 07       	cpc	r17, r31
     dce:	70 f3       	brcs	.-36     	; 0xdac <move_forward+0x2ac>
     dd0:	0c c0       	rjmp	.+24     	; 0xdea <move_forward+0x2ea>
				}
				i=0;
				break;
			}
			
		oi_update(sensor);
     dd2:	c8 01       	movw	r24, r16
     dd4:	0e 94 f7 07 	call	0xfee	; 0xfee <oi_update>
		sum+=sensor->distance;
     dd8:	f8 01       	movw	r30, r16
     dda:	84 85       	ldd	r24, Z+12	; 0x0c
     ddc:	95 85       	ldd	r25, Z+13	; 0x0d
     dde:	e8 0e       	add	r14, r24
     de0:	f9 1e       	adc	r15, r25

	int sum = 0;
	int i =0;

	oi_set_wheels(100,100);
	while(sum<10*centimeters)
     de2:	ec 14       	cp	r14, r12
     de4:	fd 04       	cpc	r15, r13
     de6:	0c f4       	brge	.+2      	; 0xdea <move_forward+0x2ea>
     de8:	f5 ce       	rjmp	.-534    	; 0xbd4 <move_forward+0xd4>
			
		oi_update(sensor);
		sum+=sensor->distance;
	}
	///stop after the movement
	oi_set_wheels(0,0);//stop
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	70 e0       	ldi	r23, 0x00	; 0
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 af 07 	call	0xf5e	; 0xf5e <oi_set_wheels>
}
     df6:	c8 5a       	subi	r28, 0xA8	; 168
     df8:	df 4f       	sbci	r29, 0xFF	; 255
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	f8 94       	cli
     dfe:	de bf       	out	0x3e, r29	; 62
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	cd bf       	out	0x3d, r28	; 61
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	ff 90       	pop	r15
     e0e:	ef 90       	pop	r14
     e10:	df 90       	pop	r13
     e12:	cf 90       	pop	r12
     e14:	08 95       	ret

00000e16 <turn_clockwise>:
*	@param sensor the robot to be moved.
*   @param degrees the degree of robot turned.
*/

void turn_clockwise(oi_t *sensor, int degrees)
{
     e16:	ef 92       	push	r14
     e18:	ff 92       	push	r15
     e1a:	0f 93       	push	r16
     e1c:	1f 93       	push	r17
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	8c 01       	movw	r16, r24
     e24:	7b 01       	movw	r14, r22
	int ang=0;
	oi_set_wheels(150,-150);
     e26:	6a e6       	ldi	r22, 0x6A	; 106
     e28:	7f ef       	ldi	r23, 0xFF	; 255
     e2a:	86 e9       	ldi	r24, 0x96	; 150
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 af 07 	call	0xf5e	; 0xf5e <oi_set_wheels>
	while(ang<degrees)
     e32:	1e 14       	cp	r1, r14
     e34:	1f 04       	cpc	r1, r15
     e36:	6c f4       	brge	.+26     	; 0xe52 <turn_clockwise+0x3c>
*   @param degrees the degree of robot turned.
*/

void turn_clockwise(oi_t *sensor, int degrees)
{
	int ang=0;
     e38:	c0 e0       	ldi	r28, 0x00	; 0
     e3a:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels(150,-150);
	while(ang<degrees)
	{
	oi_update(sensor);
     e3c:	c8 01       	movw	r24, r16
     e3e:	0e 94 f7 07 	call	0xfee	; 0xfee <oi_update>
	ang+=sensor->angle;
     e42:	f8 01       	movw	r30, r16
     e44:	86 85       	ldd	r24, Z+14	; 0x0e
     e46:	97 85       	ldd	r25, Z+15	; 0x0f
     e48:	c8 0f       	add	r28, r24
     e4a:	d9 1f       	adc	r29, r25

void turn_clockwise(oi_t *sensor, int degrees)
{
	int ang=0;
	oi_set_wheels(150,-150);
	while(ang<degrees)
     e4c:	ce 15       	cp	r28, r14
     e4e:	df 05       	cpc	r29, r15
     e50:	ac f3       	brlt	.-22     	; 0xe3c <turn_clockwise+0x26>
	{
	oi_update(sensor);
	ang+=sensor->angle;
	}
	oi_set_wheels(0,0);///stop
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	0e 94 af 07 	call	0xf5e	; 0xf5e <oi_set_wheels>
}
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	ff 90       	pop	r15
     e68:	ef 90       	pop	r14
     e6a:	08 95       	ret

00000e6c <turn_counterclockwise>:
*   used to turn the robot counter_clockwise with degrees
*	@param sensor the robot to be moved.
*   @param degrees the degree of robot turned.
*/
void turn_counterclockwise(oi_t *sensor, int degrees)
{
     e6c:	ef 92       	push	r14
     e6e:	ff 92       	push	r15
     e70:	0f 93       	push	r16
     e72:	1f 93       	push	r17
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
     e78:	8c 01       	movw	r16, r24
     e7a:	7b 01       	movw	r14, r22
	int ang=0;
	oi_set_wheels(-150,150);
     e7c:	66 e9       	ldi	r22, 0x96	; 150
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	8a e6       	ldi	r24, 0x6A	; 106
     e82:	9f ef       	ldi	r25, 0xFF	; 255
     e84:	0e 94 af 07 	call	0xf5e	; 0xf5e <oi_set_wheels>
	while(ang>-degrees)
     e88:	f1 94       	neg	r15
     e8a:	e1 94       	neg	r14
     e8c:	f1 08       	sbc	r15, r1
     e8e:	6a f4       	brpl	.+26     	; 0xeaa <turn_counterclockwise+0x3e>
*	@param sensor the robot to be moved.
*   @param degrees the degree of robot turned.
*/
void turn_counterclockwise(oi_t *sensor, int degrees)
{
	int ang=0;
     e90:	c0 e0       	ldi	r28, 0x00	; 0
     e92:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels(-150,150);
	while(ang>-degrees)
	{
		oi_update(sensor);
     e94:	c8 01       	movw	r24, r16
     e96:	0e 94 f7 07 	call	0xfee	; 0xfee <oi_update>
		ang+=sensor->angle;
     e9a:	f8 01       	movw	r30, r16
     e9c:	86 85       	ldd	r24, Z+14	; 0x0e
     e9e:	97 85       	ldd	r25, Z+15	; 0x0f
     ea0:	c8 0f       	add	r28, r24
     ea2:	d9 1f       	adc	r29, r25
*/
void turn_counterclockwise(oi_t *sensor, int degrees)
{
	int ang=0;
	oi_set_wheels(-150,150);
	while(ang>-degrees)
     ea4:	ec 16       	cp	r14, r28
     ea6:	fd 06       	cpc	r15, r29
     ea8:	ac f3       	brlt	.-22     	; 0xe94 <turn_counterclockwise+0x28>
	{
		oi_update(sensor);
		ang+=sensor->angle;
	}
	///stop after the movement
	oi_set_wheels(0,0);
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 af 07 	call	0xf5e	; 0xf5e <oi_set_wheels>
	
}	
     eb6:	df 91       	pop	r29
     eb8:	cf 91       	pop	r28
     eba:	1f 91       	pop	r17
     ebc:	0f 91       	pop	r16
     ebe:	ff 90       	pop	r15
     ec0:	ef 90       	pop	r14
     ec2:	08 95       	ret

00000ec4 <oi_alloc>:
#include "util.h"
#include "open_interface.h"

/// Allocate memory for a the sensor data
oi_t* oi_alloc() {
	return calloc(1, sizeof(oi_t));
     ec4:	64 e3       	ldi	r22, 0x34	; 52
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 a4 0c 	call	0x1948	; 0x1948 <calloc>
}
     ed0:	08 95       	ret

00000ed2 <oi_byte_tx>:


// Transmit a byte of data over the serial connection to the Create
void oi_byte_tx(unsigned char value) {
	// Wait until the transmit buffer is empty
	while (!(UCSR1A & (1 << UDRE)));
     ed2:	eb e9       	ldi	r30, 0x9B	; 155
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	90 81       	ld	r25, Z
     ed8:	95 ff       	sbrs	r25, 5
     eda:	fd cf       	rjmp	.-6      	; 0xed6 <oi_byte_tx+0x4>

	UDR1 = value;
     edc:	80 93 9c 00 	sts	0x009C, r24
     ee0:	08 95       	ret

00000ee2 <oi_play_song>:
	}
}


/// Plays a given song; use oi_load_song(...) first
void oi_play_song(int index){
     ee2:	cf 93       	push	r28
     ee4:	c8 2f       	mov	r28, r24
	oi_byte_tx(OI_OPCODE_PLAY);
     ee6:	8d e8       	ldi	r24, 0x8D	; 141
     ee8:	0e 94 69 07 	call	0xed2	; 0xed2 <oi_byte_tx>
	oi_byte_tx(index);
     eec:	8c 2f       	mov	r24, r28
     eee:	0e 94 69 07 	call	0xed2	; 0xed2 <oi_byte_tx>
}
     ef2:	cf 91       	pop	r28
     ef4:	08 95       	ret

00000ef6 <oi_load_song>:
	oi_byte_tx(left_wheel& 0xff);
}


/// Loads a song onto the iRobot Create
void oi_load_song(int song_index, int num_notes, unsigned char *notes, unsigned char *duration) {
     ef6:	cf 92       	push	r12
     ef8:	df 92       	push	r13
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	c8 2f       	mov	r28, r24
     f08:	7b 01       	movw	r14, r22
     f0a:	04 2f       	mov	r16, r20
     f0c:	15 2f       	mov	r17, r21
     f0e:	c2 2e       	mov	r12, r18
     f10:	d3 2e       	mov	r13, r19
	int i;
	oi_byte_tx(OI_OPCODE_SONG);
     f12:	8c e8       	ldi	r24, 0x8C	; 140
     f14:	0e 94 69 07 	call	0xed2	; 0xed2 <oi_byte_tx>
	oi_byte_tx(song_index);
     f18:	8c 2f       	mov	r24, r28
     f1a:	0e 94 69 07 	call	0xed2	; 0xed2 <oi_byte_tx>
	oi_byte_tx(num_notes);
     f1e:	8e 2d       	mov	r24, r14
     f20:	0e 94 69 07 	call	0xed2	; 0xed2 <oi_byte_tx>
	for (i=0;i<num_notes;i++) {
     f24:	1e 14       	cp	r1, r14
     f26:	1f 04       	cpc	r1, r15
     f28:	8c f4       	brge	.+34     	; 0xf4c <oi_load_song+0x56>
     f2a:	c0 2f       	mov	r28, r16
     f2c:	d1 2f       	mov	r29, r17
     f2e:	0c 2d       	mov	r16, r12
     f30:	1d 2d       	mov	r17, r13
	oi_byte_tx(left_wheel& 0xff);
}


/// Loads a song onto the iRobot Create
void oi_load_song(int song_index, int num_notes, unsigned char *notes, unsigned char *duration) {
     f32:	ec 0e       	add	r14, r28
     f34:	fd 1e       	adc	r15, r29
	int i;
	oi_byte_tx(OI_OPCODE_SONG);
	oi_byte_tx(song_index);
	oi_byte_tx(num_notes);
	for (i=0;i<num_notes;i++) {
		oi_byte_tx(notes[i]);
     f36:	89 91       	ld	r24, Y+
     f38:	0e 94 69 07 	call	0xed2	; 0xed2 <oi_byte_tx>
		oi_byte_tx(duration[i]);
     f3c:	f8 01       	movw	r30, r16
     f3e:	81 91       	ld	r24, Z+
     f40:	8f 01       	movw	r16, r30
     f42:	0e 94 69 07 	call	0xed2	; 0xed2 <oi_byte_tx>
void oi_load_song(int song_index, int num_notes, unsigned char *notes, unsigned char *duration) {
	int i;
	oi_byte_tx(OI_OPCODE_SONG);
	oi_byte_tx(song_index);
	oi_byte_tx(num_notes);
	for (i=0;i<num_notes;i++) {
     f46:	ce 15       	cp	r28, r14
     f48:	df 05       	cpc	r29, r15
     f4a:	a9 f7       	brne	.-22     	; 0xf36 <oi_load_song+0x40>
		oi_byte_tx(notes[i]);
		oi_byte_tx(duration[i]);
	}
}
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	1f 91       	pop	r17
     f52:	0f 91       	pop	r16
     f54:	ff 90       	pop	r15
     f56:	ef 90       	pop	r14
     f58:	df 90       	pop	r13
     f5a:	cf 90       	pop	r12
     f5c:	08 95       	ret

00000f5e <oi_set_wheels>:
}



/// Drive wheels directly; speeds are in mm / sec
void oi_set_wheels(int16_t right_wheel, int16_t left_wheel) {
     f5e:	0f 93       	push	r16
     f60:	1f 93       	push	r17
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	18 2f       	mov	r17, r24
     f68:	09 2f       	mov	r16, r25
     f6a:	c6 2f       	mov	r28, r22
     f6c:	d7 2f       	mov	r29, r23
	oi_byte_tx(OI_OPCODE_DRIVE_WHEELS);
     f6e:	81 e9       	ldi	r24, 0x91	; 145
     f70:	0e 94 69 07 	call	0xed2	; 0xed2 <oi_byte_tx>
	oi_byte_tx(right_wheel>>8);
     f74:	80 2f       	mov	r24, r16
     f76:	0e 94 69 07 	call	0xed2	; 0xed2 <oi_byte_tx>
	oi_byte_tx(right_wheel & 0xff);
     f7a:	81 2f       	mov	r24, r17
     f7c:	0e 94 69 07 	call	0xed2	; 0xed2 <oi_byte_tx>
	oi_byte_tx(left_wheel>>8);
     f80:	8d 2f       	mov	r24, r29
     f82:	0e 94 69 07 	call	0xed2	; 0xed2 <oi_byte_tx>
	oi_byte_tx(left_wheel& 0xff);
     f86:	8c 2f       	mov	r24, r28
     f88:	0e 94 69 07 	call	0xed2	; 0xed2 <oi_byte_tx>
}
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	08 95       	ret

00000f96 <oi_set_leds>:
* @play_led        uint8_t either 0 (off) or 1 (on)
* @advance_led     uint8_t either 0 (off) or 1 (on)
* @power_color     uint8_t the color of the power LED; 0 = green, 255 = red
* @power_intensity uint8_t the intensity of the power LED; 0 = off, 255 = full intensity
*/
void oi_set_leds(uint8_t play_led, uint8_t advance_led, uint8_t power_color, uint8_t power_intensity) {
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	08 2f       	mov	r16, r24
     fa0:	16 2f       	mov	r17, r22
     fa2:	d4 2f       	mov	r29, r20
     fa4:	c2 2f       	mov	r28, r18
	// LED Opcode
	oi_byte_tx(OI_OPCODE_LEDS);
     fa6:	8b e8       	ldi	r24, 0x8B	; 139
     fa8:	0e 94 69 07 	call	0xed2	; 0xed2 <oi_byte_tx>

	// Set the Play and Advance LEDs
	oi_byte_tx(advance_led << 3 && play_led << 2);
     fac:	11 23       	and	r17, r17
     fae:	41 f0       	breq	.+16     	; 0xfc0 <oi_set_leds+0x2a>
     fb0:	61 e0       	ldi	r22, 0x01	; 1
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	01 11       	cpse	r16, r1
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <oi_set_leds+0x26>
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	cb 01       	movw	r24, r22
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <oi_set_leds+0x2e>
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	0e 94 69 07 	call	0xed2	; 0xed2 <oi_byte_tx>

	// Set the power led color
	oi_byte_tx(power_color);
     fc8:	8d 2f       	mov	r24, r29
     fca:	0e 94 69 07 	call	0xed2	; 0xed2 <oi_byte_tx>

	// Set the power led intensity
	oi_byte_tx(power_intensity);
     fce:	8c 2f       	mov	r24, r28
     fd0:	0e 94 69 07 	call	0xed2	; 0xed2 <oi_byte_tx>
}
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	1f 91       	pop	r17
     fda:	0f 91       	pop	r16
     fdc:	08 95       	ret

00000fde <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
     fde:	eb e9       	ldi	r30, 0x9B	; 155
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	88 23       	and	r24, r24
     fe6:	ec f7       	brge	.-6      	; 0xfe2 <oi_byte_rx+0x4>

	return UDR1;
     fe8:	80 91 9c 00 	lds	r24, 0x009C
}
     fec:	08 95       	ret

00000fee <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     fee:	ef 92       	push	r14
     ff0:	ff 92       	push	r15
     ff2:	0f 93       	push	r16
     ff4:	1f 93       	push	r17
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     ffc:	80 91 9b 00 	lds	r24, 0x009B
    1000:	88 23       	and	r24, r24
    1002:	44 f4       	brge	.+16     	; 0x1014 <oi_update+0x26>
		i = UDR1;
    1004:	ac e9       	ldi	r26, 0x9C	; 156
    1006:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
    1008:	eb e9       	ldi	r30, 0x9B	; 155
    100a:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
    100c:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
    100e:	80 81       	ld	r24, Z
    1010:	88 23       	and	r24, r24
    1012:	e4 f3       	brlt	.-8      	; 0x100c <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
    1014:	8e e8       	ldi	r24, 0x8E	; 142
    1016:	0e 94 69 07 	call	0xed2	; 0xed2 <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
    101a:	86 e0       	ldi	r24, 0x06	; 6
    101c:	0e 94 69 07 	call	0xed2	; 0xed2 <oi_byte_tx>
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
    1020:	87 01       	movw	r16, r14
    1022:	0c 5c       	subi	r16, 0xCC	; 204
    1024:	1f 4f       	sbci	r17, 0xFF	; 255
	oi_byte_tx(OI_OPCODE_SENSORS);
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
    1026:	e7 01       	movw	r28, r14
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
    1028:	0e 94 ef 07 	call	0xfde	; 0xfde <oi_byte_rx>
    102c:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
    102e:	c0 17       	cp	r28, r16
    1030:	d1 07       	cpc	r29, r17
    1032:	d1 f7       	brne	.-12     	; 0x1028 <oi_update+0x3a>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
    1034:	f7 01       	movw	r30, r14
    1036:	94 85       	ldd	r25, Z+12	; 0x0c
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	25 85       	ldd	r18, Z+13	; 0x0d
    103c:	82 0f       	add	r24, r18
    103e:	91 1d       	adc	r25, r1
    1040:	95 87       	std	Z+13, r25	; 0x0d
    1042:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
    1044:	96 85       	ldd	r25, Z+14	; 0x0e
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	27 85       	ldd	r18, Z+15	; 0x0f
    104a:	82 0f       	add	r24, r18
    104c:	91 1d       	adc	r25, r1
    104e:	97 87       	std	Z+15, r25	; 0x0f
    1050:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
    1052:	91 89       	ldd	r25, Z+17	; 0x11
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	22 89       	ldd	r18, Z+18	; 0x12
    1058:	82 0f       	add	r24, r18
    105a:	91 1d       	adc	r25, r1
    105c:	92 8b       	std	Z+18, r25	; 0x12
    105e:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
    1060:	93 89       	ldd	r25, Z+19	; 0x13
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	24 89       	ldd	r18, Z+20	; 0x14
    1066:	82 0f       	add	r24, r18
    1068:	91 1d       	adc	r25, r1
    106a:	94 8b       	std	Z+20, r25	; 0x14
    106c:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
    106e:	96 89       	ldd	r25, Z+22	; 0x16
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	27 89       	ldd	r18, Z+23	; 0x17
    1074:	82 0f       	add	r24, r18
    1076:	91 1d       	adc	r25, r1
    1078:	97 8b       	std	Z+23, r25	; 0x17
    107a:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
    107c:	90 8d       	ldd	r25, Z+24	; 0x18
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	21 8d       	ldd	r18, Z+25	; 0x19
    1082:	82 0f       	add	r24, r18
    1084:	91 1d       	adc	r25, r1
    1086:	91 8f       	std	Z+25, r25	; 0x19
    1088:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
    108a:	92 8d       	ldd	r25, Z+26	; 0x1a
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	23 8d       	ldd	r18, Z+27	; 0x1b
    1090:	82 0f       	add	r24, r18
    1092:	91 1d       	adc	r25, r1
    1094:	93 8f       	std	Z+27, r25	; 0x1b
    1096:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
    1098:	94 8d       	ldd	r25, Z+28	; 0x1c
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	25 8d       	ldd	r18, Z+29	; 0x1d
    109e:	82 0f       	add	r24, r18
    10a0:	91 1d       	adc	r25, r1
    10a2:	95 8f       	std	Z+29, r25	; 0x1d
    10a4:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
    10a6:	96 8d       	ldd	r25, Z+30	; 0x1e
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	27 8d       	ldd	r18, Z+31	; 0x1f
    10ac:	82 0f       	add	r24, r18
    10ae:	91 1d       	adc	r25, r1
    10b0:	97 8f       	std	Z+31, r25	; 0x1f
    10b2:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
    10b4:	90 a1       	ldd	r25, Z+32	; 0x20
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	21 a1       	ldd	r18, Z+33	; 0x21
    10ba:	82 0f       	add	r24, r18
    10bc:	91 1d       	adc	r25, r1
    10be:	91 a3       	std	Z+33, r25	; 0x21
    10c0:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
    10c2:	92 a1       	ldd	r25, Z+34	; 0x22
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	23 a1       	ldd	r18, Z+35	; 0x23
    10c8:	82 0f       	add	r24, r18
    10ca:	91 1d       	adc	r25, r1
    10cc:	93 a3       	std	Z+35, r25	; 0x23
    10ce:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
    10d0:	42 a5       	ldd	r20, Z+42	; 0x2a
    10d2:	50 e0       	ldi	r21, 0x00	; 0
    10d4:	31 a5       	ldd	r19, Z+41	; 0x29
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	24 0f       	add	r18, r20
    10da:	35 1f       	adc	r19, r21
    10dc:	36 a3       	std	Z+38, r19	; 0x26
    10de:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
    10e0:	90 a9       	ldd	r25, Z+48	; 0x30
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	84 0f       	add	r24, r20
    10e6:	95 1f       	adc	r25, r21
    10e8:	95 a7       	std	Z+45, r25	; 0x2d
    10ea:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
    10ec:	92 a9       	ldd	r25, Z+50	; 0x32
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	23 a9       	ldd	r18, Z+51	; 0x33
    10f2:	82 0f       	add	r24, r18
    10f4:	91 1d       	adc	r25, r1
    10f6:	97 a7       	std	Z+47, r25	; 0x2f
    10f8:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
    10fa:	94 a9       	ldd	r25, Z+52	; 0x34
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	25 a9       	ldd	r18, Z+53	; 0x35
    1100:	82 0f       	add	r24, r18
    1102:	91 1d       	adc	r25, r1
    1104:	91 ab       	std	Z+49, r25	; 0x31
    1106:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
    1108:	96 a9       	ldd	r25, Z+54	; 0x36
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	27 a9       	ldd	r18, Z+55	; 0x37
    110e:	82 0f       	add	r24, r18
    1110:	91 1d       	adc	r25, r1
    1112:	93 ab       	std	Z+51, r25	; 0x33
    1114:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
    1116:	83 e2       	ldi	r24, 0x23	; 35
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 fe 08 	call	0x11fc	; 0x11fc <wait_ms>
}
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	1f 91       	pop	r17
    1124:	0f 91       	pop	r16
    1126:	ff 90       	pop	r15
    1128:	ef 90       	pop	r14
    112a:	08 95       	ret

0000112c <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
    112c:	0f 93       	push	r16
    112e:	1f 93       	push	r17
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
    1136:	09 e9       	ldi	r16, 0x99	; 153
    1138:	10 e0       	ldi	r17, 0x00	; 0
    113a:	80 e1       	ldi	r24, 0x10	; 16
    113c:	f8 01       	movw	r30, r16
    113e:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
    1140:	88 e1       	ldi	r24, 0x18	; 24
    1142:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
    1146:	86 e0       	ldi	r24, 0x06	; 6
    1148:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
    114c:	80 e8       	ldi	r24, 0x80	; 128
    114e:	0e 94 69 07 	call	0xed2	; 0xed2 <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
    1152:	81 e8       	ldi	r24, 0x81	; 129
    1154:	0e 94 69 07 	call	0xed2	; 0xed2 <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
    1158:	88 e0       	ldi	r24, 0x08	; 8
    115a:	0e 94 69 07 	call	0xed2	; 0xed2 <oi_byte_tx>
	wait_ms(100);
    115e:	84 e6       	ldi	r24, 0x64	; 100
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0e 94 fe 08 	call	0x11fc	; 0x11fc <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
    1166:	81 e2       	ldi	r24, 0x21	; 33
    1168:	f8 01       	movw	r30, r16
    116a:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
    116c:	84 e8       	ldi	r24, 0x84	; 132
    116e:	0e 94 69 07 	call	0xed2	; 0xed2 <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
    1172:	2f ef       	ldi	r18, 0xFF	; 255
    1174:	47 e0       	ldi	r20, 0x07	; 7
    1176:	61 e0       	ldi	r22, 0x01	; 1
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	0e 94 cb 07 	call	0xf96	; 0xf96 <oi_set_leds>
	
	oi_update(self);
    117e:	ce 01       	movw	r24, r28
    1180:	0e 94 f7 07 	call	0xfee	; 0xfee <oi_update>
	oi_update(self); // call twice to clear distance/angle
    1184:	ce 01       	movw	r24, r28
    1186:	0e 94 f7 07 	call	0xfee	; 0xfee <oi_update>
}
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	1f 91       	pop	r17
    1190:	0f 91       	pop	r16
    1192:	08 95       	ret

00001194 <USART_Init>:
*/
void USART_Init(void)
{
	//int baud = 51;//uncomment for RS232 cable
	int baud = 34; //for bluetooth
	UBRR0H = (unsigned char)(baud>>8);
    1194:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = (unsigned char)baud;
    1198:	82 e2       	ldi	r24, 0x22	; 34
    119a:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A = 0b00000010;
    119c:	82 e0       	ldi	r24, 0x02	; 2
    119e:	8b b9       	out	0x0b, r24	; 11
	UCSR0B = 0b00011000;
    11a0:	88 e1       	ldi	r24, 0x18	; 24
    11a2:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0b00000110;
    11a4:	86 e0       	ldi	r24, 0x06	; 6
    11a6:	80 93 95 00 	sts	0x0095, r24
    11aa:	08 95       	ret

000011ac <USART_Recieve>:

char USART_Recieve(void)
{
	while (1)
	{
		if((UCSR0A & 0b10000000))
    11ac:	5f 9b       	sbis	0x0b, 7	; 11
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <USART_Recieve+0x8>
		{
			return UDR0;
    11b0:	8c b1       	in	r24, 0x0c	; 12
    11b2:	08 95       	ret
			
		}
		if((UCSR0A & 0b00100000))
    11b4:	5d 9b       	sbis	0x0b, 5	; 11
    11b6:	fa cf       	rjmp	.-12     	; 0x11ac <USART_Recieve>
		{
			return 0;
    11b8:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    11ba:	08 95       	ret

000011bc <USART_Transmit>:

void USART_Transmit(char data)
{
	
	/* Wait for empty transmit buffer by checking the UDRE bit */
	while((UCSR0A & 0b00100000) == 0)
    11bc:	5d 9b       	sbis	0x0b, 5	; 11
    11be:	fe cf       	rjmp	.-4      	; 0x11bc <USART_Transmit>
	;
	/* Put data into transmit buffer; sends the data */

	UDR0 = data;
    11c0:	8c b9       	out	0x0c, r24	; 12
    11c2:	08 95       	ret

000011c4 <timer2_start>:
}


// Start timer2
void timer2_start(char unit) {
	timer2_tick=0;
    11c4:	10 92 ad 02 	sts	0x02AD, r1
    11c8:	10 92 ac 02 	sts	0x02AC, r1
	if ( unit == 0 ) { 		//unit = 0 is for slow 
    11cc:	81 11       	cpse	r24, r1
    11ce:	06 c0       	rjmp	.+12     	; 0x11dc <timer2_start+0x18>
        TCCR2=0b00001011;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 64
    11d0:	8b e0       	ldi	r24, 0x0B	; 11
    11d2:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
    11d4:	87 b7       	in	r24, 0x37	; 55
    11d6:	80 68       	ori	r24, 0x80	; 128
    11d8:	87 bf       	out	0x37, r24	; 55
    11da:	07 c0       	rjmp	.+14     	; 0x11ea <timer2_start+0x26>
	}
	if (unit == 1) { 		//unit = 1 is for fast
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	29 f4       	brne	.+10     	; 0x11ea <timer2_start+0x26>
        TCCR2=0b00001001;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 1
    11e0:	89 e0       	ldi	r24, 0x09	; 9
    11e2:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
    11e4:	87 b7       	in	r24, 0x37	; 55
    11e6:	80 68       	ori	r24, 0x80	; 128
    11e8:	87 bf       	out	0x37, r24	; 55
	}
	sei();
    11ea:	78 94       	sei
    11ec:	08 95       	ret

000011ee <timer2_stop>:
}


// Stop timer2
void timer2_stop() {
	TIMSK&=~0b10000000;		//Disabling O.C. Interrupt for Timer2
    11ee:	87 b7       	in	r24, 0x37	; 55
    11f0:	8f 77       	andi	r24, 0x7F	; 127
    11f2:	87 bf       	out	0x37, r24	; 55
	TCCR2&=0b01111111;		//Clearing O.C. settings
    11f4:	85 b5       	in	r24, 0x25	; 37
    11f6:	8f 77       	andi	r24, 0x7F	; 127
    11f8:	85 bd       	out	0x25, r24	; 37
    11fa:	08 95       	ret

000011fc <wait_ms>:
void timer2_start(char unit);
void timer2_stop();


/// Blocks for a specified number of milliseconds
void wait_ms(unsigned int time_val) {
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	ec 01       	movw	r28, r24
	//Seting OC value for time requested
	//Clock is 16 MHz. At a prescaler of 64, 250 timer ticks = 1ms.
	OCR2=250; 				
    1202:	8a ef       	ldi	r24, 0xFA	; 250
    1204:	83 bd       	out	0x23, r24	; 35
	timer2_tick=0;
    1206:	10 92 ad 02 	sts	0x02AD, r1
    120a:	10 92 ac 02 	sts	0x02AC, r1
	timer2_start(0);
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <timer2_start>

	//Waiting for time
	while(timer2_tick < time_val);
    1214:	20 91 ac 02 	lds	r18, 0x02AC
    1218:	30 91 ad 02 	lds	r19, 0x02AD
    121c:	2c 17       	cp	r18, r28
    121e:	3d 07       	cpc	r19, r29
    1220:	c8 f3       	brcs	.-14     	; 0x1214 <wait_ms+0x18>

	timer2_stop();
    1222:	0e 94 f7 08 	call	0x11ee	; 0x11ee <timer2_stop>
}
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	08 95       	ret

0000122c <__vector_9>:
	TCCR2&=0b01111111;		//Clearing O.C. settings
}


// Interrupt handler (runs every 1 ms)
ISR (TIMER2_COMP_vect) {
    122c:	1f 92       	push	r1
    122e:	0f 92       	push	r0
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	0f 92       	push	r0
    1234:	11 24       	eor	r1, r1
    1236:	8f 93       	push	r24
    1238:	9f 93       	push	r25
	timer2_tick++;
    123a:	80 91 ac 02 	lds	r24, 0x02AC
    123e:	90 91 ad 02 	lds	r25, 0x02AD
    1242:	01 96       	adiw	r24, 0x01	; 1
    1244:	90 93 ad 02 	sts	0x02AD, r25
    1248:	80 93 ac 02 	sts	0x02AC, r24
}
    124c:	9f 91       	pop	r25
    124e:	8f 91       	pop	r24
    1250:	0f 90       	pop	r0
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	0f 90       	pop	r0
    1256:	1f 90       	pop	r1
    1258:	18 95       	reti

0000125a <__fixunssfsi>:
    125a:	70 d0       	rcall	.+224    	; 0x133c <__fp_splitA>
    125c:	88 f0       	brcs	.+34     	; 0x1280 <__fixunssfsi+0x26>
    125e:	9f 57       	subi	r25, 0x7F	; 127
    1260:	90 f0       	brcs	.+36     	; 0x1286 <__fixunssfsi+0x2c>
    1262:	b9 2f       	mov	r27, r25
    1264:	99 27       	eor	r25, r25
    1266:	b7 51       	subi	r27, 0x17	; 23
    1268:	a0 f0       	brcs	.+40     	; 0x1292 <__fixunssfsi+0x38>
    126a:	d1 f0       	breq	.+52     	; 0x12a0 <__fixunssfsi+0x46>
    126c:	66 0f       	add	r22, r22
    126e:	77 1f       	adc	r23, r23
    1270:	88 1f       	adc	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	1a f0       	brmi	.+6      	; 0x127c <__fixunssfsi+0x22>
    1276:	ba 95       	dec	r27
    1278:	c9 f7       	brne	.-14     	; 0x126c <__fixunssfsi+0x12>
    127a:	12 c0       	rjmp	.+36     	; 0x12a0 <__fixunssfsi+0x46>
    127c:	b1 30       	cpi	r27, 0x01	; 1
    127e:	81 f0       	breq	.+32     	; 0x12a0 <__fixunssfsi+0x46>
    1280:	77 d0       	rcall	.+238    	; 0x1370 <__fp_zero>
    1282:	b1 e0       	ldi	r27, 0x01	; 1
    1284:	08 95       	ret
    1286:	74 c0       	rjmp	.+232    	; 0x1370 <__fp_zero>
    1288:	67 2f       	mov	r22, r23
    128a:	78 2f       	mov	r23, r24
    128c:	88 27       	eor	r24, r24
    128e:	b8 5f       	subi	r27, 0xF8	; 248
    1290:	39 f0       	breq	.+14     	; 0x12a0 <__fixunssfsi+0x46>
    1292:	b9 3f       	cpi	r27, 0xF9	; 249
    1294:	cc f3       	brlt	.-14     	; 0x1288 <__fixunssfsi+0x2e>
    1296:	86 95       	lsr	r24
    1298:	77 95       	ror	r23
    129a:	67 95       	ror	r22
    129c:	b3 95       	inc	r27
    129e:	d9 f7       	brne	.-10     	; 0x1296 <__fixunssfsi+0x3c>
    12a0:	3e f4       	brtc	.+14     	; 0x12b0 <__fixunssfsi+0x56>
    12a2:	90 95       	com	r25
    12a4:	80 95       	com	r24
    12a6:	70 95       	com	r23
    12a8:	61 95       	neg	r22
    12aa:	7f 4f       	sbci	r23, 0xFF	; 255
    12ac:	8f 4f       	sbci	r24, 0xFF	; 255
    12ae:	9f 4f       	sbci	r25, 0xFF	; 255
    12b0:	08 95       	ret

000012b2 <__floatunsisf>:
    12b2:	e8 94       	clt
    12b4:	09 c0       	rjmp	.+18     	; 0x12c8 <__floatsisf+0x12>

000012b6 <__floatsisf>:
    12b6:	97 fb       	bst	r25, 7
    12b8:	3e f4       	brtc	.+14     	; 0x12c8 <__floatsisf+0x12>
    12ba:	90 95       	com	r25
    12bc:	80 95       	com	r24
    12be:	70 95       	com	r23
    12c0:	61 95       	neg	r22
    12c2:	7f 4f       	sbci	r23, 0xFF	; 255
    12c4:	8f 4f       	sbci	r24, 0xFF	; 255
    12c6:	9f 4f       	sbci	r25, 0xFF	; 255
    12c8:	99 23       	and	r25, r25
    12ca:	a9 f0       	breq	.+42     	; 0x12f6 <__floatsisf+0x40>
    12cc:	f9 2f       	mov	r31, r25
    12ce:	96 e9       	ldi	r25, 0x96	; 150
    12d0:	bb 27       	eor	r27, r27
    12d2:	93 95       	inc	r25
    12d4:	f6 95       	lsr	r31
    12d6:	87 95       	ror	r24
    12d8:	77 95       	ror	r23
    12da:	67 95       	ror	r22
    12dc:	b7 95       	ror	r27
    12de:	f1 11       	cpse	r31, r1
    12e0:	f8 cf       	rjmp	.-16     	; 0x12d2 <__floatsisf+0x1c>
    12e2:	fa f4       	brpl	.+62     	; 0x1322 <__floatsisf+0x6c>
    12e4:	bb 0f       	add	r27, r27
    12e6:	11 f4       	brne	.+4      	; 0x12ec <__floatsisf+0x36>
    12e8:	60 ff       	sbrs	r22, 0
    12ea:	1b c0       	rjmp	.+54     	; 0x1322 <__floatsisf+0x6c>
    12ec:	6f 5f       	subi	r22, 0xFF	; 255
    12ee:	7f 4f       	sbci	r23, 0xFF	; 255
    12f0:	8f 4f       	sbci	r24, 0xFF	; 255
    12f2:	9f 4f       	sbci	r25, 0xFF	; 255
    12f4:	16 c0       	rjmp	.+44     	; 0x1322 <__floatsisf+0x6c>
    12f6:	88 23       	and	r24, r24
    12f8:	11 f0       	breq	.+4      	; 0x12fe <__floatsisf+0x48>
    12fa:	96 e9       	ldi	r25, 0x96	; 150
    12fc:	11 c0       	rjmp	.+34     	; 0x1320 <__floatsisf+0x6a>
    12fe:	77 23       	and	r23, r23
    1300:	21 f0       	breq	.+8      	; 0x130a <__floatsisf+0x54>
    1302:	9e e8       	ldi	r25, 0x8E	; 142
    1304:	87 2f       	mov	r24, r23
    1306:	76 2f       	mov	r23, r22
    1308:	05 c0       	rjmp	.+10     	; 0x1314 <__floatsisf+0x5e>
    130a:	66 23       	and	r22, r22
    130c:	71 f0       	breq	.+28     	; 0x132a <__floatsisf+0x74>
    130e:	96 e8       	ldi	r25, 0x86	; 134
    1310:	86 2f       	mov	r24, r22
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	2a f0       	brmi	.+10     	; 0x1322 <__floatsisf+0x6c>
    1318:	9a 95       	dec	r25
    131a:	66 0f       	add	r22, r22
    131c:	77 1f       	adc	r23, r23
    131e:	88 1f       	adc	r24, r24
    1320:	da f7       	brpl	.-10     	; 0x1318 <__floatsisf+0x62>
    1322:	88 0f       	add	r24, r24
    1324:	96 95       	lsr	r25
    1326:	87 95       	ror	r24
    1328:	97 f9       	bld	r25, 7
    132a:	08 95       	ret

0000132c <__fp_split3>:
    132c:	57 fd       	sbrc	r21, 7
    132e:	90 58       	subi	r25, 0x80	; 128
    1330:	44 0f       	add	r20, r20
    1332:	55 1f       	adc	r21, r21
    1334:	59 f0       	breq	.+22     	; 0x134c <__fp_splitA+0x10>
    1336:	5f 3f       	cpi	r21, 0xFF	; 255
    1338:	71 f0       	breq	.+28     	; 0x1356 <__fp_splitA+0x1a>
    133a:	47 95       	ror	r20

0000133c <__fp_splitA>:
    133c:	88 0f       	add	r24, r24
    133e:	97 fb       	bst	r25, 7
    1340:	99 1f       	adc	r25, r25
    1342:	61 f0       	breq	.+24     	; 0x135c <__fp_splitA+0x20>
    1344:	9f 3f       	cpi	r25, 0xFF	; 255
    1346:	79 f0       	breq	.+30     	; 0x1366 <__fp_splitA+0x2a>
    1348:	87 95       	ror	r24
    134a:	08 95       	ret
    134c:	12 16       	cp	r1, r18
    134e:	13 06       	cpc	r1, r19
    1350:	14 06       	cpc	r1, r20
    1352:	55 1f       	adc	r21, r21
    1354:	f2 cf       	rjmp	.-28     	; 0x133a <__fp_split3+0xe>
    1356:	46 95       	lsr	r20
    1358:	f1 df       	rcall	.-30     	; 0x133c <__fp_splitA>
    135a:	08 c0       	rjmp	.+16     	; 0x136c <__fp_splitA+0x30>
    135c:	16 16       	cp	r1, r22
    135e:	17 06       	cpc	r1, r23
    1360:	18 06       	cpc	r1, r24
    1362:	99 1f       	adc	r25, r25
    1364:	f1 cf       	rjmp	.-30     	; 0x1348 <__fp_splitA+0xc>
    1366:	86 95       	lsr	r24
    1368:	71 05       	cpc	r23, r1
    136a:	61 05       	cpc	r22, r1
    136c:	08 94       	sec
    136e:	08 95       	ret

00001370 <__fp_zero>:
    1370:	e8 94       	clt

00001372 <__fp_szero>:
    1372:	bb 27       	eor	r27, r27
    1374:	66 27       	eor	r22, r22
    1376:	77 27       	eor	r23, r23
    1378:	cb 01       	movw	r24, r22
    137a:	97 f9       	bld	r25, 7
    137c:	08 95       	ret

0000137e <__mulsf3>:
    137e:	0b d0       	rcall	.+22     	; 0x1396 <__mulsf3x>
    1380:	1a c1       	rjmp	.+564    	; 0x15b6 <__fp_round>
    1382:	0b d1       	rcall	.+534    	; 0x159a <__fp_pscA>
    1384:	28 f0       	brcs	.+10     	; 0x1390 <__mulsf3+0x12>
    1386:	10 d1       	rcall	.+544    	; 0x15a8 <__fp_pscB>
    1388:	18 f0       	brcs	.+6      	; 0x1390 <__mulsf3+0x12>
    138a:	95 23       	and	r25, r21
    138c:	09 f0       	breq	.+2      	; 0x1390 <__mulsf3+0x12>
    138e:	d7 c0       	rjmp	.+430    	; 0x153e <__fp_inf>
    1390:	dc c0       	rjmp	.+440    	; 0x154a <__fp_nan>
    1392:	11 24       	eor	r1, r1
    1394:	ee cf       	rjmp	.-36     	; 0x1372 <__fp_szero>

00001396 <__mulsf3x>:
    1396:	ca df       	rcall	.-108    	; 0x132c <__fp_split3>
    1398:	a0 f3       	brcs	.-24     	; 0x1382 <__mulsf3+0x4>

0000139a <__mulsf3_pse>:
    139a:	95 9f       	mul	r25, r21
    139c:	d1 f3       	breq	.-12     	; 0x1392 <__mulsf3+0x14>
    139e:	95 0f       	add	r25, r21
    13a0:	50 e0       	ldi	r21, 0x00	; 0
    13a2:	55 1f       	adc	r21, r21
    13a4:	62 9f       	mul	r22, r18
    13a6:	f0 01       	movw	r30, r0
    13a8:	72 9f       	mul	r23, r18
    13aa:	bb 27       	eor	r27, r27
    13ac:	f0 0d       	add	r31, r0
    13ae:	b1 1d       	adc	r27, r1
    13b0:	63 9f       	mul	r22, r19
    13b2:	aa 27       	eor	r26, r26
    13b4:	f0 0d       	add	r31, r0
    13b6:	b1 1d       	adc	r27, r1
    13b8:	aa 1f       	adc	r26, r26
    13ba:	64 9f       	mul	r22, r20
    13bc:	66 27       	eor	r22, r22
    13be:	b0 0d       	add	r27, r0
    13c0:	a1 1d       	adc	r26, r1
    13c2:	66 1f       	adc	r22, r22
    13c4:	82 9f       	mul	r24, r18
    13c6:	22 27       	eor	r18, r18
    13c8:	b0 0d       	add	r27, r0
    13ca:	a1 1d       	adc	r26, r1
    13cc:	62 1f       	adc	r22, r18
    13ce:	73 9f       	mul	r23, r19
    13d0:	b0 0d       	add	r27, r0
    13d2:	a1 1d       	adc	r26, r1
    13d4:	62 1f       	adc	r22, r18
    13d6:	83 9f       	mul	r24, r19
    13d8:	a0 0d       	add	r26, r0
    13da:	61 1d       	adc	r22, r1
    13dc:	22 1f       	adc	r18, r18
    13de:	74 9f       	mul	r23, r20
    13e0:	33 27       	eor	r19, r19
    13e2:	a0 0d       	add	r26, r0
    13e4:	61 1d       	adc	r22, r1
    13e6:	23 1f       	adc	r18, r19
    13e8:	84 9f       	mul	r24, r20
    13ea:	60 0d       	add	r22, r0
    13ec:	21 1d       	adc	r18, r1
    13ee:	82 2f       	mov	r24, r18
    13f0:	76 2f       	mov	r23, r22
    13f2:	6a 2f       	mov	r22, r26
    13f4:	11 24       	eor	r1, r1
    13f6:	9f 57       	subi	r25, 0x7F	; 127
    13f8:	50 40       	sbci	r21, 0x00	; 0
    13fa:	8a f0       	brmi	.+34     	; 0x141e <__mulsf3_pse+0x84>
    13fc:	e1 f0       	breq	.+56     	; 0x1436 <__mulsf3_pse+0x9c>
    13fe:	88 23       	and	r24, r24
    1400:	4a f0       	brmi	.+18     	; 0x1414 <__mulsf3_pse+0x7a>
    1402:	ee 0f       	add	r30, r30
    1404:	ff 1f       	adc	r31, r31
    1406:	bb 1f       	adc	r27, r27
    1408:	66 1f       	adc	r22, r22
    140a:	77 1f       	adc	r23, r23
    140c:	88 1f       	adc	r24, r24
    140e:	91 50       	subi	r25, 0x01	; 1
    1410:	50 40       	sbci	r21, 0x00	; 0
    1412:	a9 f7       	brne	.-22     	; 0x13fe <__mulsf3_pse+0x64>
    1414:	9e 3f       	cpi	r25, 0xFE	; 254
    1416:	51 05       	cpc	r21, r1
    1418:	70 f0       	brcs	.+28     	; 0x1436 <__mulsf3_pse+0x9c>
    141a:	91 c0       	rjmp	.+290    	; 0x153e <__fp_inf>
    141c:	aa cf       	rjmp	.-172    	; 0x1372 <__fp_szero>
    141e:	5f 3f       	cpi	r21, 0xFF	; 255
    1420:	ec f3       	brlt	.-6      	; 0x141c <__mulsf3_pse+0x82>
    1422:	98 3e       	cpi	r25, 0xE8	; 232
    1424:	dc f3       	brlt	.-10     	; 0x141c <__mulsf3_pse+0x82>
    1426:	86 95       	lsr	r24
    1428:	77 95       	ror	r23
    142a:	67 95       	ror	r22
    142c:	b7 95       	ror	r27
    142e:	f7 95       	ror	r31
    1430:	e7 95       	ror	r30
    1432:	9f 5f       	subi	r25, 0xFF	; 255
    1434:	c1 f7       	brne	.-16     	; 0x1426 <__mulsf3_pse+0x8c>
    1436:	fe 2b       	or	r31, r30
    1438:	88 0f       	add	r24, r24
    143a:	91 1d       	adc	r25, r1
    143c:	96 95       	lsr	r25
    143e:	87 95       	ror	r24
    1440:	97 f9       	bld	r25, 7
    1442:	08 95       	ret

00001444 <pow>:
    1444:	fa 01       	movw	r30, r20
    1446:	ee 0f       	add	r30, r30
    1448:	ff 1f       	adc	r31, r31
    144a:	30 96       	adiw	r30, 0x00	; 0
    144c:	21 05       	cpc	r18, r1
    144e:	31 05       	cpc	r19, r1
    1450:	99 f1       	breq	.+102    	; 0x14b8 <pow+0x74>
    1452:	61 15       	cp	r22, r1
    1454:	71 05       	cpc	r23, r1
    1456:	61 f4       	brne	.+24     	; 0x1470 <pow+0x2c>
    1458:	80 38       	cpi	r24, 0x80	; 128
    145a:	bf e3       	ldi	r27, 0x3F	; 63
    145c:	9b 07       	cpc	r25, r27
    145e:	49 f1       	breq	.+82     	; 0x14b2 <pow+0x6e>
    1460:	68 94       	set
    1462:	90 38       	cpi	r25, 0x80	; 128
    1464:	81 05       	cpc	r24, r1
    1466:	61 f0       	breq	.+24     	; 0x1480 <pow+0x3c>
    1468:	80 38       	cpi	r24, 0x80	; 128
    146a:	bf ef       	ldi	r27, 0xFF	; 255
    146c:	9b 07       	cpc	r25, r27
    146e:	41 f0       	breq	.+16     	; 0x1480 <pow+0x3c>
    1470:	99 23       	and	r25, r25
    1472:	42 f5       	brpl	.+80     	; 0x14c4 <pow+0x80>
    1474:	ff 3f       	cpi	r31, 0xFF	; 255
    1476:	e1 05       	cpc	r30, r1
    1478:	31 05       	cpc	r19, r1
    147a:	21 05       	cpc	r18, r1
    147c:	11 f1       	breq	.+68     	; 0x14c2 <pow+0x7e>
    147e:	e8 94       	clt
    1480:	08 94       	sec
    1482:	e7 95       	ror	r30
    1484:	d9 01       	movw	r26, r18
    1486:	aa 23       	and	r26, r26
    1488:	29 f4       	brne	.+10     	; 0x1494 <pow+0x50>
    148a:	ab 2f       	mov	r26, r27
    148c:	be 2f       	mov	r27, r30
    148e:	f8 5f       	subi	r31, 0xF8	; 248
    1490:	d0 f3       	brcs	.-12     	; 0x1486 <pow+0x42>
    1492:	10 c0       	rjmp	.+32     	; 0x14b4 <pow+0x70>
    1494:	ff 5f       	subi	r31, 0xFF	; 255
    1496:	70 f4       	brcc	.+28     	; 0x14b4 <pow+0x70>
    1498:	a6 95       	lsr	r26
    149a:	e0 f7       	brcc	.-8      	; 0x1494 <pow+0x50>
    149c:	f7 39       	cpi	r31, 0x97	; 151
    149e:	50 f0       	brcs	.+20     	; 0x14b4 <pow+0x70>
    14a0:	19 f0       	breq	.+6      	; 0x14a8 <pow+0x64>
    14a2:	ff 3a       	cpi	r31, 0xAF	; 175
    14a4:	38 f4       	brcc	.+14     	; 0x14b4 <pow+0x70>
    14a6:	9f 77       	andi	r25, 0x7F	; 127
    14a8:	9f 93       	push	r25
    14aa:	0c d0       	rcall	.+24     	; 0x14c4 <pow+0x80>
    14ac:	0f 90       	pop	r0
    14ae:	07 fc       	sbrc	r0, 7
    14b0:	90 58       	subi	r25, 0x80	; 128
    14b2:	08 95       	ret
    14b4:	3e f0       	brts	.+14     	; 0x14c4 <pow+0x80>
    14b6:	49 c0       	rjmp	.+146    	; 0x154a <__fp_nan>
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	80 e8       	ldi	r24, 0x80	; 128
    14be:	9f e3       	ldi	r25, 0x3F	; 63
    14c0:	08 95       	ret
    14c2:	4f e7       	ldi	r20, 0x7F	; 127
    14c4:	9f 77       	andi	r25, 0x7F	; 127
    14c6:	5f 93       	push	r21
    14c8:	4f 93       	push	r20
    14ca:	3f 93       	push	r19
    14cc:	2f 93       	push	r18
    14ce:	c6 d0       	rcall	.+396    	; 0x165c <log>
    14d0:	2f 91       	pop	r18
    14d2:	3f 91       	pop	r19
    14d4:	4f 91       	pop	r20
    14d6:	5f 91       	pop	r21
    14d8:	52 df       	rcall	.-348    	; 0x137e <__mulsf3>
    14da:	05 c0       	rjmp	.+10     	; 0x14e6 <exp>
    14dc:	19 f4       	brne	.+6      	; 0x14e4 <pow+0xa0>
    14de:	0e f0       	brts	.+2      	; 0x14e2 <pow+0x9e>
    14e0:	2e c0       	rjmp	.+92     	; 0x153e <__fp_inf>
    14e2:	46 cf       	rjmp	.-372    	; 0x1370 <__fp_zero>
    14e4:	32 c0       	rjmp	.+100    	; 0x154a <__fp_nan>

000014e6 <exp>:
    14e6:	2a df       	rcall	.-428    	; 0x133c <__fp_splitA>
    14e8:	c8 f3       	brcs	.-14     	; 0x14dc <pow+0x98>
    14ea:	96 38       	cpi	r25, 0x86	; 134
    14ec:	c0 f7       	brcc	.-16     	; 0x14de <pow+0x9a>
    14ee:	07 f8       	bld	r0, 7
    14f0:	0f 92       	push	r0
    14f2:	e8 94       	clt
    14f4:	2b e3       	ldi	r18, 0x3B	; 59
    14f6:	3a ea       	ldi	r19, 0xAA	; 170
    14f8:	48 eb       	ldi	r20, 0xB8	; 184
    14fa:	5f e7       	ldi	r21, 0x7F	; 127
    14fc:	4e df       	rcall	.-356    	; 0x139a <__mulsf3_pse>
    14fe:	0f 92       	push	r0
    1500:	0f 92       	push	r0
    1502:	0f 92       	push	r0
    1504:	4d b7       	in	r20, 0x3d	; 61
    1506:	5e b7       	in	r21, 0x3e	; 62
    1508:	0f 92       	push	r0
    150a:	e8 d0       	rcall	.+464    	; 0x16dc <modf>
    150c:	ec e8       	ldi	r30, 0x8C	; 140
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	1f d0       	rcall	.+62     	; 0x1550 <__fp_powser>
    1512:	4f 91       	pop	r20
    1514:	5f 91       	pop	r21
    1516:	ef 91       	pop	r30
    1518:	ff 91       	pop	r31
    151a:	e5 95       	asr	r30
    151c:	ee 1f       	adc	r30, r30
    151e:	ff 1f       	adc	r31, r31
    1520:	49 f0       	breq	.+18     	; 0x1534 <exp+0x4e>
    1522:	fe 57       	subi	r31, 0x7E	; 126
    1524:	e0 68       	ori	r30, 0x80	; 128
    1526:	44 27       	eor	r20, r20
    1528:	ee 0f       	add	r30, r30
    152a:	44 1f       	adc	r20, r20
    152c:	fa 95       	dec	r31
    152e:	e1 f7       	brne	.-8      	; 0x1528 <exp+0x42>
    1530:	41 95       	neg	r20
    1532:	55 0b       	sbc	r21, r21
    1534:	5a d0       	rcall	.+180    	; 0x15ea <ldexp>
    1536:	0f 90       	pop	r0
    1538:	07 fe       	sbrs	r0, 7
    153a:	4e c0       	rjmp	.+156    	; 0x15d8 <inverse>
    153c:	08 95       	ret

0000153e <__fp_inf>:
    153e:	97 f9       	bld	r25, 7
    1540:	9f 67       	ori	r25, 0x7F	; 127
    1542:	80 e8       	ldi	r24, 0x80	; 128
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	60 e0       	ldi	r22, 0x00	; 0
    1548:	08 95       	ret

0000154a <__fp_nan>:
    154a:	9f ef       	ldi	r25, 0xFF	; 255
    154c:	80 ec       	ldi	r24, 0xC0	; 192
    154e:	08 95       	ret

00001550 <__fp_powser>:
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	1f 93       	push	r17
    1556:	0f 93       	push	r16
    1558:	ff 92       	push	r15
    155a:	ef 92       	push	r14
    155c:	df 92       	push	r13
    155e:	7b 01       	movw	r14, r22
    1560:	8c 01       	movw	r16, r24
    1562:	68 94       	set
    1564:	05 c0       	rjmp	.+10     	; 0x1570 <__fp_powser+0x20>
    1566:	da 2e       	mov	r13, r26
    1568:	ef 01       	movw	r28, r30
    156a:	15 df       	rcall	.-470    	; 0x1396 <__mulsf3x>
    156c:	fe 01       	movw	r30, r28
    156e:	e8 94       	clt
    1570:	a5 91       	lpm	r26, Z+
    1572:	25 91       	lpm	r18, Z+
    1574:	35 91       	lpm	r19, Z+
    1576:	45 91       	lpm	r20, Z+
    1578:	55 91       	lpm	r21, Z+
    157a:	ae f3       	brts	.-22     	; 0x1566 <__fp_powser+0x16>
    157c:	ef 01       	movw	r28, r30
    157e:	f3 d0       	rcall	.+486    	; 0x1766 <__addsf3x>
    1580:	fe 01       	movw	r30, r28
    1582:	97 01       	movw	r18, r14
    1584:	a8 01       	movw	r20, r16
    1586:	da 94       	dec	r13
    1588:	79 f7       	brne	.-34     	; 0x1568 <__fp_powser+0x18>
    158a:	df 90       	pop	r13
    158c:	ef 90       	pop	r14
    158e:	ff 90       	pop	r15
    1590:	0f 91       	pop	r16
    1592:	1f 91       	pop	r17
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <__fp_pscA>:
    159a:	00 24       	eor	r0, r0
    159c:	0a 94       	dec	r0
    159e:	16 16       	cp	r1, r22
    15a0:	17 06       	cpc	r1, r23
    15a2:	18 06       	cpc	r1, r24
    15a4:	09 06       	cpc	r0, r25
    15a6:	08 95       	ret

000015a8 <__fp_pscB>:
    15a8:	00 24       	eor	r0, r0
    15aa:	0a 94       	dec	r0
    15ac:	12 16       	cp	r1, r18
    15ae:	13 06       	cpc	r1, r19
    15b0:	14 06       	cpc	r1, r20
    15b2:	05 06       	cpc	r0, r21
    15b4:	08 95       	ret

000015b6 <__fp_round>:
    15b6:	09 2e       	mov	r0, r25
    15b8:	03 94       	inc	r0
    15ba:	00 0c       	add	r0, r0
    15bc:	11 f4       	brne	.+4      	; 0x15c2 <__fp_round+0xc>
    15be:	88 23       	and	r24, r24
    15c0:	52 f0       	brmi	.+20     	; 0x15d6 <__fp_round+0x20>
    15c2:	bb 0f       	add	r27, r27
    15c4:	40 f4       	brcc	.+16     	; 0x15d6 <__fp_round+0x20>
    15c6:	bf 2b       	or	r27, r31
    15c8:	11 f4       	brne	.+4      	; 0x15ce <__fp_round+0x18>
    15ca:	60 ff       	sbrs	r22, 0
    15cc:	04 c0       	rjmp	.+8      	; 0x15d6 <__fp_round+0x20>
    15ce:	6f 5f       	subi	r22, 0xFF	; 255
    15d0:	7f 4f       	sbci	r23, 0xFF	; 255
    15d2:	8f 4f       	sbci	r24, 0xFF	; 255
    15d4:	9f 4f       	sbci	r25, 0xFF	; 255
    15d6:	08 95       	ret

000015d8 <inverse>:
    15d8:	9b 01       	movw	r18, r22
    15da:	ac 01       	movw	r20, r24
    15dc:	60 e0       	ldi	r22, 0x00	; 0
    15de:	70 e0       	ldi	r23, 0x00	; 0
    15e0:	80 e8       	ldi	r24, 0x80	; 128
    15e2:	9f e3       	ldi	r25, 0x3F	; 63
    15e4:	13 c1       	rjmp	.+550    	; 0x180c <__divsf3>
    15e6:	ab cf       	rjmp	.-170    	; 0x153e <__fp_inf>
    15e8:	79 c1       	rjmp	.+754    	; 0x18dc <__fp_mpack>

000015ea <ldexp>:
    15ea:	a8 de       	rcall	.-688    	; 0x133c <__fp_splitA>
    15ec:	e8 f3       	brcs	.-6      	; 0x15e8 <inverse+0x10>
    15ee:	99 23       	and	r25, r25
    15f0:	d9 f3       	breq	.-10     	; 0x15e8 <inverse+0x10>
    15f2:	94 0f       	add	r25, r20
    15f4:	51 1d       	adc	r21, r1
    15f6:	bb f3       	brvs	.-18     	; 0x15e6 <inverse+0xe>
    15f8:	91 50       	subi	r25, 0x01	; 1
    15fa:	50 40       	sbci	r21, 0x00	; 0
    15fc:	94 f0       	brlt	.+36     	; 0x1622 <ldexp+0x38>
    15fe:	59 f0       	breq	.+22     	; 0x1616 <ldexp+0x2c>
    1600:	88 23       	and	r24, r24
    1602:	32 f0       	brmi	.+12     	; 0x1610 <ldexp+0x26>
    1604:	66 0f       	add	r22, r22
    1606:	77 1f       	adc	r23, r23
    1608:	88 1f       	adc	r24, r24
    160a:	91 50       	subi	r25, 0x01	; 1
    160c:	50 40       	sbci	r21, 0x00	; 0
    160e:	c1 f7       	brne	.-16     	; 0x1600 <ldexp+0x16>
    1610:	9e 3f       	cpi	r25, 0xFE	; 254
    1612:	51 05       	cpc	r21, r1
    1614:	44 f7       	brge	.-48     	; 0x15e6 <inverse+0xe>
    1616:	88 0f       	add	r24, r24
    1618:	91 1d       	adc	r25, r1
    161a:	96 95       	lsr	r25
    161c:	87 95       	ror	r24
    161e:	97 f9       	bld	r25, 7
    1620:	08 95       	ret
    1622:	5f 3f       	cpi	r21, 0xFF	; 255
    1624:	ac f0       	brlt	.+42     	; 0x1650 <ldexp+0x66>
    1626:	98 3e       	cpi	r25, 0xE8	; 232
    1628:	9c f0       	brlt	.+38     	; 0x1650 <ldexp+0x66>
    162a:	bb 27       	eor	r27, r27
    162c:	86 95       	lsr	r24
    162e:	77 95       	ror	r23
    1630:	67 95       	ror	r22
    1632:	b7 95       	ror	r27
    1634:	08 f4       	brcc	.+2      	; 0x1638 <ldexp+0x4e>
    1636:	b1 60       	ori	r27, 0x01	; 1
    1638:	93 95       	inc	r25
    163a:	c1 f7       	brne	.-16     	; 0x162c <ldexp+0x42>
    163c:	bb 0f       	add	r27, r27
    163e:	58 f7       	brcc	.-42     	; 0x1616 <ldexp+0x2c>
    1640:	11 f4       	brne	.+4      	; 0x1646 <ldexp+0x5c>
    1642:	60 ff       	sbrs	r22, 0
    1644:	e8 cf       	rjmp	.-48     	; 0x1616 <ldexp+0x2c>
    1646:	6f 5f       	subi	r22, 0xFF	; 255
    1648:	7f 4f       	sbci	r23, 0xFF	; 255
    164a:	8f 4f       	sbci	r24, 0xFF	; 255
    164c:	9f 4f       	sbci	r25, 0xFF	; 255
    164e:	e3 cf       	rjmp	.-58     	; 0x1616 <ldexp+0x2c>
    1650:	90 ce       	rjmp	.-736    	; 0x1372 <__fp_szero>
    1652:	0e f0       	brts	.+2      	; 0x1656 <ldexp+0x6c>
    1654:	43 c1       	rjmp	.+646    	; 0x18dc <__fp_mpack>
    1656:	79 cf       	rjmp	.-270    	; 0x154a <__fp_nan>
    1658:	68 94       	set
    165a:	71 cf       	rjmp	.-286    	; 0x153e <__fp_inf>

0000165c <log>:
    165c:	6f de       	rcall	.-802    	; 0x133c <__fp_splitA>
    165e:	c8 f3       	brcs	.-14     	; 0x1652 <ldexp+0x68>
    1660:	99 23       	and	r25, r25
    1662:	d1 f3       	breq	.-12     	; 0x1658 <ldexp+0x6e>
    1664:	c6 f3       	brts	.-16     	; 0x1656 <ldexp+0x6c>
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	1f 93       	push	r17
    166c:	0f 93       	push	r16
    166e:	ff 92       	push	r15
    1670:	c9 2f       	mov	r28, r25
    1672:	dd 27       	eor	r29, r29
    1674:	88 23       	and	r24, r24
    1676:	2a f0       	brmi	.+10     	; 0x1682 <log+0x26>
    1678:	21 97       	sbiw	r28, 0x01	; 1
    167a:	66 0f       	add	r22, r22
    167c:	77 1f       	adc	r23, r23
    167e:	88 1f       	adc	r24, r24
    1680:	da f7       	brpl	.-10     	; 0x1678 <log+0x1c>
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	40 e8       	ldi	r20, 0x80	; 128
    1688:	5f eb       	ldi	r21, 0xBF	; 191
    168a:	9f e3       	ldi	r25, 0x3F	; 63
    168c:	88 39       	cpi	r24, 0x98	; 152
    168e:	20 f0       	brcs	.+8      	; 0x1698 <log+0x3c>
    1690:	80 3e       	cpi	r24, 0xE0	; 224
    1692:	30 f0       	brcs	.+12     	; 0x16a0 <log+0x44>
    1694:	21 96       	adiw	r28, 0x01	; 1
    1696:	8f 77       	andi	r24, 0x7F	; 127
    1698:	55 d0       	rcall	.+170    	; 0x1744 <__addsf3>
    169a:	e4 eb       	ldi	r30, 0xB4	; 180
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	03 c0       	rjmp	.+6      	; 0x16a6 <log+0x4a>
    16a0:	51 d0       	rcall	.+162    	; 0x1744 <__addsf3>
    16a2:	e1 ee       	ldi	r30, 0xE1	; 225
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	54 df       	rcall	.-344    	; 0x1550 <__fp_powser>
    16a8:	8b 01       	movw	r16, r22
    16aa:	be 01       	movw	r22, r28
    16ac:	ec 01       	movw	r28, r24
    16ae:	fb 2e       	mov	r15, r27
    16b0:	6f 57       	subi	r22, 0x7F	; 127
    16b2:	71 09       	sbc	r23, r1
    16b4:	75 95       	asr	r23
    16b6:	77 1f       	adc	r23, r23
    16b8:	88 0b       	sbc	r24, r24
    16ba:	99 0b       	sbc	r25, r25
    16bc:	fc dd       	rcall	.-1032   	; 0x12b6 <__floatsisf>
    16be:	28 e1       	ldi	r18, 0x18	; 24
    16c0:	32 e7       	ldi	r19, 0x72	; 114
    16c2:	41 e3       	ldi	r20, 0x31	; 49
    16c4:	5f e3       	ldi	r21, 0x3F	; 63
    16c6:	67 de       	rcall	.-818    	; 0x1396 <__mulsf3x>
    16c8:	af 2d       	mov	r26, r15
    16ca:	98 01       	movw	r18, r16
    16cc:	ae 01       	movw	r20, r28
    16ce:	ff 90       	pop	r15
    16d0:	0f 91       	pop	r16
    16d2:	1f 91       	pop	r17
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	46 d0       	rcall	.+140    	; 0x1766 <__addsf3x>
    16da:	6d cf       	rjmp	.-294    	; 0x15b6 <__fp_round>

000016dc <modf>:
    16dc:	fa 01       	movw	r30, r20
    16de:	dc 01       	movw	r26, r24
    16e0:	aa 0f       	add	r26, r26
    16e2:	bb 1f       	adc	r27, r27
    16e4:	9b 01       	movw	r18, r22
    16e6:	ac 01       	movw	r20, r24
    16e8:	bf 57       	subi	r27, 0x7F	; 127
    16ea:	28 f4       	brcc	.+10     	; 0x16f6 <modf+0x1a>
    16ec:	22 27       	eor	r18, r18
    16ee:	33 27       	eor	r19, r19
    16f0:	44 27       	eor	r20, r20
    16f2:	50 78       	andi	r21, 0x80	; 128
    16f4:	1f c0       	rjmp	.+62     	; 0x1734 <modf+0x58>
    16f6:	b7 51       	subi	r27, 0x17	; 23
    16f8:	88 f4       	brcc	.+34     	; 0x171c <modf+0x40>
    16fa:	ab 2f       	mov	r26, r27
    16fc:	00 24       	eor	r0, r0
    16fe:	46 95       	lsr	r20
    1700:	37 95       	ror	r19
    1702:	27 95       	ror	r18
    1704:	01 1c       	adc	r0, r1
    1706:	a3 95       	inc	r26
    1708:	d2 f3       	brmi	.-12     	; 0x16fe <modf+0x22>
    170a:	00 20       	and	r0, r0
    170c:	69 f0       	breq	.+26     	; 0x1728 <modf+0x4c>
    170e:	22 0f       	add	r18, r18
    1710:	33 1f       	adc	r19, r19
    1712:	44 1f       	adc	r20, r20
    1714:	b3 95       	inc	r27
    1716:	da f3       	brmi	.-10     	; 0x170e <modf+0x32>
    1718:	0d d0       	rcall	.+26     	; 0x1734 <modf+0x58>
    171a:	13 c0       	rjmp	.+38     	; 0x1742 <__subsf3>
    171c:	61 30       	cpi	r22, 0x01	; 1
    171e:	71 05       	cpc	r23, r1
    1720:	a0 e8       	ldi	r26, 0x80	; 128
    1722:	8a 07       	cpc	r24, r26
    1724:	b9 46       	sbci	r27, 0x69	; 105
    1726:	30 f4       	brcc	.+12     	; 0x1734 <modf+0x58>
    1728:	9b 01       	movw	r18, r22
    172a:	ac 01       	movw	r20, r24
    172c:	66 27       	eor	r22, r22
    172e:	77 27       	eor	r23, r23
    1730:	88 27       	eor	r24, r24
    1732:	90 78       	andi	r25, 0x80	; 128
    1734:	30 96       	adiw	r30, 0x00	; 0
    1736:	21 f0       	breq	.+8      	; 0x1740 <modf+0x64>
    1738:	20 83       	st	Z, r18
    173a:	31 83       	std	Z+1, r19	; 0x01
    173c:	42 83       	std	Z+2, r20	; 0x02
    173e:	53 83       	std	Z+3, r21	; 0x03
    1740:	08 95       	ret

00001742 <__subsf3>:
    1742:	50 58       	subi	r21, 0x80	; 128

00001744 <__addsf3>:
    1744:	bb 27       	eor	r27, r27
    1746:	aa 27       	eor	r26, r26
    1748:	0e d0       	rcall	.+28     	; 0x1766 <__addsf3x>
    174a:	35 cf       	rjmp	.-406    	; 0x15b6 <__fp_round>
    174c:	26 df       	rcall	.-436    	; 0x159a <__fp_pscA>
    174e:	30 f0       	brcs	.+12     	; 0x175c <__addsf3+0x18>
    1750:	2b df       	rcall	.-426    	; 0x15a8 <__fp_pscB>
    1752:	20 f0       	brcs	.+8      	; 0x175c <__addsf3+0x18>
    1754:	31 f4       	brne	.+12     	; 0x1762 <__addsf3+0x1e>
    1756:	9f 3f       	cpi	r25, 0xFF	; 255
    1758:	11 f4       	brne	.+4      	; 0x175e <__addsf3+0x1a>
    175a:	1e f4       	brtc	.+6      	; 0x1762 <__addsf3+0x1e>
    175c:	f6 ce       	rjmp	.-532    	; 0x154a <__fp_nan>
    175e:	0e f4       	brtc	.+2      	; 0x1762 <__addsf3+0x1e>
    1760:	e0 95       	com	r30
    1762:	e7 fb       	bst	r30, 7
    1764:	ec ce       	rjmp	.-552    	; 0x153e <__fp_inf>

00001766 <__addsf3x>:
    1766:	e9 2f       	mov	r30, r25
    1768:	e1 dd       	rcall	.-1086   	; 0x132c <__fp_split3>
    176a:	80 f3       	brcs	.-32     	; 0x174c <__addsf3+0x8>
    176c:	ba 17       	cp	r27, r26
    176e:	62 07       	cpc	r22, r18
    1770:	73 07       	cpc	r23, r19
    1772:	84 07       	cpc	r24, r20
    1774:	95 07       	cpc	r25, r21
    1776:	18 f0       	brcs	.+6      	; 0x177e <__addsf3x+0x18>
    1778:	71 f4       	brne	.+28     	; 0x1796 <__addsf3x+0x30>
    177a:	9e f5       	brtc	.+102    	; 0x17e2 <__addsf3x+0x7c>
    177c:	f9 cd       	rjmp	.-1038   	; 0x1370 <__fp_zero>
    177e:	0e f4       	brtc	.+2      	; 0x1782 <__addsf3x+0x1c>
    1780:	e0 95       	com	r30
    1782:	0b 2e       	mov	r0, r27
    1784:	ba 2f       	mov	r27, r26
    1786:	a0 2d       	mov	r26, r0
    1788:	0b 01       	movw	r0, r22
    178a:	b9 01       	movw	r22, r18
    178c:	90 01       	movw	r18, r0
    178e:	0c 01       	movw	r0, r24
    1790:	ca 01       	movw	r24, r20
    1792:	a0 01       	movw	r20, r0
    1794:	11 24       	eor	r1, r1
    1796:	ff 27       	eor	r31, r31
    1798:	59 1b       	sub	r21, r25
    179a:	99 f0       	breq	.+38     	; 0x17c2 <__addsf3x+0x5c>
    179c:	59 3f       	cpi	r21, 0xF9	; 249
    179e:	50 f4       	brcc	.+20     	; 0x17b4 <__addsf3x+0x4e>
    17a0:	50 3e       	cpi	r21, 0xE0	; 224
    17a2:	68 f1       	brcs	.+90     	; 0x17fe <__addsf3x+0x98>
    17a4:	1a 16       	cp	r1, r26
    17a6:	f0 40       	sbci	r31, 0x00	; 0
    17a8:	a2 2f       	mov	r26, r18
    17aa:	23 2f       	mov	r18, r19
    17ac:	34 2f       	mov	r19, r20
    17ae:	44 27       	eor	r20, r20
    17b0:	58 5f       	subi	r21, 0xF8	; 248
    17b2:	f3 cf       	rjmp	.-26     	; 0x179a <__addsf3x+0x34>
    17b4:	46 95       	lsr	r20
    17b6:	37 95       	ror	r19
    17b8:	27 95       	ror	r18
    17ba:	a7 95       	ror	r26
    17bc:	f0 40       	sbci	r31, 0x00	; 0
    17be:	53 95       	inc	r21
    17c0:	c9 f7       	brne	.-14     	; 0x17b4 <__addsf3x+0x4e>
    17c2:	7e f4       	brtc	.+30     	; 0x17e2 <__addsf3x+0x7c>
    17c4:	1f 16       	cp	r1, r31
    17c6:	ba 0b       	sbc	r27, r26
    17c8:	62 0b       	sbc	r22, r18
    17ca:	73 0b       	sbc	r23, r19
    17cc:	84 0b       	sbc	r24, r20
    17ce:	ba f0       	brmi	.+46     	; 0x17fe <__addsf3x+0x98>
    17d0:	91 50       	subi	r25, 0x01	; 1
    17d2:	a1 f0       	breq	.+40     	; 0x17fc <__addsf3x+0x96>
    17d4:	ff 0f       	add	r31, r31
    17d6:	bb 1f       	adc	r27, r27
    17d8:	66 1f       	adc	r22, r22
    17da:	77 1f       	adc	r23, r23
    17dc:	88 1f       	adc	r24, r24
    17de:	c2 f7       	brpl	.-16     	; 0x17d0 <__addsf3x+0x6a>
    17e0:	0e c0       	rjmp	.+28     	; 0x17fe <__addsf3x+0x98>
    17e2:	ba 0f       	add	r27, r26
    17e4:	62 1f       	adc	r22, r18
    17e6:	73 1f       	adc	r23, r19
    17e8:	84 1f       	adc	r24, r20
    17ea:	48 f4       	brcc	.+18     	; 0x17fe <__addsf3x+0x98>
    17ec:	87 95       	ror	r24
    17ee:	77 95       	ror	r23
    17f0:	67 95       	ror	r22
    17f2:	b7 95       	ror	r27
    17f4:	f7 95       	ror	r31
    17f6:	9e 3f       	cpi	r25, 0xFE	; 254
    17f8:	08 f0       	brcs	.+2      	; 0x17fc <__addsf3x+0x96>
    17fa:	b3 cf       	rjmp	.-154    	; 0x1762 <__addsf3+0x1e>
    17fc:	93 95       	inc	r25
    17fe:	88 0f       	add	r24, r24
    1800:	08 f0       	brcs	.+2      	; 0x1804 <__addsf3x+0x9e>
    1802:	99 27       	eor	r25, r25
    1804:	ee 0f       	add	r30, r30
    1806:	97 95       	ror	r25
    1808:	87 95       	ror	r24
    180a:	08 95       	ret

0000180c <__divsf3>:
    180c:	0c d0       	rcall	.+24     	; 0x1826 <__divsf3x>
    180e:	d3 ce       	rjmp	.-602    	; 0x15b6 <__fp_round>
    1810:	cb de       	rcall	.-618    	; 0x15a8 <__fp_pscB>
    1812:	40 f0       	brcs	.+16     	; 0x1824 <__divsf3+0x18>
    1814:	c2 de       	rcall	.-636    	; 0x159a <__fp_pscA>
    1816:	30 f0       	brcs	.+12     	; 0x1824 <__divsf3+0x18>
    1818:	21 f4       	brne	.+8      	; 0x1822 <__divsf3+0x16>
    181a:	5f 3f       	cpi	r21, 0xFF	; 255
    181c:	19 f0       	breq	.+6      	; 0x1824 <__divsf3+0x18>
    181e:	8f ce       	rjmp	.-738    	; 0x153e <__fp_inf>
    1820:	51 11       	cpse	r21, r1
    1822:	a7 cd       	rjmp	.-1202   	; 0x1372 <__fp_szero>
    1824:	92 ce       	rjmp	.-732    	; 0x154a <__fp_nan>

00001826 <__divsf3x>:
    1826:	82 dd       	rcall	.-1276   	; 0x132c <__fp_split3>
    1828:	98 f3       	brcs	.-26     	; 0x1810 <__divsf3+0x4>

0000182a <__divsf3_pse>:
    182a:	99 23       	and	r25, r25
    182c:	c9 f3       	breq	.-14     	; 0x1820 <__divsf3+0x14>
    182e:	55 23       	and	r21, r21
    1830:	b1 f3       	breq	.-20     	; 0x181e <__divsf3+0x12>
    1832:	95 1b       	sub	r25, r21
    1834:	55 0b       	sbc	r21, r21
    1836:	bb 27       	eor	r27, r27
    1838:	aa 27       	eor	r26, r26
    183a:	62 17       	cp	r22, r18
    183c:	73 07       	cpc	r23, r19
    183e:	84 07       	cpc	r24, r20
    1840:	38 f0       	brcs	.+14     	; 0x1850 <__divsf3_pse+0x26>
    1842:	9f 5f       	subi	r25, 0xFF	; 255
    1844:	5f 4f       	sbci	r21, 0xFF	; 255
    1846:	22 0f       	add	r18, r18
    1848:	33 1f       	adc	r19, r19
    184a:	44 1f       	adc	r20, r20
    184c:	aa 1f       	adc	r26, r26
    184e:	a9 f3       	breq	.-22     	; 0x183a <__divsf3_pse+0x10>
    1850:	33 d0       	rcall	.+102    	; 0x18b8 <__divsf3_pse+0x8e>
    1852:	0e 2e       	mov	r0, r30
    1854:	3a f0       	brmi	.+14     	; 0x1864 <__divsf3_pse+0x3a>
    1856:	e0 e8       	ldi	r30, 0x80	; 128
    1858:	30 d0       	rcall	.+96     	; 0x18ba <__divsf3_pse+0x90>
    185a:	91 50       	subi	r25, 0x01	; 1
    185c:	50 40       	sbci	r21, 0x00	; 0
    185e:	e6 95       	lsr	r30
    1860:	00 1c       	adc	r0, r0
    1862:	ca f7       	brpl	.-14     	; 0x1856 <__divsf3_pse+0x2c>
    1864:	29 d0       	rcall	.+82     	; 0x18b8 <__divsf3_pse+0x8e>
    1866:	fe 2f       	mov	r31, r30
    1868:	27 d0       	rcall	.+78     	; 0x18b8 <__divsf3_pse+0x8e>
    186a:	66 0f       	add	r22, r22
    186c:	77 1f       	adc	r23, r23
    186e:	88 1f       	adc	r24, r24
    1870:	bb 1f       	adc	r27, r27
    1872:	26 17       	cp	r18, r22
    1874:	37 07       	cpc	r19, r23
    1876:	48 07       	cpc	r20, r24
    1878:	ab 07       	cpc	r26, r27
    187a:	b0 e8       	ldi	r27, 0x80	; 128
    187c:	09 f0       	breq	.+2      	; 0x1880 <__divsf3_pse+0x56>
    187e:	bb 0b       	sbc	r27, r27
    1880:	80 2d       	mov	r24, r0
    1882:	bf 01       	movw	r22, r30
    1884:	ff 27       	eor	r31, r31
    1886:	93 58       	subi	r25, 0x83	; 131
    1888:	5f 4f       	sbci	r21, 0xFF	; 255
    188a:	2a f0       	brmi	.+10     	; 0x1896 <__divsf3_pse+0x6c>
    188c:	9e 3f       	cpi	r25, 0xFE	; 254
    188e:	51 05       	cpc	r21, r1
    1890:	68 f0       	brcs	.+26     	; 0x18ac <__divsf3_pse+0x82>
    1892:	55 ce       	rjmp	.-854    	; 0x153e <__fp_inf>
    1894:	6e cd       	rjmp	.-1316   	; 0x1372 <__fp_szero>
    1896:	5f 3f       	cpi	r21, 0xFF	; 255
    1898:	ec f3       	brlt	.-6      	; 0x1894 <__divsf3_pse+0x6a>
    189a:	98 3e       	cpi	r25, 0xE8	; 232
    189c:	dc f3       	brlt	.-10     	; 0x1894 <__divsf3_pse+0x6a>
    189e:	86 95       	lsr	r24
    18a0:	77 95       	ror	r23
    18a2:	67 95       	ror	r22
    18a4:	b7 95       	ror	r27
    18a6:	f7 95       	ror	r31
    18a8:	9f 5f       	subi	r25, 0xFF	; 255
    18aa:	c9 f7       	brne	.-14     	; 0x189e <__divsf3_pse+0x74>
    18ac:	88 0f       	add	r24, r24
    18ae:	91 1d       	adc	r25, r1
    18b0:	96 95       	lsr	r25
    18b2:	87 95       	ror	r24
    18b4:	97 f9       	bld	r25, 7
    18b6:	08 95       	ret
    18b8:	e1 e0       	ldi	r30, 0x01	; 1
    18ba:	66 0f       	add	r22, r22
    18bc:	77 1f       	adc	r23, r23
    18be:	88 1f       	adc	r24, r24
    18c0:	bb 1f       	adc	r27, r27
    18c2:	62 17       	cp	r22, r18
    18c4:	73 07       	cpc	r23, r19
    18c6:	84 07       	cpc	r24, r20
    18c8:	ba 07       	cpc	r27, r26
    18ca:	20 f0       	brcs	.+8      	; 0x18d4 <__divsf3_pse+0xaa>
    18cc:	62 1b       	sub	r22, r18
    18ce:	73 0b       	sbc	r23, r19
    18d0:	84 0b       	sbc	r24, r20
    18d2:	ba 0b       	sbc	r27, r26
    18d4:	ee 1f       	adc	r30, r30
    18d6:	88 f7       	brcc	.-30     	; 0x18ba <__divsf3_pse+0x90>
    18d8:	e0 95       	com	r30
    18da:	08 95       	ret

000018dc <__fp_mpack>:
    18dc:	9f 3f       	cpi	r25, 0xFF	; 255
    18de:	31 f0       	breq	.+12     	; 0x18ec <__fp_mpack_finite+0xc>

000018e0 <__fp_mpack_finite>:
    18e0:	91 50       	subi	r25, 0x01	; 1
    18e2:	20 f4       	brcc	.+8      	; 0x18ec <__fp_mpack_finite+0xc>
    18e4:	87 95       	ror	r24
    18e6:	77 95       	ror	r23
    18e8:	67 95       	ror	r22
    18ea:	b7 95       	ror	r27
    18ec:	88 0f       	add	r24, r24
    18ee:	91 1d       	adc	r25, r1
    18f0:	96 95       	lsr	r25
    18f2:	87 95       	ror	r24
    18f4:	97 f9       	bld	r25, 7
    18f6:	08 95       	ret

000018f8 <__divmodhi4>:
    18f8:	97 fb       	bst	r25, 7
    18fa:	07 2e       	mov	r0, r23
    18fc:	16 f4       	brtc	.+4      	; 0x1902 <__divmodhi4+0xa>
    18fe:	00 94       	com	r0
    1900:	07 d0       	rcall	.+14     	; 0x1910 <__divmodhi4_neg1>
    1902:	77 fd       	sbrc	r23, 7
    1904:	09 d0       	rcall	.+18     	; 0x1918 <__divmodhi4_neg2>
    1906:	0e 94 90 0c 	call	0x1920	; 0x1920 <__udivmodhi4>
    190a:	07 fc       	sbrc	r0, 7
    190c:	05 d0       	rcall	.+10     	; 0x1918 <__divmodhi4_neg2>
    190e:	3e f4       	brtc	.+14     	; 0x191e <__divmodhi4_exit>

00001910 <__divmodhi4_neg1>:
    1910:	90 95       	com	r25
    1912:	81 95       	neg	r24
    1914:	9f 4f       	sbci	r25, 0xFF	; 255
    1916:	08 95       	ret

00001918 <__divmodhi4_neg2>:
    1918:	70 95       	com	r23
    191a:	61 95       	neg	r22
    191c:	7f 4f       	sbci	r23, 0xFF	; 255

0000191e <__divmodhi4_exit>:
    191e:	08 95       	ret

00001920 <__udivmodhi4>:
    1920:	aa 1b       	sub	r26, r26
    1922:	bb 1b       	sub	r27, r27
    1924:	51 e1       	ldi	r21, 0x11	; 17
    1926:	07 c0       	rjmp	.+14     	; 0x1936 <__udivmodhi4_ep>

00001928 <__udivmodhi4_loop>:
    1928:	aa 1f       	adc	r26, r26
    192a:	bb 1f       	adc	r27, r27
    192c:	a6 17       	cp	r26, r22
    192e:	b7 07       	cpc	r27, r23
    1930:	10 f0       	brcs	.+4      	; 0x1936 <__udivmodhi4_ep>
    1932:	a6 1b       	sub	r26, r22
    1934:	b7 0b       	sbc	r27, r23

00001936 <__udivmodhi4_ep>:
    1936:	88 1f       	adc	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	5a 95       	dec	r21
    193c:	a9 f7       	brne	.-22     	; 0x1928 <__udivmodhi4_loop>
    193e:	80 95       	com	r24
    1940:	90 95       	com	r25
    1942:	bc 01       	movw	r22, r24
    1944:	cd 01       	movw	r24, r26
    1946:	08 95       	ret

00001948 <calloc>:
    1948:	0f 93       	push	r16
    194a:	1f 93       	push	r17
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29
    1950:	68 9f       	mul	r22, r24
    1952:	80 01       	movw	r16, r0
    1954:	69 9f       	mul	r22, r25
    1956:	10 0d       	add	r17, r0
    1958:	78 9f       	mul	r23, r24
    195a:	10 0d       	add	r17, r0
    195c:	11 24       	eor	r1, r1
    195e:	c8 01       	movw	r24, r16
    1960:	0e 94 c2 0c 	call	0x1984	; 0x1984 <malloc>
    1964:	c8 2f       	mov	r28, r24
    1966:	d9 2f       	mov	r29, r25
    1968:	20 97       	sbiw	r28, 0x00	; 0
    196a:	31 f0       	breq	.+12     	; 0x1978 <calloc+0x30>
    196c:	a8 01       	movw	r20, r16
    196e:	60 e0       	ldi	r22, 0x00	; 0
    1970:	70 e0       	ldi	r23, 0x00	; 0
    1972:	8c 2f       	mov	r24, r28
    1974:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <memset>
    1978:	ce 01       	movw	r24, r28
    197a:	df 91       	pop	r29
    197c:	cf 91       	pop	r28
    197e:	1f 91       	pop	r17
    1980:	0f 91       	pop	r16
    1982:	08 95       	ret

00001984 <malloc>:
    1984:	0f 93       	push	r16
    1986:	1f 93       	push	r17
    1988:	cf 93       	push	r28
    198a:	df 93       	push	r29
    198c:	82 30       	cpi	r24, 0x02	; 2
    198e:	91 05       	cpc	r25, r1
    1990:	10 f4       	brcc	.+4      	; 0x1996 <malloc+0x12>
    1992:	82 e0       	ldi	r24, 0x02	; 2
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	e0 91 b0 02 	lds	r30, 0x02B0
    199a:	f0 91 b1 02 	lds	r31, 0x02B1
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	c0 e0       	ldi	r28, 0x00	; 0
    19a4:	d0 e0       	ldi	r29, 0x00	; 0
    19a6:	23 c0       	rjmp	.+70     	; 0x19ee <malloc+0x6a>
    19a8:	40 81       	ld	r20, Z
    19aa:	51 81       	ldd	r21, Z+1	; 0x01
    19ac:	48 17       	cp	r20, r24
    19ae:	59 07       	cpc	r21, r25
    19b0:	a8 f0       	brcs	.+42     	; 0x19dc <malloc+0x58>
    19b2:	48 17       	cp	r20, r24
    19b4:	59 07       	cpc	r21, r25
    19b6:	61 f4       	brne	.+24     	; 0x19d0 <malloc+0x4c>
    19b8:	82 81       	ldd	r24, Z+2	; 0x02
    19ba:	93 81       	ldd	r25, Z+3	; 0x03
    19bc:	20 97       	sbiw	r28, 0x00	; 0
    19be:	19 f0       	breq	.+6      	; 0x19c6 <malloc+0x42>
    19c0:	9b 83       	std	Y+3, r25	; 0x03
    19c2:	8a 83       	std	Y+2, r24	; 0x02
    19c4:	2e c0       	rjmp	.+92     	; 0x1a22 <malloc+0x9e>
    19c6:	90 93 b1 02 	sts	0x02B1, r25
    19ca:	80 93 b0 02 	sts	0x02B0, r24
    19ce:	29 c0       	rjmp	.+82     	; 0x1a22 <malloc+0x9e>
    19d0:	21 15       	cp	r18, r1
    19d2:	31 05       	cpc	r19, r1
    19d4:	29 f0       	breq	.+10     	; 0x19e0 <malloc+0x5c>
    19d6:	42 17       	cp	r20, r18
    19d8:	53 07       	cpc	r21, r19
    19da:	10 f0       	brcs	.+4      	; 0x19e0 <malloc+0x5c>
    19dc:	a9 01       	movw	r20, r18
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <malloc+0x60>
    19e0:	be 01       	movw	r22, r28
    19e2:	df 01       	movw	r26, r30
    19e4:	02 81       	ldd	r16, Z+2	; 0x02
    19e6:	13 81       	ldd	r17, Z+3	; 0x03
    19e8:	ef 01       	movw	r28, r30
    19ea:	9a 01       	movw	r18, r20
    19ec:	f8 01       	movw	r30, r16
    19ee:	30 97       	sbiw	r30, 0x00	; 0
    19f0:	d9 f6       	brne	.-74     	; 0x19a8 <malloc+0x24>
    19f2:	21 15       	cp	r18, r1
    19f4:	31 05       	cpc	r19, r1
    19f6:	09 f1       	breq	.+66     	; 0x1a3a <malloc+0xb6>
    19f8:	28 1b       	sub	r18, r24
    19fa:	39 0b       	sbc	r19, r25
    19fc:	24 30       	cpi	r18, 0x04	; 4
    19fe:	31 05       	cpc	r19, r1
    1a00:	90 f4       	brcc	.+36     	; 0x1a26 <malloc+0xa2>
    1a02:	12 96       	adiw	r26, 0x02	; 2
    1a04:	8d 91       	ld	r24, X+
    1a06:	9c 91       	ld	r25, X
    1a08:	13 97       	sbiw	r26, 0x03	; 3
    1a0a:	61 15       	cp	r22, r1
    1a0c:	71 05       	cpc	r23, r1
    1a0e:	21 f0       	breq	.+8      	; 0x1a18 <malloc+0x94>
    1a10:	fb 01       	movw	r30, r22
    1a12:	93 83       	std	Z+3, r25	; 0x03
    1a14:	82 83       	std	Z+2, r24	; 0x02
    1a16:	04 c0       	rjmp	.+8      	; 0x1a20 <malloc+0x9c>
    1a18:	90 93 b1 02 	sts	0x02B1, r25
    1a1c:	80 93 b0 02 	sts	0x02B0, r24
    1a20:	fd 01       	movw	r30, r26
    1a22:	32 96       	adiw	r30, 0x02	; 2
    1a24:	44 c0       	rjmp	.+136    	; 0x1aae <malloc+0x12a>
    1a26:	fd 01       	movw	r30, r26
    1a28:	e2 0f       	add	r30, r18
    1a2a:	f3 1f       	adc	r31, r19
    1a2c:	81 93       	st	Z+, r24
    1a2e:	91 93       	st	Z+, r25
    1a30:	22 50       	subi	r18, 0x02	; 2
    1a32:	31 09       	sbc	r19, r1
    1a34:	2d 93       	st	X+, r18
    1a36:	3c 93       	st	X, r19
    1a38:	3a c0       	rjmp	.+116    	; 0x1aae <malloc+0x12a>
    1a3a:	20 91 ae 02 	lds	r18, 0x02AE
    1a3e:	30 91 af 02 	lds	r19, 0x02AF
    1a42:	23 2b       	or	r18, r19
    1a44:	41 f4       	brne	.+16     	; 0x1a56 <malloc+0xd2>
    1a46:	20 91 02 01 	lds	r18, 0x0102
    1a4a:	30 91 03 01 	lds	r19, 0x0103
    1a4e:	30 93 af 02 	sts	0x02AF, r19
    1a52:	20 93 ae 02 	sts	0x02AE, r18
    1a56:	20 91 00 01 	lds	r18, 0x0100
    1a5a:	30 91 01 01 	lds	r19, 0x0101
    1a5e:	21 15       	cp	r18, r1
    1a60:	31 05       	cpc	r19, r1
    1a62:	41 f4       	brne	.+16     	; 0x1a74 <malloc+0xf0>
    1a64:	2d b7       	in	r18, 0x3d	; 61
    1a66:	3e b7       	in	r19, 0x3e	; 62
    1a68:	40 91 04 01 	lds	r20, 0x0104
    1a6c:	50 91 05 01 	lds	r21, 0x0105
    1a70:	24 1b       	sub	r18, r20
    1a72:	35 0b       	sbc	r19, r21
    1a74:	e0 91 ae 02 	lds	r30, 0x02AE
    1a78:	f0 91 af 02 	lds	r31, 0x02AF
    1a7c:	e2 17       	cp	r30, r18
    1a7e:	f3 07       	cpc	r31, r19
    1a80:	a0 f4       	brcc	.+40     	; 0x1aaa <malloc+0x126>
    1a82:	2e 1b       	sub	r18, r30
    1a84:	3f 0b       	sbc	r19, r31
    1a86:	28 17       	cp	r18, r24
    1a88:	39 07       	cpc	r19, r25
    1a8a:	78 f0       	brcs	.+30     	; 0x1aaa <malloc+0x126>
    1a8c:	ac 01       	movw	r20, r24
    1a8e:	4e 5f       	subi	r20, 0xFE	; 254
    1a90:	5f 4f       	sbci	r21, 0xFF	; 255
    1a92:	24 17       	cp	r18, r20
    1a94:	35 07       	cpc	r19, r21
    1a96:	48 f0       	brcs	.+18     	; 0x1aaa <malloc+0x126>
    1a98:	4e 0f       	add	r20, r30
    1a9a:	5f 1f       	adc	r21, r31
    1a9c:	50 93 af 02 	sts	0x02AF, r21
    1aa0:	40 93 ae 02 	sts	0x02AE, r20
    1aa4:	81 93       	st	Z+, r24
    1aa6:	91 93       	st	Z+, r25
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <malloc+0x12a>
    1aaa:	e0 e0       	ldi	r30, 0x00	; 0
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	cf 01       	movw	r24, r30
    1ab0:	df 91       	pop	r29
    1ab2:	cf 91       	pop	r28
    1ab4:	1f 91       	pop	r17
    1ab6:	0f 91       	pop	r16
    1ab8:	08 95       	ret

00001aba <free>:
    1aba:	ef 92       	push	r14
    1abc:	ff 92       	push	r15
    1abe:	0f 93       	push	r16
    1ac0:	1f 93       	push	r17
    1ac2:	cf 93       	push	r28
    1ac4:	df 93       	push	r29
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <free+0x12>
    1aca:	8f c0       	rjmp	.+286    	; 0x1bea <free+0x130>
    1acc:	dc 01       	movw	r26, r24
    1ace:	12 97       	sbiw	r26, 0x02	; 2
    1ad0:	13 96       	adiw	r26, 0x03	; 3
    1ad2:	1c 92       	st	X, r1
    1ad4:	1e 92       	st	-X, r1
    1ad6:	12 97       	sbiw	r26, 0x02	; 2
    1ad8:	e0 90 b0 02 	lds	r14, 0x02B0
    1adc:	f0 90 b1 02 	lds	r15, 0x02B1
    1ae0:	e1 14       	cp	r14, r1
    1ae2:	f1 04       	cpc	r15, r1
    1ae4:	89 f4       	brne	.+34     	; 0x1b08 <free+0x4e>
    1ae6:	2d 91       	ld	r18, X+
    1ae8:	3c 91       	ld	r19, X
    1aea:	11 97       	sbiw	r26, 0x01	; 1
    1aec:	28 0f       	add	r18, r24
    1aee:	39 1f       	adc	r19, r25
    1af0:	80 91 ae 02 	lds	r24, 0x02AE
    1af4:	90 91 af 02 	lds	r25, 0x02AF
    1af8:	82 17       	cp	r24, r18
    1afa:	93 07       	cpc	r25, r19
    1afc:	89 f5       	brne	.+98     	; 0x1b60 <free+0xa6>
    1afe:	b0 93 af 02 	sts	0x02AF, r27
    1b02:	a0 93 ae 02 	sts	0x02AE, r26
    1b06:	71 c0       	rjmp	.+226    	; 0x1bea <free+0x130>
    1b08:	e7 01       	movw	r28, r14
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	01 c0       	rjmp	.+2      	; 0x1b12 <free+0x58>
    1b10:	ea 01       	movw	r28, r20
    1b12:	ca 17       	cp	r28, r26
    1b14:	db 07       	cpc	r29, r27
    1b16:	38 f4       	brcc	.+14     	; 0x1b26 <free+0x6c>
    1b18:	4a 81       	ldd	r20, Y+2	; 0x02
    1b1a:	5b 81       	ldd	r21, Y+3	; 0x03
    1b1c:	9e 01       	movw	r18, r28
    1b1e:	41 15       	cp	r20, r1
    1b20:	51 05       	cpc	r21, r1
    1b22:	b1 f7       	brne	.-20     	; 0x1b10 <free+0x56>
    1b24:	22 c0       	rjmp	.+68     	; 0x1b6a <free+0xb0>
    1b26:	bc 01       	movw	r22, r24
    1b28:	62 50       	subi	r22, 0x02	; 2
    1b2a:	71 09       	sbc	r23, r1
    1b2c:	fb 01       	movw	r30, r22
    1b2e:	d3 83       	std	Z+3, r29	; 0x03
    1b30:	c2 83       	std	Z+2, r28	; 0x02
    1b32:	00 81       	ld	r16, Z
    1b34:	11 81       	ldd	r17, Z+1	; 0x01
    1b36:	ac 01       	movw	r20, r24
    1b38:	40 0f       	add	r20, r16
    1b3a:	51 1f       	adc	r21, r17
    1b3c:	4c 17       	cp	r20, r28
    1b3e:	5d 07       	cpc	r21, r29
    1b40:	61 f4       	brne	.+24     	; 0x1b5a <free+0xa0>
    1b42:	48 81       	ld	r20, Y
    1b44:	59 81       	ldd	r21, Y+1	; 0x01
    1b46:	40 0f       	add	r20, r16
    1b48:	51 1f       	adc	r21, r17
    1b4a:	4e 5f       	subi	r20, 0xFE	; 254
    1b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b4e:	51 83       	std	Z+1, r21	; 0x01
    1b50:	40 83       	st	Z, r20
    1b52:	4a 81       	ldd	r20, Y+2	; 0x02
    1b54:	5b 81       	ldd	r21, Y+3	; 0x03
    1b56:	53 83       	std	Z+3, r21	; 0x03
    1b58:	42 83       	std	Z+2, r20	; 0x02
    1b5a:	21 15       	cp	r18, r1
    1b5c:	31 05       	cpc	r19, r1
    1b5e:	29 f4       	brne	.+10     	; 0x1b6a <free+0xb0>
    1b60:	b0 93 b1 02 	sts	0x02B1, r27
    1b64:	a0 93 b0 02 	sts	0x02B0, r26
    1b68:	40 c0       	rjmp	.+128    	; 0x1bea <free+0x130>
    1b6a:	f9 01       	movw	r30, r18
    1b6c:	b3 83       	std	Z+3, r27	; 0x03
    1b6e:	a2 83       	std	Z+2, r26	; 0x02
    1b70:	e9 01       	movw	r28, r18
    1b72:	69 91       	ld	r22, Y+
    1b74:	79 91       	ld	r23, Y+
    1b76:	c6 0f       	add	r28, r22
    1b78:	d7 1f       	adc	r29, r23
    1b7a:	ac 17       	cp	r26, r28
    1b7c:	bd 07       	cpc	r27, r29
    1b7e:	79 f4       	brne	.+30     	; 0x1b9e <free+0xe4>
    1b80:	dc 01       	movw	r26, r24
    1b82:	5e 91       	ld	r21, -X
    1b84:	4e 91       	ld	r20, -X
    1b86:	46 0f       	add	r20, r22
    1b88:	57 1f       	adc	r21, r23
    1b8a:	4e 5f       	subi	r20, 0xFE	; 254
    1b8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b8e:	51 83       	std	Z+1, r21	; 0x01
    1b90:	40 83       	st	Z, r20
    1b92:	12 96       	adiw	r26, 0x02	; 2
    1b94:	8d 91       	ld	r24, X+
    1b96:	9c 91       	ld	r25, X
    1b98:	13 97       	sbiw	r26, 0x03	; 3
    1b9a:	93 83       	std	Z+3, r25	; 0x03
    1b9c:	82 83       	std	Z+2, r24	; 0x02
    1b9e:	a0 e0       	ldi	r26, 0x00	; 0
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <free+0xee>
    1ba4:	d7 01       	movw	r26, r14
    1ba6:	7c 01       	movw	r14, r24
    1ba8:	f7 01       	movw	r30, r14
    1baa:	82 81       	ldd	r24, Z+2	; 0x02
    1bac:	93 81       	ldd	r25, Z+3	; 0x03
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	c9 f7       	brne	.-14     	; 0x1ba4 <free+0xea>
    1bb2:	c7 01       	movw	r24, r14
    1bb4:	02 96       	adiw	r24, 0x02	; 2
    1bb6:	20 81       	ld	r18, Z
    1bb8:	31 81       	ldd	r19, Z+1	; 0x01
    1bba:	82 0f       	add	r24, r18
    1bbc:	93 1f       	adc	r25, r19
    1bbe:	20 91 ae 02 	lds	r18, 0x02AE
    1bc2:	30 91 af 02 	lds	r19, 0x02AF
    1bc6:	28 17       	cp	r18, r24
    1bc8:	39 07       	cpc	r19, r25
    1bca:	79 f4       	brne	.+30     	; 0x1bea <free+0x130>
    1bcc:	10 97       	sbiw	r26, 0x00	; 0
    1bce:	29 f4       	brne	.+10     	; 0x1bda <free+0x120>
    1bd0:	10 92 b1 02 	sts	0x02B1, r1
    1bd4:	10 92 b0 02 	sts	0x02B0, r1
    1bd8:	04 c0       	rjmp	.+8      	; 0x1be2 <free+0x128>
    1bda:	13 96       	adiw	r26, 0x03	; 3
    1bdc:	1c 92       	st	X, r1
    1bde:	1e 92       	st	-X, r1
    1be0:	12 97       	sbiw	r26, 0x02	; 2
    1be2:	f0 92 af 02 	sts	0x02AF, r15
    1be6:	e0 92 ae 02 	sts	0x02AE, r14
    1bea:	df 91       	pop	r29
    1bec:	cf 91       	pop	r28
    1bee:	1f 91       	pop	r17
    1bf0:	0f 91       	pop	r16
    1bf2:	ff 90       	pop	r15
    1bf4:	ef 90       	pop	r14
    1bf6:	08 95       	ret

00001bf8 <memset>:
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	01 c0       	rjmp	.+2      	; 0x1bfe <memset+0x6>
    1bfc:	6d 93       	st	X+, r22
    1bfe:	41 50       	subi	r20, 0x01	; 1
    1c00:	50 40       	sbci	r21, 0x00	; 0
    1c02:	e0 f7       	brcc	.-8      	; 0x1bfc <memset+0x4>
    1c04:	08 95       	ret

00001c06 <sprintf>:
    1c06:	0f 93       	push	r16
    1c08:	1f 93       	push	r17
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    1c12:	2e 97       	sbiw	r28, 0x0e	; 14
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	de bf       	out	0x3e, r29	; 62
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	cd bf       	out	0x3d, r28	; 61
    1c1e:	0d 89       	ldd	r16, Y+21	; 0x15
    1c20:	1e 89       	ldd	r17, Y+22	; 0x16
    1c22:	86 e0       	ldi	r24, 0x06	; 6
    1c24:	8c 83       	std	Y+4, r24	; 0x04
    1c26:	1a 83       	std	Y+2, r17	; 0x02
    1c28:	09 83       	std	Y+1, r16	; 0x01
    1c2a:	8f ef       	ldi	r24, 0xFF	; 255
    1c2c:	9f e7       	ldi	r25, 0x7F	; 127
    1c2e:	9e 83       	std	Y+6, r25	; 0x06
    1c30:	8d 83       	std	Y+5, r24	; 0x05
    1c32:	ce 01       	movw	r24, r28
    1c34:	49 96       	adiw	r24, 0x19	; 25
    1c36:	ac 01       	movw	r20, r24
    1c38:	6f 89       	ldd	r22, Y+23	; 0x17
    1c3a:	78 8d       	ldd	r23, Y+24	; 0x18
    1c3c:	ce 01       	movw	r24, r28
    1c3e:	01 96       	adiw	r24, 0x01	; 1
    1c40:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <vfprintf>
    1c44:	ef 81       	ldd	r30, Y+7	; 0x07
    1c46:	f8 85       	ldd	r31, Y+8	; 0x08
    1c48:	e0 0f       	add	r30, r16
    1c4a:	f1 1f       	adc	r31, r17
    1c4c:	10 82       	st	Z, r1
    1c4e:	2e 96       	adiw	r28, 0x0e	; 14
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	df 91       	pop	r29
    1c5c:	cf 91       	pop	r28
    1c5e:	1f 91       	pop	r17
    1c60:	0f 91       	pop	r16
    1c62:	08 95       	ret

00001c64 <vfprintf>:
    1c64:	2f 92       	push	r2
    1c66:	3f 92       	push	r3
    1c68:	4f 92       	push	r4
    1c6a:	5f 92       	push	r5
    1c6c:	6f 92       	push	r6
    1c6e:	7f 92       	push	r7
    1c70:	8f 92       	push	r8
    1c72:	9f 92       	push	r9
    1c74:	af 92       	push	r10
    1c76:	bf 92       	push	r11
    1c78:	cf 92       	push	r12
    1c7a:	df 92       	push	r13
    1c7c:	ef 92       	push	r14
    1c7e:	ff 92       	push	r15
    1c80:	0f 93       	push	r16
    1c82:	1f 93       	push	r17
    1c84:	cf 93       	push	r28
    1c86:	df 93       	push	r29
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	2c 97       	sbiw	r28, 0x0c	; 12
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	de bf       	out	0x3e, r29	; 62
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	cd bf       	out	0x3d, r28	; 61
    1c98:	7c 01       	movw	r14, r24
    1c9a:	6b 01       	movw	r12, r22
    1c9c:	8a 01       	movw	r16, r20
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	17 82       	std	Z+7, r1	; 0x07
    1ca2:	16 82       	std	Z+6, r1	; 0x06
    1ca4:	83 81       	ldd	r24, Z+3	; 0x03
    1ca6:	81 ff       	sbrs	r24, 1
    1ca8:	c6 c1       	rjmp	.+908    	; 0x2036 <vfprintf+0x3d2>
    1caa:	88 24       	eor	r8, r8
    1cac:	83 94       	inc	r8
    1cae:	91 2c       	mov	r9, r1
    1cb0:	8c 0e       	add	r8, r28
    1cb2:	9d 1e       	adc	r9, r29
    1cb4:	f7 01       	movw	r30, r14
    1cb6:	93 81       	ldd	r25, Z+3	; 0x03
    1cb8:	f6 01       	movw	r30, r12
    1cba:	93 fd       	sbrc	r25, 3
    1cbc:	85 91       	lpm	r24, Z+
    1cbe:	93 ff       	sbrs	r25, 3
    1cc0:	81 91       	ld	r24, Z+
    1cc2:	6f 01       	movw	r12, r30
    1cc4:	88 23       	and	r24, r24
    1cc6:	09 f4       	brne	.+2      	; 0x1cca <vfprintf+0x66>
    1cc8:	b2 c1       	rjmp	.+868    	; 0x202e <vfprintf+0x3ca>
    1cca:	85 32       	cpi	r24, 0x25	; 37
    1ccc:	39 f4       	brne	.+14     	; 0x1cdc <vfprintf+0x78>
    1cce:	93 fd       	sbrc	r25, 3
    1cd0:	85 91       	lpm	r24, Z+
    1cd2:	93 ff       	sbrs	r25, 3
    1cd4:	81 91       	ld	r24, Z+
    1cd6:	6f 01       	movw	r12, r30
    1cd8:	85 32       	cpi	r24, 0x25	; 37
    1cda:	29 f4       	brne	.+10     	; 0x1ce6 <vfprintf+0x82>
    1cdc:	b7 01       	movw	r22, r14
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	0e 94 4d 10 	call	0x209a	; 0x209a <fputc>
    1ce4:	e7 cf       	rjmp	.-50     	; 0x1cb4 <vfprintf+0x50>
    1ce6:	51 2c       	mov	r5, r1
    1ce8:	31 2c       	mov	r3, r1
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	20 32       	cpi	r18, 0x20	; 32
    1cee:	a8 f4       	brcc	.+42     	; 0x1d1a <vfprintf+0xb6>
    1cf0:	8b 32       	cpi	r24, 0x2B	; 43
    1cf2:	61 f0       	breq	.+24     	; 0x1d0c <vfprintf+0xa8>
    1cf4:	28 f4       	brcc	.+10     	; 0x1d00 <vfprintf+0x9c>
    1cf6:	80 32       	cpi	r24, 0x20	; 32
    1cf8:	51 f0       	breq	.+20     	; 0x1d0e <vfprintf+0xaa>
    1cfa:	83 32       	cpi	r24, 0x23	; 35
    1cfc:	71 f4       	brne	.+28     	; 0x1d1a <vfprintf+0xb6>
    1cfe:	0b c0       	rjmp	.+22     	; 0x1d16 <vfprintf+0xb2>
    1d00:	8d 32       	cpi	r24, 0x2D	; 45
    1d02:	39 f0       	breq	.+14     	; 0x1d12 <vfprintf+0xae>
    1d04:	80 33       	cpi	r24, 0x30	; 48
    1d06:	49 f4       	brne	.+18     	; 0x1d1a <vfprintf+0xb6>
    1d08:	21 60       	ori	r18, 0x01	; 1
    1d0a:	28 c0       	rjmp	.+80     	; 0x1d5c <vfprintf+0xf8>
    1d0c:	22 60       	ori	r18, 0x02	; 2
    1d0e:	24 60       	ori	r18, 0x04	; 4
    1d10:	25 c0       	rjmp	.+74     	; 0x1d5c <vfprintf+0xf8>
    1d12:	28 60       	ori	r18, 0x08	; 8
    1d14:	23 c0       	rjmp	.+70     	; 0x1d5c <vfprintf+0xf8>
    1d16:	20 61       	ori	r18, 0x10	; 16
    1d18:	21 c0       	rjmp	.+66     	; 0x1d5c <vfprintf+0xf8>
    1d1a:	27 fd       	sbrc	r18, 7
    1d1c:	27 c0       	rjmp	.+78     	; 0x1d6c <vfprintf+0x108>
    1d1e:	38 2f       	mov	r19, r24
    1d20:	30 53       	subi	r19, 0x30	; 48
    1d22:	3a 30       	cpi	r19, 0x0A	; 10
    1d24:	78 f4       	brcc	.+30     	; 0x1d44 <vfprintf+0xe0>
    1d26:	26 ff       	sbrs	r18, 6
    1d28:	06 c0       	rjmp	.+12     	; 0x1d36 <vfprintf+0xd2>
    1d2a:	fa e0       	ldi	r31, 0x0A	; 10
    1d2c:	5f 9e       	mul	r5, r31
    1d2e:	30 0d       	add	r19, r0
    1d30:	11 24       	eor	r1, r1
    1d32:	53 2e       	mov	r5, r19
    1d34:	13 c0       	rjmp	.+38     	; 0x1d5c <vfprintf+0xf8>
    1d36:	8a e0       	ldi	r24, 0x0A	; 10
    1d38:	38 9e       	mul	r3, r24
    1d3a:	30 0d       	add	r19, r0
    1d3c:	11 24       	eor	r1, r1
    1d3e:	33 2e       	mov	r3, r19
    1d40:	20 62       	ori	r18, 0x20	; 32
    1d42:	0c c0       	rjmp	.+24     	; 0x1d5c <vfprintf+0xf8>
    1d44:	8e 32       	cpi	r24, 0x2E	; 46
    1d46:	21 f4       	brne	.+8      	; 0x1d50 <vfprintf+0xec>
    1d48:	26 fd       	sbrc	r18, 6
    1d4a:	71 c1       	rjmp	.+738    	; 0x202e <vfprintf+0x3ca>
    1d4c:	20 64       	ori	r18, 0x40	; 64
    1d4e:	06 c0       	rjmp	.+12     	; 0x1d5c <vfprintf+0xf8>
    1d50:	8c 36       	cpi	r24, 0x6C	; 108
    1d52:	11 f4       	brne	.+4      	; 0x1d58 <vfprintf+0xf4>
    1d54:	20 68       	ori	r18, 0x80	; 128
    1d56:	02 c0       	rjmp	.+4      	; 0x1d5c <vfprintf+0xf8>
    1d58:	88 36       	cpi	r24, 0x68	; 104
    1d5a:	41 f4       	brne	.+16     	; 0x1d6c <vfprintf+0x108>
    1d5c:	f6 01       	movw	r30, r12
    1d5e:	93 fd       	sbrc	r25, 3
    1d60:	85 91       	lpm	r24, Z+
    1d62:	93 ff       	sbrs	r25, 3
    1d64:	81 91       	ld	r24, Z+
    1d66:	6f 01       	movw	r12, r30
    1d68:	81 11       	cpse	r24, r1
    1d6a:	c0 cf       	rjmp	.-128    	; 0x1cec <vfprintf+0x88>
    1d6c:	98 2f       	mov	r25, r24
    1d6e:	95 54       	subi	r25, 0x45	; 69
    1d70:	93 30       	cpi	r25, 0x03	; 3
    1d72:	18 f0       	brcs	.+6      	; 0x1d7a <vfprintf+0x116>
    1d74:	90 52       	subi	r25, 0x20	; 32
    1d76:	93 30       	cpi	r25, 0x03	; 3
    1d78:	28 f4       	brcc	.+10     	; 0x1d84 <vfprintf+0x120>
    1d7a:	0c 5f       	subi	r16, 0xFC	; 252
    1d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7e:	ff e3       	ldi	r31, 0x3F	; 63
    1d80:	f9 83       	std	Y+1, r31	; 0x01
    1d82:	0d c0       	rjmp	.+26     	; 0x1d9e <vfprintf+0x13a>
    1d84:	83 36       	cpi	r24, 0x63	; 99
    1d86:	31 f0       	breq	.+12     	; 0x1d94 <vfprintf+0x130>
    1d88:	83 37       	cpi	r24, 0x73	; 115
    1d8a:	71 f0       	breq	.+28     	; 0x1da8 <vfprintf+0x144>
    1d8c:	83 35       	cpi	r24, 0x53	; 83
    1d8e:	09 f0       	breq	.+2      	; 0x1d92 <vfprintf+0x12e>
    1d90:	5e c0       	rjmp	.+188    	; 0x1e4e <vfprintf+0x1ea>
    1d92:	23 c0       	rjmp	.+70     	; 0x1dda <vfprintf+0x176>
    1d94:	f8 01       	movw	r30, r16
    1d96:	80 81       	ld	r24, Z
    1d98:	89 83       	std	Y+1, r24	; 0x01
    1d9a:	0e 5f       	subi	r16, 0xFE	; 254
    1d9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d9e:	44 24       	eor	r4, r4
    1da0:	43 94       	inc	r4
    1da2:	51 2c       	mov	r5, r1
    1da4:	54 01       	movw	r10, r8
    1da6:	15 c0       	rjmp	.+42     	; 0x1dd2 <vfprintf+0x16e>
    1da8:	38 01       	movw	r6, r16
    1daa:	f2 e0       	ldi	r31, 0x02	; 2
    1dac:	6f 0e       	add	r6, r31
    1dae:	71 1c       	adc	r7, r1
    1db0:	f8 01       	movw	r30, r16
    1db2:	a0 80       	ld	r10, Z
    1db4:	b1 80       	ldd	r11, Z+1	; 0x01
    1db6:	26 ff       	sbrs	r18, 6
    1db8:	03 c0       	rjmp	.+6      	; 0x1dc0 <vfprintf+0x15c>
    1dba:	65 2d       	mov	r22, r5
    1dbc:	70 e0       	ldi	r23, 0x00	; 0
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <vfprintf+0x160>
    1dc0:	6f ef       	ldi	r22, 0xFF	; 255
    1dc2:	7f ef       	ldi	r23, 0xFF	; 255
    1dc4:	c5 01       	movw	r24, r10
    1dc6:	2c 87       	std	Y+12, r18	; 0x0c
    1dc8:	0e 94 42 10 	call	0x2084	; 0x2084 <strnlen>
    1dcc:	2c 01       	movw	r4, r24
    1dce:	83 01       	movw	r16, r6
    1dd0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1dd2:	6f e7       	ldi	r22, 0x7F	; 127
    1dd4:	26 2e       	mov	r2, r22
    1dd6:	22 22       	and	r2, r18
    1dd8:	18 c0       	rjmp	.+48     	; 0x1e0a <vfprintf+0x1a6>
    1dda:	38 01       	movw	r6, r16
    1ddc:	f2 e0       	ldi	r31, 0x02	; 2
    1dde:	6f 0e       	add	r6, r31
    1de0:	71 1c       	adc	r7, r1
    1de2:	f8 01       	movw	r30, r16
    1de4:	a0 80       	ld	r10, Z
    1de6:	b1 80       	ldd	r11, Z+1	; 0x01
    1de8:	26 ff       	sbrs	r18, 6
    1dea:	03 c0       	rjmp	.+6      	; 0x1df2 <vfprintf+0x18e>
    1dec:	65 2d       	mov	r22, r5
    1dee:	70 e0       	ldi	r23, 0x00	; 0
    1df0:	02 c0       	rjmp	.+4      	; 0x1df6 <vfprintf+0x192>
    1df2:	6f ef       	ldi	r22, 0xFF	; 255
    1df4:	7f ef       	ldi	r23, 0xFF	; 255
    1df6:	c5 01       	movw	r24, r10
    1df8:	2c 87       	std	Y+12, r18	; 0x0c
    1dfa:	0e 94 37 10 	call	0x206e	; 0x206e <strnlen_P>
    1dfe:	2c 01       	movw	r4, r24
    1e00:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e02:	50 e8       	ldi	r21, 0x80	; 128
    1e04:	25 2e       	mov	r2, r21
    1e06:	22 2a       	or	r2, r18
    1e08:	83 01       	movw	r16, r6
    1e0a:	23 fc       	sbrc	r2, 3
    1e0c:	1c c0       	rjmp	.+56     	; 0x1e46 <vfprintf+0x1e2>
    1e0e:	06 c0       	rjmp	.+12     	; 0x1e1c <vfprintf+0x1b8>
    1e10:	b7 01       	movw	r22, r14
    1e12:	80 e2       	ldi	r24, 0x20	; 32
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	0e 94 4d 10 	call	0x209a	; 0x209a <fputc>
    1e1a:	3a 94       	dec	r3
    1e1c:	83 2d       	mov	r24, r3
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	48 16       	cp	r4, r24
    1e22:	59 06       	cpc	r5, r25
    1e24:	a8 f3       	brcs	.-22     	; 0x1e10 <vfprintf+0x1ac>
    1e26:	0f c0       	rjmp	.+30     	; 0x1e46 <vfprintf+0x1e2>
    1e28:	f5 01       	movw	r30, r10
    1e2a:	27 fc       	sbrc	r2, 7
    1e2c:	85 91       	lpm	r24, Z+
    1e2e:	27 fe       	sbrs	r2, 7
    1e30:	81 91       	ld	r24, Z+
    1e32:	5f 01       	movw	r10, r30
    1e34:	b7 01       	movw	r22, r14
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	0e 94 4d 10 	call	0x209a	; 0x209a <fputc>
    1e3c:	31 10       	cpse	r3, r1
    1e3e:	3a 94       	dec	r3
    1e40:	f1 e0       	ldi	r31, 0x01	; 1
    1e42:	4f 1a       	sub	r4, r31
    1e44:	51 08       	sbc	r5, r1
    1e46:	41 14       	cp	r4, r1
    1e48:	51 04       	cpc	r5, r1
    1e4a:	71 f7       	brne	.-36     	; 0x1e28 <vfprintf+0x1c4>
    1e4c:	ed c0       	rjmp	.+474    	; 0x2028 <vfprintf+0x3c4>
    1e4e:	84 36       	cpi	r24, 0x64	; 100
    1e50:	11 f0       	breq	.+4      	; 0x1e56 <vfprintf+0x1f2>
    1e52:	89 36       	cpi	r24, 0x69	; 105
    1e54:	41 f5       	brne	.+80     	; 0x1ea6 <vfprintf+0x242>
    1e56:	f8 01       	movw	r30, r16
    1e58:	27 ff       	sbrs	r18, 7
    1e5a:	07 c0       	rjmp	.+14     	; 0x1e6a <vfprintf+0x206>
    1e5c:	60 81       	ld	r22, Z
    1e5e:	71 81       	ldd	r23, Z+1	; 0x01
    1e60:	82 81       	ldd	r24, Z+2	; 0x02
    1e62:	93 81       	ldd	r25, Z+3	; 0x03
    1e64:	0c 5f       	subi	r16, 0xFC	; 252
    1e66:	1f 4f       	sbci	r17, 0xFF	; 255
    1e68:	08 c0       	rjmp	.+16     	; 0x1e7a <vfprintf+0x216>
    1e6a:	60 81       	ld	r22, Z
    1e6c:	71 81       	ldd	r23, Z+1	; 0x01
    1e6e:	88 27       	eor	r24, r24
    1e70:	77 fd       	sbrc	r23, 7
    1e72:	80 95       	com	r24
    1e74:	98 2f       	mov	r25, r24
    1e76:	0e 5f       	subi	r16, 0xFE	; 254
    1e78:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7a:	4f e6       	ldi	r20, 0x6F	; 111
    1e7c:	b4 2e       	mov	r11, r20
    1e7e:	b2 22       	and	r11, r18
    1e80:	97 ff       	sbrs	r25, 7
    1e82:	09 c0       	rjmp	.+18     	; 0x1e96 <vfprintf+0x232>
    1e84:	90 95       	com	r25
    1e86:	80 95       	com	r24
    1e88:	70 95       	com	r23
    1e8a:	61 95       	neg	r22
    1e8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e90:	9f 4f       	sbci	r25, 0xFF	; 255
    1e92:	f0 e8       	ldi	r31, 0x80	; 128
    1e94:	bf 2a       	or	r11, r31
    1e96:	2a e0       	ldi	r18, 0x0A	; 10
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	a4 01       	movw	r20, r8
    1e9c:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__ultoa_invert>
    1ea0:	a8 2e       	mov	r10, r24
    1ea2:	a8 18       	sub	r10, r8
    1ea4:	43 c0       	rjmp	.+134    	; 0x1f2c <vfprintf+0x2c8>
    1ea6:	85 37       	cpi	r24, 0x75	; 117
    1ea8:	31 f4       	brne	.+12     	; 0x1eb6 <vfprintf+0x252>
    1eaa:	3f ee       	ldi	r19, 0xEF	; 239
    1eac:	b3 2e       	mov	r11, r19
    1eae:	b2 22       	and	r11, r18
    1eb0:	2a e0       	ldi	r18, 0x0A	; 10
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	24 c0       	rjmp	.+72     	; 0x1efe <vfprintf+0x29a>
    1eb6:	99 ef       	ldi	r25, 0xF9	; 249
    1eb8:	b9 2e       	mov	r11, r25
    1eba:	b2 22       	and	r11, r18
    1ebc:	8f 36       	cpi	r24, 0x6F	; 111
    1ebe:	b9 f0       	breq	.+46     	; 0x1eee <vfprintf+0x28a>
    1ec0:	20 f4       	brcc	.+8      	; 0x1eca <vfprintf+0x266>
    1ec2:	88 35       	cpi	r24, 0x58	; 88
    1ec4:	09 f0       	breq	.+2      	; 0x1ec8 <vfprintf+0x264>
    1ec6:	b3 c0       	rjmp	.+358    	; 0x202e <vfprintf+0x3ca>
    1ec8:	0d c0       	rjmp	.+26     	; 0x1ee4 <vfprintf+0x280>
    1eca:	80 37       	cpi	r24, 0x70	; 112
    1ecc:	21 f0       	breq	.+8      	; 0x1ed6 <vfprintf+0x272>
    1ece:	88 37       	cpi	r24, 0x78	; 120
    1ed0:	09 f0       	breq	.+2      	; 0x1ed4 <vfprintf+0x270>
    1ed2:	ad c0       	rjmp	.+346    	; 0x202e <vfprintf+0x3ca>
    1ed4:	02 c0       	rjmp	.+4      	; 0x1eda <vfprintf+0x276>
    1ed6:	20 e1       	ldi	r18, 0x10	; 16
    1ed8:	b2 2a       	or	r11, r18
    1eda:	b4 fe       	sbrs	r11, 4
    1edc:	0b c0       	rjmp	.+22     	; 0x1ef4 <vfprintf+0x290>
    1ede:	84 e0       	ldi	r24, 0x04	; 4
    1ee0:	b8 2a       	or	r11, r24
    1ee2:	08 c0       	rjmp	.+16     	; 0x1ef4 <vfprintf+0x290>
    1ee4:	24 ff       	sbrs	r18, 4
    1ee6:	09 c0       	rjmp	.+18     	; 0x1efa <vfprintf+0x296>
    1ee8:	e6 e0       	ldi	r30, 0x06	; 6
    1eea:	be 2a       	or	r11, r30
    1eec:	06 c0       	rjmp	.+12     	; 0x1efa <vfprintf+0x296>
    1eee:	28 e0       	ldi	r18, 0x08	; 8
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	05 c0       	rjmp	.+10     	; 0x1efe <vfprintf+0x29a>
    1ef4:	20 e1       	ldi	r18, 0x10	; 16
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <vfprintf+0x29a>
    1efa:	20 e1       	ldi	r18, 0x10	; 16
    1efc:	32 e0       	ldi	r19, 0x02	; 2
    1efe:	f8 01       	movw	r30, r16
    1f00:	b7 fe       	sbrs	r11, 7
    1f02:	07 c0       	rjmp	.+14     	; 0x1f12 <vfprintf+0x2ae>
    1f04:	60 81       	ld	r22, Z
    1f06:	71 81       	ldd	r23, Z+1	; 0x01
    1f08:	82 81       	ldd	r24, Z+2	; 0x02
    1f0a:	93 81       	ldd	r25, Z+3	; 0x03
    1f0c:	0c 5f       	subi	r16, 0xFC	; 252
    1f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f10:	06 c0       	rjmp	.+12     	; 0x1f1e <vfprintf+0x2ba>
    1f12:	60 81       	ld	r22, Z
    1f14:	71 81       	ldd	r23, Z+1	; 0x01
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	0e 5f       	subi	r16, 0xFE	; 254
    1f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1e:	a4 01       	movw	r20, r8
    1f20:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__ultoa_invert>
    1f24:	a8 2e       	mov	r10, r24
    1f26:	a8 18       	sub	r10, r8
    1f28:	ff e7       	ldi	r31, 0x7F	; 127
    1f2a:	bf 22       	and	r11, r31
    1f2c:	b6 fe       	sbrs	r11, 6
    1f2e:	0b c0       	rjmp	.+22     	; 0x1f46 <vfprintf+0x2e2>
    1f30:	2b 2d       	mov	r18, r11
    1f32:	2e 7f       	andi	r18, 0xFE	; 254
    1f34:	a5 14       	cp	r10, r5
    1f36:	50 f4       	brcc	.+20     	; 0x1f4c <vfprintf+0x2e8>
    1f38:	b4 fe       	sbrs	r11, 4
    1f3a:	0a c0       	rjmp	.+20     	; 0x1f50 <vfprintf+0x2ec>
    1f3c:	b2 fc       	sbrc	r11, 2
    1f3e:	08 c0       	rjmp	.+16     	; 0x1f50 <vfprintf+0x2ec>
    1f40:	2b 2d       	mov	r18, r11
    1f42:	2e 7e       	andi	r18, 0xEE	; 238
    1f44:	05 c0       	rjmp	.+10     	; 0x1f50 <vfprintf+0x2ec>
    1f46:	7a 2c       	mov	r7, r10
    1f48:	2b 2d       	mov	r18, r11
    1f4a:	03 c0       	rjmp	.+6      	; 0x1f52 <vfprintf+0x2ee>
    1f4c:	7a 2c       	mov	r7, r10
    1f4e:	01 c0       	rjmp	.+2      	; 0x1f52 <vfprintf+0x2ee>
    1f50:	75 2c       	mov	r7, r5
    1f52:	24 ff       	sbrs	r18, 4
    1f54:	0d c0       	rjmp	.+26     	; 0x1f70 <vfprintf+0x30c>
    1f56:	fe 01       	movw	r30, r28
    1f58:	ea 0d       	add	r30, r10
    1f5a:	f1 1d       	adc	r31, r1
    1f5c:	80 81       	ld	r24, Z
    1f5e:	80 33       	cpi	r24, 0x30	; 48
    1f60:	11 f4       	brne	.+4      	; 0x1f66 <vfprintf+0x302>
    1f62:	29 7e       	andi	r18, 0xE9	; 233
    1f64:	09 c0       	rjmp	.+18     	; 0x1f78 <vfprintf+0x314>
    1f66:	22 ff       	sbrs	r18, 2
    1f68:	06 c0       	rjmp	.+12     	; 0x1f76 <vfprintf+0x312>
    1f6a:	73 94       	inc	r7
    1f6c:	73 94       	inc	r7
    1f6e:	04 c0       	rjmp	.+8      	; 0x1f78 <vfprintf+0x314>
    1f70:	82 2f       	mov	r24, r18
    1f72:	86 78       	andi	r24, 0x86	; 134
    1f74:	09 f0       	breq	.+2      	; 0x1f78 <vfprintf+0x314>
    1f76:	73 94       	inc	r7
    1f78:	23 fd       	sbrc	r18, 3
    1f7a:	14 c0       	rjmp	.+40     	; 0x1fa4 <vfprintf+0x340>
    1f7c:	20 ff       	sbrs	r18, 0
    1f7e:	0f c0       	rjmp	.+30     	; 0x1f9e <vfprintf+0x33a>
    1f80:	5a 2c       	mov	r5, r10
    1f82:	73 14       	cp	r7, r3
    1f84:	60 f4       	brcc	.+24     	; 0x1f9e <vfprintf+0x33a>
    1f86:	53 0c       	add	r5, r3
    1f88:	57 18       	sub	r5, r7
    1f8a:	73 2c       	mov	r7, r3
    1f8c:	08 c0       	rjmp	.+16     	; 0x1f9e <vfprintf+0x33a>
    1f8e:	b7 01       	movw	r22, r14
    1f90:	80 e2       	ldi	r24, 0x20	; 32
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	2c 87       	std	Y+12, r18	; 0x0c
    1f96:	0e 94 4d 10 	call	0x209a	; 0x209a <fputc>
    1f9a:	73 94       	inc	r7
    1f9c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f9e:	73 14       	cp	r7, r3
    1fa0:	b0 f3       	brcs	.-20     	; 0x1f8e <vfprintf+0x32a>
    1fa2:	04 c0       	rjmp	.+8      	; 0x1fac <vfprintf+0x348>
    1fa4:	73 14       	cp	r7, r3
    1fa6:	10 f4       	brcc	.+4      	; 0x1fac <vfprintf+0x348>
    1fa8:	37 18       	sub	r3, r7
    1faa:	01 c0       	rjmp	.+2      	; 0x1fae <vfprintf+0x34a>
    1fac:	31 2c       	mov	r3, r1
    1fae:	24 ff       	sbrs	r18, 4
    1fb0:	12 c0       	rjmp	.+36     	; 0x1fd6 <vfprintf+0x372>
    1fb2:	b7 01       	movw	r22, r14
    1fb4:	80 e3       	ldi	r24, 0x30	; 48
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	2c 87       	std	Y+12, r18	; 0x0c
    1fba:	0e 94 4d 10 	call	0x209a	; 0x209a <fputc>
    1fbe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fc0:	22 ff       	sbrs	r18, 2
    1fc2:	1e c0       	rjmp	.+60     	; 0x2000 <vfprintf+0x39c>
    1fc4:	21 ff       	sbrs	r18, 1
    1fc6:	03 c0       	rjmp	.+6      	; 0x1fce <vfprintf+0x36a>
    1fc8:	88 e5       	ldi	r24, 0x58	; 88
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	02 c0       	rjmp	.+4      	; 0x1fd2 <vfprintf+0x36e>
    1fce:	88 e7       	ldi	r24, 0x78	; 120
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	b7 01       	movw	r22, r14
    1fd4:	0c c0       	rjmp	.+24     	; 0x1fee <vfprintf+0x38a>
    1fd6:	82 2f       	mov	r24, r18
    1fd8:	86 78       	andi	r24, 0x86	; 134
    1fda:	91 f0       	breq	.+36     	; 0x2000 <vfprintf+0x39c>
    1fdc:	21 fd       	sbrc	r18, 1
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <vfprintf+0x380>
    1fe0:	80 e2       	ldi	r24, 0x20	; 32
    1fe2:	01 c0       	rjmp	.+2      	; 0x1fe6 <vfprintf+0x382>
    1fe4:	8b e2       	ldi	r24, 0x2B	; 43
    1fe6:	27 fd       	sbrc	r18, 7
    1fe8:	8d e2       	ldi	r24, 0x2D	; 45
    1fea:	b7 01       	movw	r22, r14
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	0e 94 4d 10 	call	0x209a	; 0x209a <fputc>
    1ff2:	06 c0       	rjmp	.+12     	; 0x2000 <vfprintf+0x39c>
    1ff4:	b7 01       	movw	r22, r14
    1ff6:	80 e3       	ldi	r24, 0x30	; 48
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	0e 94 4d 10 	call	0x209a	; 0x209a <fputc>
    1ffe:	5a 94       	dec	r5
    2000:	a5 14       	cp	r10, r5
    2002:	c0 f3       	brcs	.-16     	; 0x1ff4 <vfprintf+0x390>
    2004:	aa 94       	dec	r10
    2006:	f4 01       	movw	r30, r8
    2008:	ea 0d       	add	r30, r10
    200a:	f1 1d       	adc	r31, r1
    200c:	b7 01       	movw	r22, r14
    200e:	80 81       	ld	r24, Z
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	0e 94 4d 10 	call	0x209a	; 0x209a <fputc>
    2016:	a1 10       	cpse	r10, r1
    2018:	f5 cf       	rjmp	.-22     	; 0x2004 <vfprintf+0x3a0>
    201a:	06 c0       	rjmp	.+12     	; 0x2028 <vfprintf+0x3c4>
    201c:	b7 01       	movw	r22, r14
    201e:	80 e2       	ldi	r24, 0x20	; 32
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	0e 94 4d 10 	call	0x209a	; 0x209a <fputc>
    2026:	3a 94       	dec	r3
    2028:	31 10       	cpse	r3, r1
    202a:	f8 cf       	rjmp	.-16     	; 0x201c <vfprintf+0x3b8>
    202c:	43 ce       	rjmp	.-890    	; 0x1cb4 <vfprintf+0x50>
    202e:	f7 01       	movw	r30, r14
    2030:	26 81       	ldd	r18, Z+6	; 0x06
    2032:	37 81       	ldd	r19, Z+7	; 0x07
    2034:	02 c0       	rjmp	.+4      	; 0x203a <vfprintf+0x3d6>
    2036:	2f ef       	ldi	r18, 0xFF	; 255
    2038:	3f ef       	ldi	r19, 0xFF	; 255
    203a:	c9 01       	movw	r24, r18
    203c:	2c 96       	adiw	r28, 0x0c	; 12
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	f8 94       	cli
    2042:	de bf       	out	0x3e, r29	; 62
    2044:	0f be       	out	0x3f, r0	; 63
    2046:	cd bf       	out	0x3d, r28	; 61
    2048:	df 91       	pop	r29
    204a:	cf 91       	pop	r28
    204c:	1f 91       	pop	r17
    204e:	0f 91       	pop	r16
    2050:	ff 90       	pop	r15
    2052:	ef 90       	pop	r14
    2054:	df 90       	pop	r13
    2056:	cf 90       	pop	r12
    2058:	bf 90       	pop	r11
    205a:	af 90       	pop	r10
    205c:	9f 90       	pop	r9
    205e:	8f 90       	pop	r8
    2060:	7f 90       	pop	r7
    2062:	6f 90       	pop	r6
    2064:	5f 90       	pop	r5
    2066:	4f 90       	pop	r4
    2068:	3f 90       	pop	r3
    206a:	2f 90       	pop	r2
    206c:	08 95       	ret

0000206e <strnlen_P>:
    206e:	fc 01       	movw	r30, r24
    2070:	05 90       	lpm	r0, Z+
    2072:	61 50       	subi	r22, 0x01	; 1
    2074:	70 40       	sbci	r23, 0x00	; 0
    2076:	01 10       	cpse	r0, r1
    2078:	d8 f7       	brcc	.-10     	; 0x2070 <strnlen_P+0x2>
    207a:	80 95       	com	r24
    207c:	90 95       	com	r25
    207e:	8e 0f       	add	r24, r30
    2080:	9f 1f       	adc	r25, r31
    2082:	08 95       	ret

00002084 <strnlen>:
    2084:	fc 01       	movw	r30, r24
    2086:	61 50       	subi	r22, 0x01	; 1
    2088:	70 40       	sbci	r23, 0x00	; 0
    208a:	01 90       	ld	r0, Z+
    208c:	01 10       	cpse	r0, r1
    208e:	d8 f7       	brcc	.-10     	; 0x2086 <strnlen+0x2>
    2090:	80 95       	com	r24
    2092:	90 95       	com	r25
    2094:	8e 0f       	add	r24, r30
    2096:	9f 1f       	adc	r25, r31
    2098:	08 95       	ret

0000209a <fputc>:
    209a:	0f 93       	push	r16
    209c:	1f 93       	push	r17
    209e:	cf 93       	push	r28
    20a0:	df 93       	push	r29
    20a2:	8c 01       	movw	r16, r24
    20a4:	eb 01       	movw	r28, r22
    20a6:	8b 81       	ldd	r24, Y+3	; 0x03
    20a8:	81 fd       	sbrc	r24, 1
    20aa:	03 c0       	rjmp	.+6      	; 0x20b2 <fputc+0x18>
    20ac:	0f ef       	ldi	r16, 0xFF	; 255
    20ae:	1f ef       	ldi	r17, 0xFF	; 255
    20b0:	1a c0       	rjmp	.+52     	; 0x20e6 <fputc+0x4c>
    20b2:	82 ff       	sbrs	r24, 2
    20b4:	0d c0       	rjmp	.+26     	; 0x20d0 <fputc+0x36>
    20b6:	2e 81       	ldd	r18, Y+6	; 0x06
    20b8:	3f 81       	ldd	r19, Y+7	; 0x07
    20ba:	8c 81       	ldd	r24, Y+4	; 0x04
    20bc:	9d 81       	ldd	r25, Y+5	; 0x05
    20be:	28 17       	cp	r18, r24
    20c0:	39 07       	cpc	r19, r25
    20c2:	64 f4       	brge	.+24     	; 0x20dc <fputc+0x42>
    20c4:	e8 81       	ld	r30, Y
    20c6:	f9 81       	ldd	r31, Y+1	; 0x01
    20c8:	01 93       	st	Z+, r16
    20ca:	f9 83       	std	Y+1, r31	; 0x01
    20cc:	e8 83       	st	Y, r30
    20ce:	06 c0       	rjmp	.+12     	; 0x20dc <fputc+0x42>
    20d0:	e8 85       	ldd	r30, Y+8	; 0x08
    20d2:	f9 85       	ldd	r31, Y+9	; 0x09
    20d4:	80 2f       	mov	r24, r16
    20d6:	09 95       	icall
    20d8:	89 2b       	or	r24, r25
    20da:	41 f7       	brne	.-48     	; 0x20ac <fputc+0x12>
    20dc:	8e 81       	ldd	r24, Y+6	; 0x06
    20de:	9f 81       	ldd	r25, Y+7	; 0x07
    20e0:	01 96       	adiw	r24, 0x01	; 1
    20e2:	9f 83       	std	Y+7, r25	; 0x07
    20e4:	8e 83       	std	Y+6, r24	; 0x06
    20e6:	c8 01       	movw	r24, r16
    20e8:	df 91       	pop	r29
    20ea:	cf 91       	pop	r28
    20ec:	1f 91       	pop	r17
    20ee:	0f 91       	pop	r16
    20f0:	08 95       	ret

000020f2 <__ultoa_invert>:
    20f2:	fa 01       	movw	r30, r20
    20f4:	aa 27       	eor	r26, r26
    20f6:	28 30       	cpi	r18, 0x08	; 8
    20f8:	51 f1       	breq	.+84     	; 0x214e <__ultoa_invert+0x5c>
    20fa:	20 31       	cpi	r18, 0x10	; 16
    20fc:	81 f1       	breq	.+96     	; 0x215e <__ultoa_invert+0x6c>
    20fe:	e8 94       	clt
    2100:	6f 93       	push	r22
    2102:	6e 7f       	andi	r22, 0xFE	; 254
    2104:	6e 5f       	subi	r22, 0xFE	; 254
    2106:	7f 4f       	sbci	r23, 0xFF	; 255
    2108:	8f 4f       	sbci	r24, 0xFF	; 255
    210a:	9f 4f       	sbci	r25, 0xFF	; 255
    210c:	af 4f       	sbci	r26, 0xFF	; 255
    210e:	b1 e0       	ldi	r27, 0x01	; 1
    2110:	3e d0       	rcall	.+124    	; 0x218e <__ultoa_invert+0x9c>
    2112:	b4 e0       	ldi	r27, 0x04	; 4
    2114:	3c d0       	rcall	.+120    	; 0x218e <__ultoa_invert+0x9c>
    2116:	67 0f       	add	r22, r23
    2118:	78 1f       	adc	r23, r24
    211a:	89 1f       	adc	r24, r25
    211c:	9a 1f       	adc	r25, r26
    211e:	a1 1d       	adc	r26, r1
    2120:	68 0f       	add	r22, r24
    2122:	79 1f       	adc	r23, r25
    2124:	8a 1f       	adc	r24, r26
    2126:	91 1d       	adc	r25, r1
    2128:	a1 1d       	adc	r26, r1
    212a:	6a 0f       	add	r22, r26
    212c:	71 1d       	adc	r23, r1
    212e:	81 1d       	adc	r24, r1
    2130:	91 1d       	adc	r25, r1
    2132:	a1 1d       	adc	r26, r1
    2134:	20 d0       	rcall	.+64     	; 0x2176 <__ultoa_invert+0x84>
    2136:	09 f4       	brne	.+2      	; 0x213a <__ultoa_invert+0x48>
    2138:	68 94       	set
    213a:	3f 91       	pop	r19
    213c:	2a e0       	ldi	r18, 0x0A	; 10
    213e:	26 9f       	mul	r18, r22
    2140:	11 24       	eor	r1, r1
    2142:	30 19       	sub	r19, r0
    2144:	30 5d       	subi	r19, 0xD0	; 208
    2146:	31 93       	st	Z+, r19
    2148:	de f6       	brtc	.-74     	; 0x2100 <__ultoa_invert+0xe>
    214a:	cf 01       	movw	r24, r30
    214c:	08 95       	ret
    214e:	46 2f       	mov	r20, r22
    2150:	47 70       	andi	r20, 0x07	; 7
    2152:	40 5d       	subi	r20, 0xD0	; 208
    2154:	41 93       	st	Z+, r20
    2156:	b3 e0       	ldi	r27, 0x03	; 3
    2158:	0f d0       	rcall	.+30     	; 0x2178 <__ultoa_invert+0x86>
    215a:	c9 f7       	brne	.-14     	; 0x214e <__ultoa_invert+0x5c>
    215c:	f6 cf       	rjmp	.-20     	; 0x214a <__ultoa_invert+0x58>
    215e:	46 2f       	mov	r20, r22
    2160:	4f 70       	andi	r20, 0x0F	; 15
    2162:	40 5d       	subi	r20, 0xD0	; 208
    2164:	4a 33       	cpi	r20, 0x3A	; 58
    2166:	18 f0       	brcs	.+6      	; 0x216e <__ultoa_invert+0x7c>
    2168:	49 5d       	subi	r20, 0xD9	; 217
    216a:	31 fd       	sbrc	r19, 1
    216c:	40 52       	subi	r20, 0x20	; 32
    216e:	41 93       	st	Z+, r20
    2170:	02 d0       	rcall	.+4      	; 0x2176 <__ultoa_invert+0x84>
    2172:	a9 f7       	brne	.-22     	; 0x215e <__ultoa_invert+0x6c>
    2174:	ea cf       	rjmp	.-44     	; 0x214a <__ultoa_invert+0x58>
    2176:	b4 e0       	ldi	r27, 0x04	; 4
    2178:	a6 95       	lsr	r26
    217a:	97 95       	ror	r25
    217c:	87 95       	ror	r24
    217e:	77 95       	ror	r23
    2180:	67 95       	ror	r22
    2182:	ba 95       	dec	r27
    2184:	c9 f7       	brne	.-14     	; 0x2178 <__ultoa_invert+0x86>
    2186:	00 97       	sbiw	r24, 0x00	; 0
    2188:	61 05       	cpc	r22, r1
    218a:	71 05       	cpc	r23, r1
    218c:	08 95       	ret
    218e:	9b 01       	movw	r18, r22
    2190:	ac 01       	movw	r20, r24
    2192:	0a 2e       	mov	r0, r26
    2194:	06 94       	lsr	r0
    2196:	57 95       	ror	r21
    2198:	47 95       	ror	r20
    219a:	37 95       	ror	r19
    219c:	27 95       	ror	r18
    219e:	ba 95       	dec	r27
    21a0:	c9 f7       	brne	.-14     	; 0x2194 <__ultoa_invert+0xa2>
    21a2:	62 0f       	add	r22, r18
    21a4:	73 1f       	adc	r23, r19
    21a6:	84 1f       	adc	r24, r20
    21a8:	95 1f       	adc	r25, r21
    21aa:	a0 1d       	adc	r26, r0
    21ac:	08 95       	ret

000021ae <_exit>:
    21ae:	f8 94       	cli

000021b0 <__stop_program>:
    21b0:	ff cf       	rjmp	.-2      	; 0x21b0 <__stop_program>
